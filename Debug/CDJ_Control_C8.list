
CDJ_Control_C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006408  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006818  08006818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800681c  0800681c  0001681c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000258  20000000  08006820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000cec  20000258  08006a78  00020258  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000f44  08006a78  00020f44  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
  9 .debug_info   000251aa  00000000  00000000  00020281  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004911  00000000  00000000  0004542b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ca6b  00000000  00000000  00049d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001480  00000000  00000000  000567a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001480  00000000  00000000  00057c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00019c5a  00000000  00000000  000590a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00016ca8  00000000  00000000  00072d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007c37e  00000000  00000000  000899aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00105d28  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000035e8  00000000  00000000  00105da4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000258 	.word	0x20000258
 8000128:	00000000 	.word	0x00000000
 800012c:	080064fc 	.word	0x080064fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000025c 	.word	0x2000025c
 8000148:	080064fc 	.word	0x080064fc

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fc58 	bl	8000a18 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 fbef 	bl	800095c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b03      	ldr	r3, [pc, #12]	; (800018c <HAL_InitTick+0x40>)
 8000180:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	200001e0 	.word	0x200001e0

08000194 <HAL_Init>:
{
 8000194:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
 8000198:	6813      	ldr	r3, [r2, #0]
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 fbbd 	bl	8000920 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f005 fccc 	bl	8005b48 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	6811      	ldr	r1, [r2, #0]
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <HAL_IncTick+0x14>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000644 	.word	0x20000644
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000644 	.word	0x20000644

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ea:	d002      	beq.n	80001f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <HAL_Delay+0x24>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f2:	f7ff ffed 	bl	80001d0 <HAL_GetTick>
 80001f6:	1b40      	subs	r0, r0, r5
 80001f8:	42a0      	cmp	r0, r4
 80001fa:	d3fa      	bcc.n	80001f2 <HAL_Delay+0x16>
  {
  }
}
 80001fc:	bd38      	pop	{r3, r4, r5, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000

08000204 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000204:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000206:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800020a:	f012 0f50 	tst.w	r2, #80	; 0x50
 800020e:	d003      	beq.n	8000218 <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000210:	6a1b      	ldr	r3, [r3, #32]
 8000212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000214:	4798      	blx	r3
  }
}
 8000216:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800021a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800021e:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	6892      	ldr	r2, [r2, #8]
 8000224:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000228:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800022c:	d003      	beq.n	8000236 <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 800022e:	4618      	mov	r0, r3
 8000230:	f005 fd0c 	bl	8005c4c <HAL_ADC_ConvCpltCallback>
 8000234:	e7ef      	b.n	8000216 <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000236:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000238:	2a00      	cmp	r2, #0
 800023a:	d1f8      	bne.n	800022e <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800023c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800023e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000242:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000246:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800024a:	d1f0      	bne.n	800022e <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800024c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800024e:	f042 0201 	orr.w	r2, r2, #1
 8000252:	629a      	str	r2, [r3, #40]	; 0x28
 8000254:	e7eb      	b.n	800022e <ADC_DMAConvCplt+0x2a>

08000256 <HAL_ADC_ConvHalfCpltCallback>:
}
 8000256:	4770      	bx	lr

08000258 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000258:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800025a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800025c:	f7ff fffb 	bl	8000256 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000260:	bd08      	pop	{r3, pc}

08000262 <HAL_ADC_ErrorCallback>:
}
 8000262:	4770      	bx	lr

08000264 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000264:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000266:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000268:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800026a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800026e:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000270:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000278:	f7ff fff3 	bl	8000262 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800027c:	bd08      	pop	{r3, pc}
	...

08000280 <HAL_ADC_ConfigChannel>:
{ 
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	b083      	sub	sp, #12
 8000284:	4605      	mov	r5, r0
 8000286:	460c      	mov	r4, r1
  __IO uint32_t wait_loop_index = 0U;
 8000288:	2300      	movs	r3, #0
 800028a:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800028c:	6803      	ldr	r3, [r0, #0]
 800028e:	4a5c      	ldr	r2, [pc, #368]	; (8000400 <HAL_ADC_ConfigChannel+0x180>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d008      	beq.n	80002a6 <HAL_ADC_ConfigChannel+0x26>
 8000294:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000298:	4293      	cmp	r3, r2
 800029a:	d004      	beq.n	80002a6 <HAL_ADC_ConfigChannel+0x26>
 800029c:	f240 71ce 	movw	r1, #1998	; 0x7ce
 80002a0:	4858      	ldr	r0, [pc, #352]	; (8000404 <HAL_ADC_ConfigChannel+0x184>)
 80002a2:	f005 fbf1 	bl	8005a88 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80002a6:	6823      	ldr	r3, [r4, #0]
 80002a8:	2b11      	cmp	r3, #17
 80002aa:	d83a      	bhi.n	8000322 <HAL_ADC_ConfigChannel+0xa2>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80002ac:	6863      	ldr	r3, [r4, #4]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	2b0f      	cmp	r3, #15
 80002b2:	d83c      	bhi.n	800032e <HAL_ADC_ConfigChannel+0xae>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80002b4:	68a3      	ldr	r3, [r4, #8]
 80002b6:	2b07      	cmp	r3, #7
 80002b8:	d83f      	bhi.n	800033a <HAL_ADC_ConfigChannel+0xba>
  __HAL_LOCK(hadc);
 80002ba:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80002be:	2b01      	cmp	r3, #1
 80002c0:	f000 809b 	beq.w	80003fa <HAL_ADC_ConfigChannel+0x17a>
 80002c4:	2301      	movs	r3, #1
 80002c6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80002ca:	6863      	ldr	r3, [r4, #4]
 80002cc:	2b06      	cmp	r3, #6
 80002ce:	d83a      	bhi.n	8000346 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80002d0:	6828      	ldr	r0, [r5, #0]
 80002d2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80002d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80002d8:	3b05      	subs	r3, #5
 80002da:	211f      	movs	r1, #31
 80002dc:	4099      	lsls	r1, r3
 80002de:	ea22 0201 	bic.w	r2, r2, r1
 80002e2:	6821      	ldr	r1, [r4, #0]
 80002e4:	fa01 f303 	lsl.w	r3, r1, r3
 80002e8:	4313      	orrs	r3, r2
 80002ea:	6343      	str	r3, [r0, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80002ec:	6823      	ldr	r3, [r4, #0]
 80002ee:	2b09      	cmp	r3, #9
 80002f0:	d949      	bls.n	8000386 <HAL_ADC_ConfigChannel+0x106>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80002f2:	6828      	ldr	r0, [r5, #0]
 80002f4:	68c2      	ldr	r2, [r0, #12]
 80002f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80002fa:	3b1e      	subs	r3, #30
 80002fc:	2107      	movs	r1, #7
 80002fe:	4099      	lsls	r1, r3
 8000300:	ea22 0201 	bic.w	r2, r2, r1
 8000304:	68a1      	ldr	r1, [r4, #8]
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	4313      	orrs	r3, r2
 800030c:	60c3      	str	r3, [r0, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800030e:	6823      	ldr	r3, [r4, #0]
 8000310:	3b10      	subs	r3, #16
 8000312:	2b01      	cmp	r3, #1
 8000314:	d945      	bls.n	80003a2 <HAL_ADC_ConfigChannel+0x122>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000316:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000318:	2300      	movs	r3, #0
 800031a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
}
 800031e:	b003      	add	sp, #12
 8000320:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000322:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8000326:	4837      	ldr	r0, [pc, #220]	; (8000404 <HAL_ADC_ConfigChannel+0x184>)
 8000328:	f005 fbae 	bl	8005a88 <assert_failed>
 800032c:	e7be      	b.n	80002ac <HAL_ADC_ConfigChannel+0x2c>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800032e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000332:	4834      	ldr	r0, [pc, #208]	; (8000404 <HAL_ADC_ConfigChannel+0x184>)
 8000334:	f005 fba8 	bl	8005a88 <assert_failed>
 8000338:	e7bc      	b.n	80002b4 <HAL_ADC_ConfigChannel+0x34>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800033a:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800033e:	4831      	ldr	r0, [pc, #196]	; (8000404 <HAL_ADC_ConfigChannel+0x184>)
 8000340:	f005 fba2 	bl	8005a88 <assert_failed>
 8000344:	e7b9      	b.n	80002ba <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 13U)
 8000346:	2b0c      	cmp	r3, #12
 8000348:	d80e      	bhi.n	8000368 <HAL_ADC_ConfigChannel+0xe8>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800034a:	6828      	ldr	r0, [r5, #0]
 800034c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800034e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000352:	3b23      	subs	r3, #35	; 0x23
 8000354:	211f      	movs	r1, #31
 8000356:	4099      	lsls	r1, r3
 8000358:	ea22 0201 	bic.w	r2, r2, r1
 800035c:	6821      	ldr	r1, [r4, #0]
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	4313      	orrs	r3, r2
 8000364:	6303      	str	r3, [r0, #48]	; 0x30
 8000366:	e7c1      	b.n	80002ec <HAL_ADC_ConfigChannel+0x6c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000368:	6828      	ldr	r0, [r5, #0]
 800036a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800036c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000370:	3b41      	subs	r3, #65	; 0x41
 8000372:	211f      	movs	r1, #31
 8000374:	4099      	lsls	r1, r3
 8000376:	ea22 0201 	bic.w	r2, r2, r1
 800037a:	6821      	ldr	r1, [r4, #0]
 800037c:	fa01 f303 	lsl.w	r3, r1, r3
 8000380:	4313      	orrs	r3, r2
 8000382:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000384:	e7b2      	b.n	80002ec <HAL_ADC_ConfigChannel+0x6c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000386:	6828      	ldr	r0, [r5, #0]
 8000388:	6902      	ldr	r2, [r0, #16]
 800038a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800038e:	2107      	movs	r1, #7
 8000390:	4099      	lsls	r1, r3
 8000392:	ea22 0201 	bic.w	r2, r2, r1
 8000396:	68a1      	ldr	r1, [r4, #8]
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	4313      	orrs	r3, r2
 800039e:	6103      	str	r3, [r0, #16]
 80003a0:	e7b5      	b.n	800030e <HAL_ADC_ConfigChannel+0x8e>
    if (hadc->Instance == ADC1)
 80003a2:	682b      	ldr	r3, [r5, #0]
 80003a4:	4a16      	ldr	r2, [pc, #88]	; (8000400 <HAL_ADC_ConfigChannel+0x180>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d005      	beq.n	80003b6 <HAL_ADC_ConfigChannel+0x136>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80003ac:	f043 0320 	orr.w	r3, r3, #32
 80003b0:	62ab      	str	r3, [r5, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80003b2:	2001      	movs	r0, #1
 80003b4:	e7b0      	b.n	8000318 <HAL_ADC_ConfigChannel+0x98>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80003bc:	d11b      	bne.n	80003f6 <HAL_ADC_ConfigChannel+0x176>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003be:	689a      	ldr	r2, [r3, #8]
 80003c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80003c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003c6:	6823      	ldr	r3, [r4, #0]
 80003c8:	2b10      	cmp	r3, #16
 80003ca:	d001      	beq.n	80003d0 <HAL_ADC_ConfigChannel+0x150>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003cc:	2000      	movs	r0, #0
 80003ce:	e7a3      	b.n	8000318 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80003d0:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <HAL_ADC_ConfigChannel+0x188>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <HAL_ADC_ConfigChannel+0x18c>)
 80003d6:	fba2 2303 	umull	r2, r3, r2, r3
 80003da:	0c9b      	lsrs	r3, r3, #18
 80003dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80003e0:	005a      	lsls	r2, r3, #1
 80003e2:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80003e4:	e002      	b.n	80003ec <HAL_ADC_ConfigChannel+0x16c>
            wait_loop_index--;
 80003e6:	9b01      	ldr	r3, [sp, #4]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80003ec:	9b01      	ldr	r3, [sp, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1f9      	bne.n	80003e6 <HAL_ADC_ConfigChannel+0x166>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003f2:	2000      	movs	r0, #0
 80003f4:	e790      	b.n	8000318 <HAL_ADC_ConfigChannel+0x98>
 80003f6:	2000      	movs	r0, #0
 80003f8:	e78e      	b.n	8000318 <HAL_ADC_ConfigChannel+0x98>
  __HAL_LOCK(hadc);
 80003fa:	2002      	movs	r0, #2
 80003fc:	e78f      	b.n	800031e <HAL_ADC_ConfigChannel+0x9e>
 80003fe:	bf00      	nop
 8000400:	40012400 	.word	0x40012400
 8000404:	08006554 	.word	0x08006554
 8000408:	200001e0 	.word	0x200001e0
 800040c:	431bde83 	.word	0x431bde83

08000410 <ADC_Enable>:
{
 8000410:	b530      	push	{r4, r5, lr}
 8000412:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000414:	2300      	movs	r3, #0
 8000416:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000418:	6803      	ldr	r3, [r0, #0]
 800041a:	689a      	ldr	r2, [r3, #8]
 800041c:	f012 0f01 	tst.w	r2, #1
 8000420:	d12e      	bne.n	8000480 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 8000422:	689a      	ldr	r2, [r3, #8]
 8000424:	f042 0201 	orr.w	r2, r2, #1
 8000428:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <ADC_Enable+0x78>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a17      	ldr	r2, [pc, #92]	; (800048c <ADC_Enable+0x7c>)
 8000430:	fba2 2303 	umull	r2, r3, r2, r3
 8000434:	0c9b      	lsrs	r3, r3, #18
 8000436:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000438:	e002      	b.n	8000440 <ADC_Enable+0x30>
      wait_loop_index--;
 800043a:	9b01      	ldr	r3, [sp, #4]
 800043c:	3b01      	subs	r3, #1
 800043e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000440:	9b01      	ldr	r3, [sp, #4]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d1f9      	bne.n	800043a <ADC_Enable+0x2a>
 8000446:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000448:	f7ff fec2 	bl	80001d0 <HAL_GetTick>
 800044c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800044e:	6823      	ldr	r3, [r4, #0]
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	f013 0f01 	tst.w	r3, #1
 8000456:	d111      	bne.n	800047c <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000458:	f7ff feba 	bl	80001d0 <HAL_GetTick>
 800045c:	1b40      	subs	r0, r0, r5
 800045e:	2802      	cmp	r0, #2
 8000460:	d9f5      	bls.n	800044e <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000462:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000464:	f043 0310 	orr.w	r3, r3, #16
 8000468:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800046a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000472:	2300      	movs	r3, #0
 8000474:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8000478:	2001      	movs	r0, #1
 800047a:	e002      	b.n	8000482 <ADC_Enable+0x72>
  return HAL_OK;
 800047c:	2000      	movs	r0, #0
 800047e:	e000      	b.n	8000482 <ADC_Enable+0x72>
 8000480:	2000      	movs	r0, #0
}
 8000482:	b003      	add	sp, #12
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop
 8000488:	200001e0 	.word	0x200001e0
 800048c:	431bde83 	.word	0x431bde83

08000490 <HAL_ADC_Start_DMA>:
{
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	4604      	mov	r4, r0
 8000494:	460d      	mov	r5, r1
 8000496:	4616      	mov	r6, r2
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8000498:	6802      	ldr	r2, [r0, #0]
 800049a:	4b49      	ldr	r3, [pc, #292]	; (80005c0 <HAL_ADC_Start_DMA+0x130>)
 800049c:	429a      	cmp	r2, r3
 800049e:	d004      	beq.n	80004aa <HAL_ADC_Start_DMA+0x1a>
 80004a0:	f240 6114 	movw	r1, #1556	; 0x614
 80004a4:	4847      	ldr	r0, [pc, #284]	; (80005c4 <HAL_ADC_Start_DMA+0x134>)
 80004a6:	f005 faef 	bl	8005a88 <assert_failed>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004aa:	6823      	ldr	r3, [r4, #0]
 80004ac:	4a44      	ldr	r2, [pc, #272]	; (80005c0 <HAL_ADC_Start_DMA+0x130>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d05a      	beq.n	8000568 <HAL_ADC_Start_DMA+0xd8>
 80004b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d056      	beq.n	8000568 <HAL_ADC_Start_DMA+0xd8>
    __HAL_LOCK(hadc);
 80004ba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d07c      	beq.n	80005bc <HAL_ADC_Start_DMA+0x12c>
 80004c2:	2301      	movs	r3, #1
 80004c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80004c8:	4620      	mov	r0, r4
 80004ca:	f7ff ffa1 	bl	8000410 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80004ce:	4607      	mov	r7, r0
 80004d0:	2800      	cmp	r0, #0
 80004d2:	d16e      	bne.n	80005b2 <HAL_ADC_Start_DMA+0x122>
      ADC_STATE_CLR_SET(hadc->State,
 80004d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80004da:	f023 0301 	bic.w	r3, r3, #1
 80004de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004e4:	6822      	ldr	r2, [r4, #0]
 80004e6:	4b38      	ldr	r3, [pc, #224]	; (80005c8 <HAL_ADC_Start_DMA+0x138>)
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d044      	beq.n	8000576 <HAL_ADC_Start_DMA+0xe6>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004f2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004f4:	6853      	ldr	r3, [r2, #4]
 80004f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80004fa:	d005      	beq.n	8000508 <HAL_ADC_Start_DMA+0x78>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80004fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000502:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000506:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800050a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800050e:	d048      	beq.n	80005a2 <HAL_ADC_Start_DMA+0x112>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000512:	f023 0306 	bic.w	r3, r3, #6
 8000516:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000518:	2300      	movs	r3, #0
 800051a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800051e:	6a23      	ldr	r3, [r4, #32]
 8000520:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <HAL_ADC_Start_DMA+0x13c>)
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000524:	6a23      	ldr	r3, [r4, #32]
 8000526:	4a2a      	ldr	r2, [pc, #168]	; (80005d0 <HAL_ADC_Start_DMA+0x140>)
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800052a:	6a23      	ldr	r3, [r4, #32]
 800052c:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <HAL_ADC_Start_DMA+0x144>)
 800052e:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000530:	6823      	ldr	r3, [r4, #0]
 8000532:	f06f 0202 	mvn.w	r2, #2
 8000536:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000538:	6822      	ldr	r2, [r4, #0]
 800053a:	6893      	ldr	r3, [r2, #8]
 800053c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000540:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000542:	6821      	ldr	r1, [r4, #0]
 8000544:	4633      	mov	r3, r6
 8000546:	462a      	mov	r2, r5
 8000548:	314c      	adds	r1, #76	; 0x4c
 800054a:	6a20      	ldr	r0, [r4, #32]
 800054c:	f000 fb38 	bl	8000bc0 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000550:	6822      	ldr	r2, [r4, #0]
 8000552:	6893      	ldr	r3, [r2, #8]
 8000554:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000558:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800055c:	d024      	beq.n	80005a8 <HAL_ADC_Start_DMA+0x118>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800055e:	6893      	ldr	r3, [r2, #8]
 8000560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000564:	6093      	str	r3, [r2, #8]
 8000566:	e027      	b.n	80005b8 <HAL_ADC_Start_DMA+0x128>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_ADC_Start_DMA+0x130>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000570:	d0a3      	beq.n	80004ba <HAL_ADC_Start_DMA+0x2a>
    tmp_hal_status = HAL_ERROR;
 8000572:	2701      	movs	r7, #1
 8000574:	e020      	b.n	80005b8 <HAL_ADC_Start_DMA+0x128>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000576:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000580:	d0b4      	beq.n	80004ec <HAL_ADC_Start_DMA+0x5c>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <HAL_ADC_Start_DMA+0x130>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000592:	d0b9      	beq.n	8000508 <HAL_ADC_Start_DMA+0x78>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000596:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800059a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800059e:	62a3      	str	r3, [r4, #40]	; 0x28
 80005a0:	e7b2      	b.n	8000508 <HAL_ADC_Start_DMA+0x78>
        ADC_CLEAR_ERRORCODE(hadc);
 80005a2:	2300      	movs	r3, #0
 80005a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005a6:	e7b7      	b.n	8000518 <HAL_ADC_Start_DMA+0x88>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80005a8:	6893      	ldr	r3, [r2, #8]
 80005aa:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80005ae:	6093      	str	r3, [r2, #8]
 80005b0:	e002      	b.n	80005b8 <HAL_ADC_Start_DMA+0x128>
      __HAL_UNLOCK(hadc);
 80005b2:	2300      	movs	r3, #0
 80005b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80005b8:	4638      	mov	r0, r7
 80005ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80005bc:	2702      	movs	r7, #2
 80005be:	e7fb      	b.n	80005b8 <HAL_ADC_Start_DMA+0x128>
 80005c0:	40012400 	.word	0x40012400
 80005c4:	08006554 	.word	0x08006554
 80005c8:	40012800 	.word	0x40012800
 80005cc:	08000205 	.word	0x08000205
 80005d0:	08000259 	.word	0x08000259
 80005d4:	08000265 	.word	0x08000265

080005d8 <ADC_ConversionStop_Disable>:
{
 80005d8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005da:	6803      	ldr	r3, [r0, #0]
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	f012 0f01 	tst.w	r2, #1
 80005e2:	d101      	bne.n	80005e8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80005e4:	2000      	movs	r0, #0
}
 80005e6:	bd38      	pop	{r3, r4, r5, pc}
 80005e8:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80005ea:	689a      	ldr	r2, [r3, #8]
 80005ec:	f022 0201 	bic.w	r2, r2, #1
 80005f0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80005f2:	f7ff fded 	bl	80001d0 <HAL_GetTick>
 80005f6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80005f8:	6823      	ldr	r3, [r4, #0]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f013 0f01 	tst.w	r3, #1
 8000600:	d00e      	beq.n	8000620 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000602:	f7ff fde5 	bl	80001d0 <HAL_GetTick>
 8000606:	1b40      	subs	r0, r0, r5
 8000608:	2802      	cmp	r0, #2
 800060a:	d9f5      	bls.n	80005f8 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800060c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000614:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 800061c:	2001      	movs	r0, #1
 800061e:	e7e2      	b.n	80005e6 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8000620:	2000      	movs	r0, #0
 8000622:	e7e0      	b.n	80005e6 <ADC_ConversionStop_Disable+0xe>

08000624 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000624:	2800      	cmp	r0, #0
 8000626:	f000 80ea 	beq.w	80007fe <HAL_ADC_Init+0x1da>
{
 800062a:	b538      	push	{r3, r4, r5, lr}
 800062c:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800062e:	6803      	ldr	r3, [r0, #0]
 8000630:	4a74      	ldr	r2, [pc, #464]	; (8000804 <HAL_ADC_Init+0x1e0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d008      	beq.n	8000648 <HAL_ADC_Init+0x24>
 8000636:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800063a:	4293      	cmp	r3, r2
 800063c:	d004      	beq.n	8000648 <HAL_ADC_Init+0x24>
 800063e:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000642:	4871      	ldr	r0, [pc, #452]	; (8000808 <HAL_ADC_Init+0x1e4>)
 8000644:	f005 fa20 	bl	8005a88 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000648:	6863      	ldr	r3, [r4, #4]
 800064a:	b113      	cbz	r3, 8000652 <HAL_ADC_Init+0x2e>
 800064c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000650:	d163      	bne.n	800071a <HAL_ADC_Init+0xf6>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000652:	68a3      	ldr	r3, [r4, #8]
 8000654:	b113      	cbz	r3, 800065c <HAL_ADC_Init+0x38>
 8000656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800065a:	d164      	bne.n	8000726 <HAL_ADC_Init+0x102>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800065c:	7b23      	ldrb	r3, [r4, #12]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d867      	bhi.n	8000732 <HAL_ADC_Init+0x10e>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000662:	69e3      	ldr	r3, [r4, #28]
 8000664:	b18b      	cbz	r3, 800068a <HAL_ADC_Init+0x66>
 8000666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800066a:	d00e      	beq.n	800068a <HAL_ADC_Init+0x66>
 800066c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000670:	d00b      	beq.n	800068a <HAL_ADC_Init+0x66>
 8000672:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000676:	d008      	beq.n	800068a <HAL_ADC_Init+0x66>
 8000678:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800067c:	d005      	beq.n	800068a <HAL_ADC_Init+0x66>
 800067e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000682:	d002      	beq.n	800068a <HAL_ADC_Init+0x66>
 8000684:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000688:	d159      	bne.n	800073e <HAL_ADC_Init+0x11a>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800068a:	68a3      	ldr	r3, [r4, #8]
 800068c:	b163      	cbz	r3, 80006a8 <HAL_ADC_Init+0x84>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800068e:	6923      	ldr	r3, [r4, #16]
 8000690:	3b01      	subs	r3, #1
 8000692:	2b0f      	cmp	r3, #15
 8000694:	d859      	bhi.n	800074a <HAL_ADC_Init+0x126>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000696:	7d23      	ldrb	r3, [r4, #20]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d85c      	bhi.n	8000756 <HAL_ADC_Init+0x132>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800069c:	7d23      	ldrb	r3, [r4, #20]
 800069e:	b11b      	cbz	r3, 80006a8 <HAL_ADC_Init+0x84>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80006a0:	69a3      	ldr	r3, [r4, #24]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	2b07      	cmp	r3, #7
 80006a6:	d85c      	bhi.n	8000762 <HAL_ADC_Init+0x13e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d05f      	beq.n	800076e <HAL_ADC_Init+0x14a>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006ae:	4620      	mov	r0, r4
 80006b0:	f7ff ff92 	bl	80005d8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006b6:	f013 0310 	ands.w	r3, r3, #16
 80006ba:	f040 809a 	bne.w	80007f2 <HAL_ADC_Init+0x1ce>
 80006be:	2800      	cmp	r0, #0
 80006c0:	f040 8097 	bne.w	80007f2 <HAL_ADC_Init+0x1ce>
    ADC_STATE_CLR_SET(hadc->State,
 80006c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006c6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80006ca:	f022 0202 	bic.w	r2, r2, #2
 80006ce:	f042 0202 	orr.w	r2, r2, #2
 80006d2:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006d4:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80006d6:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006d8:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80006da:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80006dc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006e0:	68a1      	ldr	r1, [r4, #8]
 80006e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80006e6:	d04c      	beq.n	8000782 <HAL_ADC_Init+0x15e>
 80006e8:	2901      	cmp	r1, #1
 80006ea:	d047      	beq.n	800077c <HAL_ADC_Init+0x158>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006ec:	7d21      	ldrb	r1, [r4, #20]
 80006ee:	2901      	cmp	r1, #1
 80006f0:	d04a      	beq.n	8000788 <HAL_ADC_Init+0x164>
      MODIFY_REG(hadc->Instance->CR1,
 80006f2:	6825      	ldr	r5, [r4, #0]
 80006f4:	6869      	ldr	r1, [r5, #4]
 80006f6:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80006fa:	430b      	orrs	r3, r1
 80006fc:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80006fe:	6821      	ldr	r1, [r4, #0]
 8000700:	688d      	ldr	r5, [r1, #8]
 8000702:	4b42      	ldr	r3, [pc, #264]	; (800080c <HAL_ADC_Init+0x1e8>)
 8000704:	402b      	ands	r3, r5
 8000706:	4313      	orrs	r3, r2
 8000708:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800070a:	68a3      	ldr	r3, [r4, #8]
 800070c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000710:	d04b      	beq.n	80007aa <HAL_ADC_Init+0x186>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d049      	beq.n	80007aa <HAL_ADC_Init+0x186>
  uint32_t tmp_sqr1 = 0U;
 8000716:	2100      	movs	r1, #0
 8000718:	e04a      	b.n	80007b0 <HAL_ADC_Init+0x18c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800071a:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800071e:	483a      	ldr	r0, [pc, #232]	; (8000808 <HAL_ADC_Init+0x1e4>)
 8000720:	f005 f9b2 	bl	8005a88 <assert_failed>
 8000724:	e795      	b.n	8000652 <HAL_ADC_Init+0x2e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000726:	f240 11b5 	movw	r1, #437	; 0x1b5
 800072a:	4837      	ldr	r0, [pc, #220]	; (8000808 <HAL_ADC_Init+0x1e4>)
 800072c:	f005 f9ac 	bl	8005a88 <assert_failed>
 8000730:	e794      	b.n	800065c <HAL_ADC_Init+0x38>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000732:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000736:	4834      	ldr	r0, [pc, #208]	; (8000808 <HAL_ADC_Init+0x1e4>)
 8000738:	f005 f9a6 	bl	8005a88 <assert_failed>
 800073c:	e791      	b.n	8000662 <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800073e:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000742:	4831      	ldr	r0, [pc, #196]	; (8000808 <HAL_ADC_Init+0x1e4>)
 8000744:	f005 f9a0 	bl	8005a88 <assert_failed>
 8000748:	e79f      	b.n	800068a <HAL_ADC_Init+0x66>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800074a:	f240 11bb 	movw	r1, #443	; 0x1bb
 800074e:	482e      	ldr	r0, [pc, #184]	; (8000808 <HAL_ADC_Init+0x1e4>)
 8000750:	f005 f99a 	bl	8005a88 <assert_failed>
 8000754:	e79f      	b.n	8000696 <HAL_ADC_Init+0x72>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000756:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800075a:	482b      	ldr	r0, [pc, #172]	; (8000808 <HAL_ADC_Init+0x1e4>)
 800075c:	f005 f994 	bl	8005a88 <assert_failed>
 8000760:	e79c      	b.n	800069c <HAL_ADC_Init+0x78>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000762:	f240 11bf 	movw	r1, #447	; 0x1bf
 8000766:	4828      	ldr	r0, [pc, #160]	; (8000808 <HAL_ADC_Init+0x1e4>)
 8000768:	f005 f98e 	bl	8005a88 <assert_failed>
 800076c:	e79c      	b.n	80006a8 <HAL_ADC_Init+0x84>
    ADC_CLEAR_ERRORCODE(hadc);
 800076e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000770:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000774:	4620      	mov	r0, r4
 8000776:	f004 fba1 	bl	8004ebc <HAL_ADC_MspInit>
 800077a:	e798      	b.n	80006ae <HAL_ADC_Init+0x8a>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800077c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000780:	e7b4      	b.n	80006ec <HAL_ADC_Init+0xc8>
 8000782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000786:	e7b1      	b.n	80006ec <HAL_ADC_Init+0xc8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000788:	b935      	cbnz	r5, 8000798 <HAL_ADC_Init+0x174>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800078a:	69a1      	ldr	r1, [r4, #24]
 800078c:	3901      	subs	r1, #1
 800078e:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8000792:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000796:	e7ac      	b.n	80006f2 <HAL_ADC_Init+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000798:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800079a:	f041 0120 	orr.w	r1, r1, #32
 800079e:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007a2:	f041 0101 	orr.w	r1, r1, #1
 80007a6:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007a8:	e7a3      	b.n	80006f2 <HAL_ADC_Init+0xce>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007aa:	6923      	ldr	r3, [r4, #16]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80007b0:	6825      	ldr	r5, [r4, #0]
 80007b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80007b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80007b8:	430b      	orrs	r3, r1
 80007ba:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	6899      	ldr	r1, [r3, #8]
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <HAL_ADC_Init+0x1ec>)
 80007c2:	400b      	ands	r3, r1
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d00b      	beq.n	80007e0 <HAL_ADC_Init+0x1bc>
      ADC_STATE_CLR_SET(hadc->State,
 80007c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007ca:	f023 0312 	bic.w	r3, r3, #18
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80007dc:	2001      	movs	r0, #1
 80007de:	e00d      	b.n	80007fc <HAL_ADC_Init+0x1d8>
      ADC_CLEAR_ERRORCODE(hadc);
 80007e0:	2300      	movs	r3, #0
 80007e2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80007e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007e6:	f023 0303 	bic.w	r3, r3, #3
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80007f0:	e004      	b.n	80007fc <HAL_ADC_Init+0x1d8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80007fa:	2001      	movs	r0, #1
}
 80007fc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80007fe:	2001      	movs	r0, #1
}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40012400 	.word	0x40012400
 8000808:	08006554 	.word	0x08006554
 800080c:	ffe1f7fd 	.word	0xffe1f7fd
 8000810:	ff1f0efe 	.word	0xff1f0efe

08000814 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	4604      	mov	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800081a:	2300      	movs	r3, #0
 800081c:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800081e:	6803      	ldr	r3, [r0, #0]
 8000820:	4a3c      	ldr	r2, [pc, #240]	; (8000914 <HAL_ADCEx_Calibration_Start+0x100>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d007      	beq.n	8000836 <HAL_ADCEx_Calibration_Start+0x22>
 8000826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800082a:	4293      	cmp	r3, r2
 800082c:	d003      	beq.n	8000836 <HAL_ADCEx_Calibration_Start+0x22>
 800082e:	2185      	movs	r1, #133	; 0x85
 8000830:	4839      	ldr	r0, [pc, #228]	; (8000918 <HAL_ADCEx_Calibration_Start+0x104>)
 8000832:	f005 f929 	bl	8005a88 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8000836:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800083a:	2b01      	cmp	r3, #1
 800083c:	d068      	beq.n	8000910 <HAL_ADCEx_Calibration_Start+0xfc>
 800083e:	2301      	movs	r3, #1
 8000840:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fec7 	bl	80005d8 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800084a:	4605      	mov	r5, r0
 800084c:	b128      	cbz	r0, 800085a <HAL_ADCEx_Calibration_Start+0x46>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800084e:	2300      	movs	r3, #0
 8000850:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000854:	4628      	mov	r0, r5
 8000856:	b002      	add	sp, #8
 8000858:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800085a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800085c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000860:	f023 0302 	bic.w	r3, r3, #2
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <HAL_ADCEx_Calibration_Start+0x108>)
 800086c:	681e      	ldr	r6, [r3, #0]
 800086e:	2002      	movs	r0, #2
 8000870:	f001 fdac 	bl	80023cc <HAL_RCCEx_GetPeriphCLKFreq>
 8000874:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000878:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 800087a:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800087c:	e002      	b.n	8000884 <HAL_ADCEx_Calibration_Start+0x70>
      wait_loop_index--;
 800087e:	9b01      	ldr	r3, [sp, #4]
 8000880:	3b01      	subs	r3, #1
 8000882:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000884:	9b01      	ldr	r3, [sp, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1f9      	bne.n	800087e <HAL_ADCEx_Calibration_Start+0x6a>
    ADC_Enable(hadc);
 800088a:	4620      	mov	r0, r4
 800088c:	f7ff fdc0 	bl	8000410 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000890:	6822      	ldr	r2, [r4, #0]
 8000892:	6893      	ldr	r3, [r2, #8]
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800089a:	f7ff fc99 	bl	80001d0 <HAL_GetTick>
 800089e:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	689a      	ldr	r2, [r3, #8]
 80008a4:	f012 0f08 	tst.w	r2, #8
 80008a8:	d00f      	beq.n	80008ca <HAL_ADCEx_Calibration_Start+0xb6>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80008aa:	f7ff fc91 	bl	80001d0 <HAL_GetTick>
 80008ae:	1b80      	subs	r0, r0, r6
 80008b0:	280a      	cmp	r0, #10
 80008b2:	d9f5      	bls.n	80008a0 <HAL_ADCEx_Calibration_Start+0x8c>
        ADC_STATE_CLR_SET(hadc->State,
 80008b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008b6:	f023 0312 	bic.w	r3, r3, #18
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80008c0:	2300      	movs	r3, #0
 80008c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80008c6:	2501      	movs	r5, #1
 80008c8:	e7c4      	b.n	8000854 <HAL_ADCEx_Calibration_Start+0x40>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80008ca:	689a      	ldr	r2, [r3, #8]
 80008cc:	f042 0204 	orr.w	r2, r2, #4
 80008d0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80008d2:	f7ff fc7d 	bl	80001d0 <HAL_GetTick>
 80008d6:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	f013 0f04 	tst.w	r3, #4
 80008e0:	d00f      	beq.n	8000902 <HAL_ADCEx_Calibration_Start+0xee>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80008e2:	f7ff fc75 	bl	80001d0 <HAL_GetTick>
 80008e6:	1b80      	subs	r0, r0, r6
 80008e8:	280a      	cmp	r0, #10
 80008ea:	d9f5      	bls.n	80008d8 <HAL_ADCEx_Calibration_Start+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 80008ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008ee:	f023 0312 	bic.w	r3, r3, #18
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80008f8:	2300      	movs	r3, #0
 80008fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80008fe:	2501      	movs	r5, #1
 8000900:	e7a8      	b.n	8000854 <HAL_ADCEx_Calibration_Start+0x40>
    ADC_STATE_CLR_SET(hadc->State,
 8000902:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000904:	f023 0303 	bic.w	r3, r3, #3
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	62a3      	str	r3, [r4, #40]	; 0x28
 800090e:	e79e      	b.n	800084e <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 8000910:	2502      	movs	r5, #2
 8000912:	e79f      	b.n	8000854 <HAL_ADCEx_Calibration_Start+0x40>
 8000914:	40012400 	.word	0x40012400
 8000918:	0800658c 	.word	0x0800658c
 800091c:	200001e0 	.word	0x200001e0

08000920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b510      	push	{r4, lr}
 8000922:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000924:	1ec3      	subs	r3, r0, #3
 8000926:	2b04      	cmp	r3, #4
 8000928:	d80f      	bhi.n	800094a <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800092c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000932:	041b      	lsls	r3, r3, #16
 8000934:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000936:	0224      	lsls	r4, r4, #8
 8000938:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 800093e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000946:	60d3      	str	r3, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000948:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800094a:	2192      	movs	r1, #146	; 0x92
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <HAL_NVIC_SetPriorityGrouping+0x38>)
 800094e:	f005 f89b 	bl	8005a88 <assert_failed>
 8000952:	e7ea      	b.n	800092a <HAL_NVIC_SetPriorityGrouping+0xa>
 8000954:	e000ed00 	.word	0xe000ed00
 8000958:	080065c8 	.word	0x080065c8

0800095c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4605      	mov	r5, r0
 8000960:	460c      	mov	r4, r1
 8000962:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000964:	2a0f      	cmp	r2, #15
 8000966:	d825      	bhi.n	80009b4 <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000968:	2c0f      	cmp	r4, #15
 800096a:	d828      	bhi.n	80009be <HAL_NVIC_SetPriority+0x62>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <HAL_NVIC_SetPriority+0x80>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	f1c3 0207 	rsb	r2, r3, #7
 8000978:	2a04      	cmp	r2, #4
 800097a:	bf28      	it	cs
 800097c:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	1d19      	adds	r1, r3, #4
 8000980:	2906      	cmp	r1, #6
 8000982:	d921      	bls.n	80009c8 <HAL_NVIC_SetPriority+0x6c>
 8000984:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000986:	f04f 31ff 	mov.w	r1, #4294967295
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	ea24 0402 	bic.w	r4, r4, r2
 8000992:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 800099e:	2d00      	cmp	r5, #0
 80009a0:	db14      	blt.n	80009cc <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	0124      	lsls	r4, r4, #4
 80009a4:	b2e4      	uxtb	r4, r4
 80009a6:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 80009aa:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 80009ae:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80009b4:	21aa      	movs	r1, #170	; 0xaa
 80009b6:	480a      	ldr	r0, [pc, #40]	; (80009e0 <HAL_NVIC_SetPriority+0x84>)
 80009b8:	f005 f866 	bl	8005a88 <assert_failed>
 80009bc:	e7d4      	b.n	8000968 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80009be:	21ab      	movs	r1, #171	; 0xab
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <HAL_NVIC_SetPriority+0x84>)
 80009c2:	f005 f861 	bl	8005a88 <assert_failed>
 80009c6:	e7d1      	b.n	800096c <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c8:	2300      	movs	r3, #0
 80009ca:	e7dc      	b.n	8000986 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	f005 050f 	and.w	r5, r5, #15
 80009d0:	0124      	lsls	r4, r4, #4
 80009d2:	b2e4      	uxtb	r4, r4
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_NVIC_SetPriority+0x88>)
 80009d6:	555c      	strb	r4, [r3, r5]
}
 80009d8:	e7eb      	b.n	80009b2 <HAL_NVIC_SetPriority+0x56>
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00
 80009e0:	080065c8 	.word	0x080065c8
 80009e4:	e000ed14 	.word	0xe000ed14

080009e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80009ea:	1e04      	subs	r4, r0, #0
 80009ec:	db0a      	blt.n	8000a04 <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	db07      	blt.n	8000a02 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	f004 021f 	and.w	r2, r4, #31
 80009f6:	0964      	lsrs	r4, r4, #5
 80009f8:	2301      	movs	r3, #1
 80009fa:	4093      	lsls	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_NVIC_EnableIRQ+0x28>)
 80009fe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a02:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000a04:	21be      	movs	r1, #190	; 0xbe
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <HAL_NVIC_EnableIRQ+0x2c>)
 8000a08:	f005 f83e 	bl	8005a88 <assert_failed>
 8000a0c:	e7ef      	b.n	80009ee <HAL_NVIC_EnableIRQ+0x6>
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	080065c8 	.word	0x080065c8

08000a18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	3801      	subs	r0, #1
 8000a1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1e:	d20a      	bcs.n	8000a36 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_SYSTICK_Config+0x24>)
 8000a22:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_SYSTICK_Config+0x28>)
 8000a26:	21f0      	movs	r1, #240	; 0xf0
 8000a28:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a44:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a46:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000a48:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000a4a:	2401      	movs	r4, #1
 8000a4c:	40b4      	lsls	r4, r6
 8000a4e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000a50:	6804      	ldr	r4, [r0, #0]
 8000a52:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a54:	6843      	ldr	r3, [r0, #4]
 8000a56:	2b10      	cmp	r3, #16
 8000a58:	d005      	beq.n	8000a66 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000a5a:	6803      	ldr	r3, [r0, #0]
 8000a5c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000a5e:	6803      	ldr	r3, [r0, #0]
 8000a60:	60da      	str	r2, [r3, #12]
  }
}
 8000a62:	bc70      	pop	{r4, r5, r6}
 8000a64:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000a66:	6803      	ldr	r3, [r0, #0]
 8000a68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000a6a:	6803      	ldr	r3, [r0, #0]
 8000a6c:	60d9      	str	r1, [r3, #12]
 8000a6e:	e7f8      	b.n	8000a62 <DMA_SetConfig+0x1e>

08000a70 <HAL_DMA_Init>:
  if(hdma == NULL)
 8000a70:	2800      	cmp	r0, #0
 8000a72:	f000 8099 	beq.w	8000ba8 <HAL_DMA_Init+0x138>
{
 8000a76:	b510      	push	{r4, lr}
 8000a78:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8000a7a:	6803      	ldr	r3, [r0, #0]
 8000a7c:	4a4b      	ldr	r2, [pc, #300]	; (8000bac <HAL_DMA_Init+0x13c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d015      	beq.n	8000aae <HAL_DMA_Init+0x3e>
 8000a82:	3214      	adds	r2, #20
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d012      	beq.n	8000aae <HAL_DMA_Init+0x3e>
 8000a88:	3214      	adds	r2, #20
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d00f      	beq.n	8000aae <HAL_DMA_Init+0x3e>
 8000a8e:	3214      	adds	r2, #20
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d00c      	beq.n	8000aae <HAL_DMA_Init+0x3e>
 8000a94:	3214      	adds	r2, #20
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d009      	beq.n	8000aae <HAL_DMA_Init+0x3e>
 8000a9a:	3214      	adds	r2, #20
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d006      	beq.n	8000aae <HAL_DMA_Init+0x3e>
 8000aa0:	3214      	adds	r2, #20
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d003      	beq.n	8000aae <HAL_DMA_Init+0x3e>
 8000aa6:	219a      	movs	r1, #154	; 0x9a
 8000aa8:	4841      	ldr	r0, [pc, #260]	; (8000bb0 <HAL_DMA_Init+0x140>)
 8000aaa:	f004 ffed 	bl	8005a88 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000aae:	6863      	ldr	r3, [r4, #4]
 8000ab0:	b123      	cbz	r3, 8000abc <HAL_DMA_Init+0x4c>
 8000ab2:	2b10      	cmp	r3, #16
 8000ab4:	d002      	beq.n	8000abc <HAL_DMA_Init+0x4c>
 8000ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000aba:	d152      	bne.n	8000b62 <HAL_DMA_Init+0xf2>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000abc:	68a3      	ldr	r3, [r4, #8]
 8000abe:	2b40      	cmp	r3, #64	; 0x40
 8000ac0:	d001      	beq.n	8000ac6 <HAL_DMA_Init+0x56>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d152      	bne.n	8000b6c <HAL_DMA_Init+0xfc>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000ac6:	68e3      	ldr	r3, [r4, #12]
 8000ac8:	2b80      	cmp	r3, #128	; 0x80
 8000aca:	d001      	beq.n	8000ad0 <HAL_DMA_Init+0x60>
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d152      	bne.n	8000b76 <HAL_DMA_Init+0x106>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000ad0:	6923      	ldr	r3, [r4, #16]
 8000ad2:	b12b      	cbz	r3, 8000ae0 <HAL_DMA_Init+0x70>
 8000ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad8:	d002      	beq.n	8000ae0 <HAL_DMA_Init+0x70>
 8000ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ade:	d14f      	bne.n	8000b80 <HAL_DMA_Init+0x110>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000ae0:	6963      	ldr	r3, [r4, #20]
 8000ae2:	b12b      	cbz	r3, 8000af0 <HAL_DMA_Init+0x80>
 8000ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ae8:	d002      	beq.n	8000af0 <HAL_DMA_Init+0x80>
 8000aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000aee:	d14c      	bne.n	8000b8a <HAL_DMA_Init+0x11a>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8000af0:	69a3      	ldr	r3, [r4, #24]
 8000af2:	b10b      	cbz	r3, 8000af8 <HAL_DMA_Init+0x88>
 8000af4:	2b20      	cmp	r3, #32
 8000af6:	d14d      	bne.n	8000b94 <HAL_DMA_Init+0x124>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8000af8:	69e3      	ldr	r3, [r4, #28]
 8000afa:	b143      	cbz	r3, 8000b0e <HAL_DMA_Init+0x9e>
 8000afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b00:	d005      	beq.n	8000b0e <HAL_DMA_Init+0x9e>
 8000b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b06:	d002      	beq.n	8000b0e <HAL_DMA_Init+0x9e>
 8000b08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000b0c:	d147      	bne.n	8000b9e <HAL_DMA_Init+0x12e>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b0e:	6822      	ldr	r2, [r4, #0]
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <HAL_DMA_Init+0x144>)
 8000b12:	4413      	add	r3, r2
 8000b14:	4928      	ldr	r1, [pc, #160]	; (8000bb8 <HAL_DMA_Init+0x148>)
 8000b16:	fba1 1303 	umull	r1, r3, r1, r3
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <HAL_DMA_Init+0x14c>)
 8000b22:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b24:	2302      	movs	r3, #2
 8000b26:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8000b2a:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b2c:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8000b30:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000b34:	6863      	ldr	r3, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b36:	68a0      	ldr	r0, [r4, #8]
  tmp |=  hdma->Init.Direction        |
 8000b38:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b3a:	68e0      	ldr	r0, [r4, #12]
 8000b3c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b3e:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b40:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b42:	6960      	ldr	r0, [r4, #20]
 8000b44:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b46:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b48:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b4a:	69e0      	ldr	r0, [r4, #28]
 8000b4c:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000b4e:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8000b50:	6013      	str	r3, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b52:	2000      	movs	r0, #0
 8000b54:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000b56:	2301      	movs	r3, #1
 8000b58:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000b5c:	f884 0020 	strb.w	r0, [r4, #32]
}
 8000b60:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000b62:	219b      	movs	r1, #155	; 0x9b
 8000b64:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <HAL_DMA_Init+0x140>)
 8000b66:	f004 ff8f 	bl	8005a88 <assert_failed>
 8000b6a:	e7a7      	b.n	8000abc <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000b6c:	219c      	movs	r1, #156	; 0x9c
 8000b6e:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <HAL_DMA_Init+0x140>)
 8000b70:	f004 ff8a 	bl	8005a88 <assert_failed>
 8000b74:	e7a7      	b.n	8000ac6 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000b76:	219d      	movs	r1, #157	; 0x9d
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <HAL_DMA_Init+0x140>)
 8000b7a:	f004 ff85 	bl	8005a88 <assert_failed>
 8000b7e:	e7a7      	b.n	8000ad0 <HAL_DMA_Init+0x60>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000b80:	219e      	movs	r1, #158	; 0x9e
 8000b82:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <HAL_DMA_Init+0x140>)
 8000b84:	f004 ff80 	bl	8005a88 <assert_failed>
 8000b88:	e7aa      	b.n	8000ae0 <HAL_DMA_Init+0x70>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000b8a:	219f      	movs	r1, #159	; 0x9f
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <HAL_DMA_Init+0x140>)
 8000b8e:	f004 ff7b 	bl	8005a88 <assert_failed>
 8000b92:	e7ad      	b.n	8000af0 <HAL_DMA_Init+0x80>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8000b94:	21a0      	movs	r1, #160	; 0xa0
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <HAL_DMA_Init+0x140>)
 8000b98:	f004 ff76 	bl	8005a88 <assert_failed>
 8000b9c:	e7ac      	b.n	8000af8 <HAL_DMA_Init+0x88>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8000b9e:	21a1      	movs	r1, #161	; 0xa1
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <HAL_DMA_Init+0x140>)
 8000ba2:	f004 ff71 	bl	8005a88 <assert_failed>
 8000ba6:	e7b2      	b.n	8000b0e <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 8000ba8:	2001      	movs	r0, #1
}
 8000baa:	4770      	bx	lr
 8000bac:	40020008 	.word	0x40020008
 8000bb0:	08006604 	.word	0x08006604
 8000bb4:	bffdfff8 	.word	0xbffdfff8
 8000bb8:	cccccccd 	.word	0xcccccccd
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <HAL_DMA_Start_IT>:
{
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	460e      	mov	r6, r1
 8000bc6:	4617      	mov	r7, r2
 8000bc8:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8000bca:	1e5a      	subs	r2, r3, #1
 8000bcc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d80f      	bhi.n	8000bf4 <HAL_DMA_Start_IT+0x34>
  __HAL_LOCK(hdma);
 8000bd4:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d03a      	beq.n	8000c52 <HAL_DMA_Start_IT+0x92>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f884 3020 	strb.w	r3, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000be2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d00a      	beq.n	8000c00 <HAL_DMA_Start_IT+0x40>
    __HAL_UNLOCK(hdma); 
 8000bea:	2300      	movs	r3, #0
 8000bec:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8000bf0:	2002      	movs	r0, #2
}
 8000bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8000bf4:	f240 116f 	movw	r1, #367	; 0x16f
 8000bf8:	4817      	ldr	r0, [pc, #92]	; (8000c58 <HAL_DMA_Start_IT+0x98>)
 8000bfa:	f004 ff45 	bl	8005a88 <assert_failed>
 8000bfe:	e7e9      	b.n	8000bd4 <HAL_DMA_Start_IT+0x14>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c00:	2302      	movs	r3, #2
 8000c02:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000c0a:	6822      	ldr	r2, [r4, #0]
 8000c0c:	6813      	ldr	r3, [r2, #0]
 8000c0e:	f023 0301 	bic.w	r3, r3, #1
 8000c12:	6013      	str	r3, [r2, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c14:	462b      	mov	r3, r5
 8000c16:	463a      	mov	r2, r7
 8000c18:	4631      	mov	r1, r6
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f7ff ff12 	bl	8000a44 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8000c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c22:	b15b      	cbz	r3, 8000c3c <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c24:	6822      	ldr	r2, [r4, #0]
 8000c26:	6813      	ldr	r3, [r2, #0]
 8000c28:	f043 030e 	orr.w	r3, r3, #14
 8000c2c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e7da      	b.n	8000bf2 <HAL_DMA_Start_IT+0x32>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c3c:	6822      	ldr	r2, [r4, #0]
 8000c3e:	6813      	ldr	r3, [r2, #0]
 8000c40:	f023 0304 	bic.w	r3, r3, #4
 8000c44:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c46:	6822      	ldr	r2, [r4, #0]
 8000c48:	6813      	ldr	r3, [r2, #0]
 8000c4a:	f043 030a 	orr.w	r3, r3, #10
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	e7ed      	b.n	8000c2e <HAL_DMA_Start_IT+0x6e>
  __HAL_LOCK(hdma);
 8000c52:	2002      	movs	r0, #2
 8000c54:	e7cd      	b.n	8000bf2 <HAL_DMA_Start_IT+0x32>
 8000c56:	bf00      	nop
 8000c58:	08006604 	.word	0x08006604

08000c5c <HAL_DMA_IRQHandler>:
{
 8000c5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c5e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000c60:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000c62:	6804      	ldr	r4, [r0, #0]
 8000c64:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c66:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000c68:	2304      	movs	r3, #4
 8000c6a:	408b      	lsls	r3, r1
 8000c6c:	4213      	tst	r3, r2
 8000c6e:	d035      	beq.n	8000cdc <HAL_DMA_IRQHandler+0x80>
 8000c70:	f015 0f04 	tst.w	r5, #4
 8000c74:	d032      	beq.n	8000cdc <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	f013 0f20 	tst.w	r3, #32
 8000c7c:	d103      	bne.n	8000c86 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	f023 0304 	bic.w	r3, r3, #4
 8000c84:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c86:	6803      	ldr	r3, [r0, #0]
 8000c88:	4a43      	ldr	r2, [pc, #268]	; (8000d98 <HAL_DMA_IRQHandler+0x13c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d014      	beq.n	8000cb8 <HAL_DMA_IRQHandler+0x5c>
 8000c8e:	3214      	adds	r2, #20
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d018      	beq.n	8000cc6 <HAL_DMA_IRQHandler+0x6a>
 8000c94:	3214      	adds	r2, #20
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d017      	beq.n	8000cca <HAL_DMA_IRQHandler+0x6e>
 8000c9a:	3214      	adds	r2, #20
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d017      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0x74>
 8000ca0:	3214      	adds	r2, #20
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d017      	beq.n	8000cd6 <HAL_DMA_IRQHandler+0x7a>
 8000ca6:	3214      	adds	r2, #20
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d002      	beq.n	8000cb2 <HAL_DMA_IRQHandler+0x56>
 8000cac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cb0:	e003      	b.n	8000cba <HAL_DMA_IRQHandler+0x5e>
 8000cb2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cb6:	e000      	b.n	8000cba <HAL_DMA_IRQHandler+0x5e>
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_DMA_IRQHandler+0x140>)
 8000cbc:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000cbe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000cc0:	b103      	cbz	r3, 8000cc4 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8000cc2:	4798      	blx	r3
}
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cc6:	2240      	movs	r2, #64	; 0x40
 8000cc8:	e7f7      	b.n	8000cba <HAL_DMA_IRQHandler+0x5e>
 8000cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cce:	e7f4      	b.n	8000cba <HAL_DMA_IRQHandler+0x5e>
 8000cd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd4:	e7f1      	b.n	8000cba <HAL_DMA_IRQHandler+0x5e>
 8000cd6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cda:	e7ee      	b.n	8000cba <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000cdc:	2302      	movs	r3, #2
 8000cde:	408b      	lsls	r3, r1
 8000ce0:	4213      	tst	r3, r2
 8000ce2:	d03c      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x102>
 8000ce4:	f015 0f02 	tst.w	r5, #2
 8000ce8:	d039      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	f013 0f20 	tst.w	r3, #32
 8000cf0:	d106      	bne.n	8000d00 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	f023 030a 	bic.w	r3, r3, #10
 8000cf8:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d00:	6803      	ldr	r3, [r0, #0]
 8000d02:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <HAL_DMA_IRQHandler+0x13c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d014      	beq.n	8000d32 <HAL_DMA_IRQHandler+0xd6>
 8000d08:	3214      	adds	r2, #20
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d01c      	beq.n	8000d48 <HAL_DMA_IRQHandler+0xec>
 8000d0e:	3214      	adds	r2, #20
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d01b      	beq.n	8000d4c <HAL_DMA_IRQHandler+0xf0>
 8000d14:	3214      	adds	r2, #20
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d01b      	beq.n	8000d52 <HAL_DMA_IRQHandler+0xf6>
 8000d1a:	3214      	adds	r2, #20
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d01b      	beq.n	8000d58 <HAL_DMA_IRQHandler+0xfc>
 8000d20:	3214      	adds	r2, #20
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d002      	beq.n	8000d2c <HAL_DMA_IRQHandler+0xd0>
 8000d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d2a:	e003      	b.n	8000d34 <HAL_DMA_IRQHandler+0xd8>
 8000d2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d30:	e000      	b.n	8000d34 <HAL_DMA_IRQHandler+0xd8>
 8000d32:	2202      	movs	r2, #2
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_DMA_IRQHandler+0x140>)
 8000d36:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000d3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0bf      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8000d44:	4798      	blx	r3
 8000d46:	e7bd      	b.n	8000cc4 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d48:	2220      	movs	r2, #32
 8000d4a:	e7f3      	b.n	8000d34 <HAL_DMA_IRQHandler+0xd8>
 8000d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d50:	e7f0      	b.n	8000d34 <HAL_DMA_IRQHandler+0xd8>
 8000d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d56:	e7ed      	b.n	8000d34 <HAL_DMA_IRQHandler+0xd8>
 8000d58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d5c:	e7ea      	b.n	8000d34 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d5e:	2308      	movs	r3, #8
 8000d60:	fa03 f101 	lsl.w	r1, r3, r1
 8000d64:	4211      	tst	r1, r2
 8000d66:	d0ad      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x68>
 8000d68:	f015 0f08 	tst.w	r5, #8
 8000d6c:	d0aa      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	f023 030e 	bic.w	r3, r3, #14
 8000d74:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d76:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000d78:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	fa03 f202 	lsl.w	r2, r3, r2
 8000d80:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d82:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000d84:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000d8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d097      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8000d94:	4798      	blx	r3
  return;
 8000d96:	e795      	b.n	8000cc4 <HAL_DMA_IRQHandler+0x68>
 8000d98:	40020008 	.word	0x40020008
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000da4:	b083      	sub	sp, #12
 8000da6:	4680      	mov	r8, r0
 8000da8:	460f      	mov	r7, r1
  uint32_t config = 0x00u;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000daa:	4bb6      	ldr	r3, [pc, #728]	; (8001084 <HAL_GPIO_Init+0x2e4>)
 8000dac:	4298      	cmp	r0, r3
 8000dae:	d013      	beq.n	8000dd8 <HAL_GPIO_Init+0x38>
 8000db0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000db4:	4298      	cmp	r0, r3
 8000db6:	d00f      	beq.n	8000dd8 <HAL_GPIO_Init+0x38>
 8000db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	d00b      	beq.n	8000dd8 <HAL_GPIO_Init+0x38>
 8000dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dc4:	4298      	cmp	r0, r3
 8000dc6:	d007      	beq.n	8000dd8 <HAL_GPIO_Init+0x38>
 8000dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x38>
 8000dd0:	21bd      	movs	r1, #189	; 0xbd
 8000dd2:	48ad      	ldr	r0, [pc, #692]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000dd4:	f004 fe58 	bl	8005a88 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	b112      	cbz	r2, 8000de4 <HAL_GPIO_Init+0x44>
 8000dde:	0c1b      	lsrs	r3, r3, #16
 8000de0:	041b      	lsls	r3, r3, #16
 8000de2:	b11b      	cbz	r3, 8000dec <HAL_GPIO_Init+0x4c>
 8000de4:	21be      	movs	r1, #190	; 0xbe
 8000de6:	48a8      	ldr	r0, [pc, #672]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000de8:	f004 fe4e 	bl	8005a88 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d91e      	bls.n	8000e30 <HAL_GPIO_Init+0x90>
 8000df2:	2b11      	cmp	r3, #17
 8000df4:	d01c      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d01a      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
 8000dfa:	2b12      	cmp	r3, #18
 8000dfc:	d018      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
 8000dfe:	4aa3      	ldr	r2, [pc, #652]	; (800108c <HAL_GPIO_Init+0x2ec>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d015      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
 8000e04:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d011      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
 8000e0c:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d00d      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
 8000e14:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d009      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
 8000e1c:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d005      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
 8000e24:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d001      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d103      	bne.n	8000e38 <HAL_GPIO_Init+0x98>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e30:	f04f 0900 	mov.w	r9, #0
 8000e34:	464d      	mov	r5, r9
 8000e36:	e0d7      	b.n	8000fe8 <HAL_GPIO_Init+0x248>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000e38:	21bf      	movs	r1, #191	; 0xbf
 8000e3a:	4893      	ldr	r0, [pc, #588]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000e3c:	f004 fe24 	bl	8005a88 <assert_failed>
 8000e40:	e7f6      	b.n	8000e30 <HAL_GPIO_Init+0x90>
      switch (GPIO_Init->Mode)
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d05e      	beq.n	8000f04 <HAL_GPIO_Init+0x164>
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d105      	bne.n	8000e56 <HAL_GPIO_Init+0xb6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d865      	bhi.n	8000f1e <HAL_GPIO_Init+0x17e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e52:	f8d7 900c 	ldr.w	r9, [r7, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e56:	2cff      	cmp	r4, #255	; 0xff
 8000e58:	f200 8095 	bhi.w	8000f86 <HAL_GPIO_Init+0x1e6>
 8000e5c:	4640      	mov	r0, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e5e:	2cff      	cmp	r4, #255	; 0xff
 8000e60:	f200 8094 	bhi.w	8000f8c <HAL_GPIO_Init+0x1ec>
 8000e64:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e66:	6803      	ldr	r3, [r0, #0]
 8000e68:	210f      	movs	r1, #15
 8000e6a:	4091      	lsls	r1, r2
 8000e6c:	ea23 0301 	bic.w	r3, r3, r1
 8000e70:	fa09 f202 	lsl.w	r2, r9, r2
 8000e74:	4313      	orrs	r3, r2
 8000e76:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e7e:	f000 80b2 	beq.w	8000fe6 <HAL_GPIO_Init+0x246>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e82:	4b83      	ldr	r3, [pc, #524]	; (8001090 <HAL_GPIO_Init+0x2f0>)
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	f042 0201 	orr.w	r2, r2, #1
 8000e8a:	619a      	str	r2, [r3, #24]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000e96:	08aa      	lsrs	r2, r5, #2
 8000e98:	1c91      	adds	r1, r2, #2
 8000e9a:	4b7e      	ldr	r3, [pc, #504]	; (8001094 <HAL_GPIO_Init+0x2f4>)
 8000e9c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ea0:	f005 0303 	and.w	r3, r5, #3
 8000ea4:	0099      	lsls	r1, r3, #2
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	ea20 0003 	bic.w	r0, r0, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eae:	4b75      	ldr	r3, [pc, #468]	; (8001084 <HAL_GPIO_Init+0x2e4>)
 8000eb0:	4598      	cmp	r8, r3
 8000eb2:	d071      	beq.n	8000f98 <HAL_GPIO_Init+0x1f8>
 8000eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000eb8:	4598      	cmp	r8, r3
 8000eba:	f000 80cd 	beq.w	8001058 <HAL_GPIO_Init+0x2b8>
 8000ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ec2:	4598      	cmp	r8, r3
 8000ec4:	f000 80ca 	beq.w	800105c <HAL_GPIO_Init+0x2bc>
 8000ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ecc:	4598      	cmp	r8, r3
 8000ece:	d061      	beq.n	8000f94 <HAL_GPIO_Init+0x1f4>
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	e062      	b.n	8000f9a <HAL_GPIO_Init+0x1fa>
      switch (GPIO_Init->Mode)
 8000ed4:	4a70      	ldr	r2, [pc, #448]	; (8001098 <HAL_GPIO_Init+0x2f8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d014      	beq.n	8000f04 <HAL_GPIO_Init+0x164>
 8000eda:	d90b      	bls.n	8000ef4 <HAL_GPIO_Init+0x154>
 8000edc:	4a6f      	ldr	r2, [pc, #444]	; (800109c <HAL_GPIO_Init+0x2fc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d010      	beq.n	8000f04 <HAL_GPIO_Init+0x164>
 8000ee2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00c      	beq.n	8000f04 <HAL_GPIO_Init+0x164>
 8000eea:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d1b1      	bne.n	8000e56 <HAL_GPIO_Init+0xb6>
 8000ef2:	e007      	b.n	8000f04 <HAL_GPIO_Init+0x164>
 8000ef4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x164>
 8000efc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d1a8      	bne.n	8000e56 <HAL_GPIO_Init+0xb6>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d82d      	bhi.n	8000f66 <HAL_GPIO_Init+0x1c6>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d037      	beq.n	8000f80 <HAL_GPIO_Init+0x1e0>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d02d      	beq.n	8000f70 <HAL_GPIO_Init+0x1d0>
            GPIOx->BRR = ioposition;
 8000f14:	f8c8 6014 	str.w	r6, [r8, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f18:	f04f 0908 	mov.w	r9, #8
 8000f1c:	e79b      	b.n	8000e56 <HAL_GPIO_Init+0xb6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f1e:	21d5      	movs	r1, #213	; 0xd5
 8000f20:	4859      	ldr	r0, [pc, #356]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f22:	f004 fdb1 	bl	8005a88 <assert_failed>
 8000f26:	e794      	b.n	8000e52 <HAL_GPIO_Init+0xb2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f28:	21dc      	movs	r1, #220	; 0xdc
 8000f2a:	4857      	ldr	r0, [pc, #348]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f2c:	f004 fdac 	bl	8005a88 <assert_failed>
 8000f30:	e08e      	b.n	8001050 <HAL_GPIO_Init+0x2b0>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d803      	bhi.n	8000f42 <HAL_GPIO_Init+0x1a2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f103 0908 	add.w	r9, r3, #8
          break;
 8000f40:	e789      	b.n	8000e56 <HAL_GPIO_Init+0xb6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f42:	21e3      	movs	r1, #227	; 0xe3
 8000f44:	4850      	ldr	r0, [pc, #320]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f46:	f004 fd9f 	bl	8005a88 <assert_failed>
 8000f4a:	e7f6      	b.n	8000f3a <HAL_GPIO_Init+0x19a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d803      	bhi.n	8000f5c <HAL_GPIO_Init+0x1bc>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f103 090c 	add.w	r9, r3, #12
          break;
 8000f5a:	e77c      	b.n	8000e56 <HAL_GPIO_Init+0xb6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f5c:	21ea      	movs	r1, #234	; 0xea
 8000f5e:	484a      	ldr	r0, [pc, #296]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f60:	f004 fd92 	bl	8005a88 <assert_failed>
 8000f64:	e7f6      	b.n	8000f54 <HAL_GPIO_Init+0x1b4>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f66:	21f7      	movs	r1, #247	; 0xf7
 8000f68:	4847      	ldr	r0, [pc, #284]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f6a:	f004 fd8d 	bl	8005a88 <assert_failed>
 8000f6e:	e7cc      	b.n	8000f0a <HAL_GPIO_Init+0x16a>
            GPIOx->BSRR = ioposition;
 8000f70:	f8c8 6010 	str.w	r6, [r8, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f74:	f04f 0908 	mov.w	r9, #8
 8000f78:	e76d      	b.n	8000e56 <HAL_GPIO_Init+0xb6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f7a:	f04f 0900 	mov.w	r9, #0
 8000f7e:	e76a      	b.n	8000e56 <HAL_GPIO_Init+0xb6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f80:	f04f 0904 	mov.w	r9, #4
 8000f84:	e767      	b.n	8000e56 <HAL_GPIO_Init+0xb6>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f86:	f108 0004 	add.w	r0, r8, #4
 8000f8a:	e768      	b.n	8000e5e <HAL_GPIO_Init+0xbe>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f8c:	f1a5 0208 	sub.w	r2, r5, #8
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	e768      	b.n	8000e66 <HAL_GPIO_Init+0xc6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f94:	2303      	movs	r3, #3
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1fa>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	408b      	lsls	r3, r1
 8000f9c:	4303      	orrs	r3, r0
        AFIO->EXTICR[position >> 2u] = temp;
 8000f9e:	3202      	adds	r2, #2
 8000fa0:	493c      	ldr	r1, [pc, #240]	; (8001094 <HAL_GPIO_Init+0x2f4>)
 8000fa2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000fac:	d058      	beq.n	8001060 <HAL_GPIO_Init+0x2c0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fae:	4a3c      	ldr	r2, [pc, #240]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000fb0:	6813      	ldr	r3, [r2, #0]
 8000fb2:	4323      	orrs	r3, r4
 8000fb4:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fbc:	d056      	beq.n	800106c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fbe:	4a38      	ldr	r2, [pc, #224]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000fc0:	6853      	ldr	r3, [r2, #4]
 8000fc2:	4323      	orrs	r3, r4
 8000fc4:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000fcc:	d054      	beq.n	8001078 <HAL_GPIO_Init+0x2d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fce:	4a34      	ldr	r2, [pc, #208]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000fd0:	6893      	ldr	r3, [r2, #8]
 8000fd2:	4323      	orrs	r3, r4
 8000fd4:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000fdc:	d062      	beq.n	80010a4 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fde:	4a30      	ldr	r2, [pc, #192]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000fe0:	68d3      	ldr	r3, [r2, #12]
 8000fe2:	431c      	orrs	r4, r3
 8000fe4:	60d4      	str	r4, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000fe6:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe8:	683c      	ldr	r4, [r7, #0]
 8000fea:	fa34 f305 	lsrs.w	r3, r4, r5
 8000fee:	d05f      	beq.n	80010b0 <HAL_GPIO_Init+0x310>
    ioposition = (0x01uL << position);
 8000ff0:	2601      	movs	r6, #1
 8000ff2:	40ae      	lsls	r6, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff4:	4034      	ands	r4, r6
    if (iocurrent == ioposition)
 8000ff6:	42a6      	cmp	r6, r4
 8000ff8:	d1f5      	bne.n	8000fe6 <HAL_GPIO_Init+0x246>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <HAL_GPIO_Init+0x2e4>)
 8000ffc:	4598      	cmp	r8, r3
 8000ffe:	d013      	beq.n	8001028 <HAL_GPIO_Init+0x288>
 8001000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001004:	4598      	cmp	r8, r3
 8001006:	d00f      	beq.n	8001028 <HAL_GPIO_Init+0x288>
 8001008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800100c:	4598      	cmp	r8, r3
 800100e:	d00b      	beq.n	8001028 <HAL_GPIO_Init+0x288>
 8001010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001014:	4598      	cmp	r8, r3
 8001016:	d007      	beq.n	8001028 <HAL_GPIO_Init+0x288>
 8001018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800101c:	4598      	cmp	r8, r3
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x288>
 8001020:	21cd      	movs	r1, #205	; 0xcd
 8001022:	4819      	ldr	r0, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8001024:	f004 fd30 	bl	8005a88 <assert_failed>
      switch (GPIO_Init->Mode)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b12      	cmp	r3, #18
 800102c:	d08e      	beq.n	8000f4c <HAL_GPIO_Init+0x1ac>
 800102e:	f63f af51 	bhi.w	8000ed4 <HAL_GPIO_Init+0x134>
 8001032:	2b02      	cmp	r3, #2
 8001034:	f43f af7d 	beq.w	8000f32 <HAL_GPIO_Init+0x192>
 8001038:	f67f af03 	bls.w	8000e42 <HAL_GPIO_Init+0xa2>
 800103c:	2b03      	cmp	r3, #3
 800103e:	d09c      	beq.n	8000f7a <HAL_GPIO_Init+0x1da>
 8001040:	2b11      	cmp	r3, #17
 8001042:	f47f af08 	bne.w	8000e56 <HAL_GPIO_Init+0xb6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3b01      	subs	r3, #1
 800104a:	2b02      	cmp	r3, #2
 800104c:	f63f af6c 	bhi.w	8000f28 <HAL_GPIO_Init+0x188>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f103 0904 	add.w	r9, r3, #4
          break;
 8001056:	e6fe      	b.n	8000e56 <HAL_GPIO_Init+0xb6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001058:	2301      	movs	r3, #1
 800105a:	e79e      	b.n	8000f9a <HAL_GPIO_Init+0x1fa>
 800105c:	2302      	movs	r3, #2
 800105e:	e79c      	b.n	8000f9a <HAL_GPIO_Init+0x1fa>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	ea23 0304 	bic.w	r3, r3, r4
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e7a4      	b.n	8000fb6 <HAL_GPIO_Init+0x216>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <HAL_GPIO_Init+0x300>)
 800106e:	6853      	ldr	r3, [r2, #4]
 8001070:	ea23 0304 	bic.w	r3, r3, r4
 8001074:	6053      	str	r3, [r2, #4]
 8001076:	e7a6      	b.n	8000fc6 <HAL_GPIO_Init+0x226>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <HAL_GPIO_Init+0x300>)
 800107a:	6893      	ldr	r3, [r2, #8]
 800107c:	ea23 0304 	bic.w	r3, r3, r4
 8001080:	6093      	str	r3, [r2, #8]
 8001082:	e7a8      	b.n	8000fd6 <HAL_GPIO_Init+0x236>
 8001084:	40010800 	.word	0x40010800
 8001088:	0800663c 	.word	0x0800663c
 800108c:	10110000 	.word	0x10110000
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	10210000 	.word	0x10210000
 800109c:	10310000 	.word	0x10310000
 80010a0:	40010400 	.word	0x40010400
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_GPIO_Init+0x318>)
 80010a6:	68d3      	ldr	r3, [r2, #12]
 80010a8:	ea23 0404 	bic.w	r4, r3, r4
 80010ac:	60d4      	str	r4, [r2, #12]
 80010ae:	e79a      	b.n	8000fe6 <HAL_GPIO_Init+0x246>
  }
}
 80010b0:	b003      	add	sp, #12
 80010b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010b6:	bf00      	nop
 80010b8:	40010400 	.word	0x40010400

080010bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010bc:	b538      	push	{r3, r4, r5, lr}
 80010be:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80010c0:	460c      	mov	r4, r1
 80010c2:	b121      	cbz	r1, 80010ce <HAL_GPIO_ReadPin+0x12>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010c4:	68ab      	ldr	r3, [r5, #8]
 80010c6:	421c      	tst	r4, r3
 80010c8:	d107      	bne.n	80010da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ca:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80010cc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80010ce:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <HAL_GPIO_ReadPin+0x24>)
 80010d4:	f004 fcd8 	bl	8005a88 <assert_failed>
 80010d8:	e7f4      	b.n	80010c4 <HAL_GPIO_ReadPin+0x8>
    bitstatus = GPIO_PIN_SET;
 80010da:	2001      	movs	r0, #1
 80010dc:	e7f6      	b.n	80010cc <HAL_GPIO_ReadPin+0x10>
 80010de:	bf00      	nop
 80010e0:	0800663c 	.word	0x0800663c

080010e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e4:	b570      	push	{r4, r5, r6, lr}
 80010e6:	4606      	mov	r6, r0
 80010e8:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80010ea:	460c      	mov	r4, r1
 80010ec:	b129      	cbz	r1, 80010fa <HAL_GPIO_WritePin+0x16>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80010ee:	2d01      	cmp	r5, #1
 80010f0:	d809      	bhi.n	8001106 <HAL_GPIO_WritePin+0x22>

  if (PinState != GPIO_PIN_RESET)
 80010f2:	b975      	cbnz	r5, 8001112 <HAL_GPIO_WritePin+0x2e>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f4:	0424      	lsls	r4, r4, #16
 80010f6:	6134      	str	r4, [r6, #16]
  }
}
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80010fa:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <HAL_GPIO_WritePin+0x34>)
 8001100:	f004 fcc2 	bl	8005a88 <assert_failed>
 8001104:	e7f3      	b.n	80010ee <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001106:	f240 11d5 	movw	r1, #469	; 0x1d5
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <HAL_GPIO_WritePin+0x34>)
 800110c:	f004 fcbc 	bl	8005a88 <assert_failed>
 8001110:	e7ef      	b.n	80010f2 <HAL_GPIO_WritePin+0xe>
    GPIOx->BSRR = GPIO_Pin;
 8001112:	6134      	str	r4, [r6, #16]
 8001114:	e7f0      	b.n	80010f8 <HAL_GPIO_WritePin+0x14>
 8001116:	bf00      	nop
 8001118:	0800663c 	.word	0x0800663c

0800111c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800111c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4203      	tst	r3, r0
 8001124:	d100      	bne.n	8001128 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001126:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800112a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800112c:	f004 fde2 	bl	8005cf4 <HAL_GPIO_EXTI_Callback>
}
 8001130:	e7f9      	b.n	8001126 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001132:	bf00      	nop
 8001134:	40010400 	.word	0x40010400

08001138 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800113c:	2800      	cmp	r0, #0
 800113e:	d07c      	beq.n	800123a <HAL_PCD_Init+0x102>
 8001140:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8001142:	6802      	ldr	r2, [r0, #0]
 8001144:	4b3e      	ldr	r3, [pc, #248]	; (8001240 <HAL_PCD_Init+0x108>)
 8001146:	429a      	cmp	r2, r3
 8001148:	d003      	beq.n	8001152 <HAL_PCD_Init+0x1a>
 800114a:	218c      	movs	r1, #140	; 0x8c
 800114c:	483d      	ldr	r0, [pc, #244]	; (8001244 <HAL_PCD_Init+0x10c>)
 800114e:	f004 fc9b 	bl	8005a88 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001152:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
 8001156:	b1d3      	cbz	r3, 800118e <HAL_PCD_Init+0x56>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001158:	2303      	movs	r3, #3
 800115a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800115e:	6820      	ldr	r0, [r4, #0]
 8001160:	f002 fa51 	bl	8003606 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001164:	4625      	mov	r5, r4
 8001166:	f855 7b10 	ldr.w	r7, [r5], #16
 800116a:	466e      	mov	r6, sp
 800116c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	6033      	str	r3, [r6, #0]
 8001174:	1d23      	adds	r3, r4, #4
 8001176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001178:	4638      	mov	r0, r7
 800117a:	f002 fa35 	bl	80035e8 <USB_CoreInit>
 800117e:	b160      	cbz	r0, 800119a <HAL_PCD_Init+0x62>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001180:	2302      	movs	r3, #2
 8001182:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8001186:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001188:	4628      	mov	r0, r5
 800118a:	b007      	add	sp, #28
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800118e:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8001192:	4620      	mov	r0, r4
 8001194:	f004 ff26 	bl	8005fe4 <HAL_PCD_MspInit>
 8001198:	e7de      	b.n	8001158 <HAL_PCD_Init+0x20>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800119a:	2100      	movs	r1, #0
 800119c:	6820      	ldr	r0, [r4, #0]
 800119e:	f002 fa3c 	bl	800361a <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	e011      	b.n	80011ca <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 80011a6:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80011aa:	2101      	movs	r1, #1
 80011ac:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80011b0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011b4:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011b6:	2100      	movs	r1, #0
 80011b8:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80011bc:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011be:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80011c0:	1c9a      	adds	r2, r3, #2
 80011c2:	0152      	lsls	r2, r2, #5
 80011c4:	50a1      	str	r1, [r4, r2]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c6:	3301      	adds	r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	6860      	ldr	r0, [r4, #4]
 80011cc:	4283      	cmp	r3, r0
 80011ce:	d3ea      	bcc.n	80011a6 <HAL_PCD_Init+0x6e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	e012      	b.n	80011fa <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].is_in = 0U;
 80011d4:	eb04 1143 	add.w	r1, r4, r3, lsl #5
 80011d8:	2200      	movs	r2, #0
 80011da:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
    hpcd->OUT_ep[i].num = i;
 80011de:	f881 3128 	strb.w	r3, [r1, #296]	; 0x128
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011e2:	f881 212b 	strb.w	r2, [r1, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011e6:	f8c1 2138 	str.w	r2, [r1, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ea:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011ee:	f103 010a 	add.w	r1, r3, #10
 80011f2:	0149      	lsls	r1, r1, #5
 80011f4:	5062      	str	r2, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f6:	3301      	adds	r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d8ea      	bhi.n	80011d4 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011fe:	4625      	mov	r5, r4
 8001200:	f855 7b10 	ldr.w	r7, [r5], #16
 8001204:	466e      	mov	r6, sp
 8001206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001208:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	6033      	str	r3, [r6, #0]
 800120e:	1d23      	adds	r3, r4, #4
 8001210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001212:	4638      	mov	r0, r7
 8001214:	f002 fa03 	bl	800361e <USB_DevInit>
 8001218:	4605      	mov	r5, r0
 800121a:	b120      	cbz	r0, 8001226 <HAL_PCD_Init+0xee>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800121c:	2302      	movs	r3, #2
 800121e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8001222:	2501      	movs	r5, #1
 8001224:	e7b0      	b.n	8001188 <HAL_PCD_Init+0x50>
  hpcd->USB_Address = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800122c:	2301      	movs	r3, #1
 800122e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001232:	6820      	ldr	r0, [r4, #0]
 8001234:	f002 fd30 	bl	8003c98 <USB_DevDisconnect>
  return HAL_OK;
 8001238:	e7a6      	b.n	8001188 <HAL_PCD_Init+0x50>
    return HAL_ERROR;
 800123a:	2501      	movs	r5, #1
 800123c:	e7a4      	b.n	8001188 <HAL_PCD_Init+0x50>
 800123e:	bf00      	nop
 8001240:	40005c00 	.word	0x40005c00
 8001244:	08006678 	.word	0x08006678

08001248 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001248:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800124c:	2b01      	cmp	r3, #1
 800124e:	d010      	beq.n	8001272 <HAL_PCD_Start+0x2a>
{
 8001250:	b510      	push	{r4, lr}
 8001252:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001254:	2101      	movs	r1, #1
 8001256:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800125a:	f004 ffc8 	bl	80061ee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800125e:	6820      	ldr	r0, [r4, #0]
 8001260:	f002 fd18 	bl	8003c94 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001264:	6820      	ldr	r0, [r4, #0]
 8001266:	f002 f9c6 	bl	80035f6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800126a:	2000      	movs	r0, #0
 800126c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001270:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001272:	2002      	movs	r0, #2
}
 8001274:	4770      	bx	lr

08001276 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001276:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001278:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800127c:	2b01      	cmp	r3, #1
 800127e:	d018      	beq.n	80012b2 <HAL_PCD_Stop+0x3c>
 8001280:	4604      	mov	r4, r0
 8001282:	2301      	movs	r3, #1
 8001284:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  __HAL_PCD_DISABLE(hpcd);
 8001288:	6800      	ldr	r0, [r0, #0]
 800128a:	f002 f9bc 	bl	8003606 <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800128e:	6820      	ldr	r0, [r4, #0]
 8001290:	f002 fcef 	bl	8003c72 <USB_StopDevice>
 8001294:	4605      	mov	r5, r0
 8001296:	b128      	cbz	r0, 80012a4 <HAL_PCD_Stop+0x2e>
  {
    __HAL_UNLOCK(hpcd);
 8001298:	2300      	movs	r3, #0
 800129a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
    return HAL_ERROR;
 800129e:	2501      	movs	r5, #1

  (void)USB_DevDisconnect(hpcd->Instance);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 80012a0:	4628      	mov	r0, r5
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
  (void)USB_DevDisconnect(hpcd->Instance);
 80012a4:	6820      	ldr	r0, [r4, #0]
 80012a6:	f002 fcf7 	bl	8003c98 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80012aa:	2300      	movs	r3, #0
 80012ac:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  return HAL_OK;
 80012b0:	e7f6      	b.n	80012a0 <HAL_PCD_Stop+0x2a>
  __HAL_LOCK(hpcd);
 80012b2:	2502      	movs	r5, #2
 80012b4:	e7f4      	b.n	80012a0 <HAL_PCD_Stop+0x2a>

080012b6 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80012b6:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d00d      	beq.n	80012da <HAL_PCD_SetAddress+0x24>
{
 80012be:	b510      	push	{r4, lr}
 80012c0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80012c2:	2301      	movs	r3, #1
 80012c4:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 80012c8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012cc:	6800      	ldr	r0, [r0, #0]
 80012ce:	f002 fcdb 	bl	8003c88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 80012d8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80012da:	2002      	movs	r0, #2
}
 80012dc:	4770      	bx	lr

080012de <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80012de:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012e0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80012e4:	d123      	bne.n	800132e <HAL_PCD_EP_Open+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012e6:	f001 0507 	and.w	r5, r1, #7
 80012ea:	016d      	lsls	r5, r5, #5
 80012ec:	f505 7494 	add.w	r4, r5, #296	; 0x128
 80012f0:	4404      	add	r4, r0
    ep->is_in = 0U;
 80012f2:	4405      	add	r5, r0
 80012f4:	2600      	movs	r6, #0
 80012f6:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012fa:	f001 0107 	and.w	r1, r1, #7
 80012fe:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 8001300:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 8001302:	70e3      	strb	r3, [r4, #3]

  if (ep->is_in != 0U)
 8001304:	7862      	ldrb	r2, [r4, #1]
 8001306:	b102      	cbz	r2, 800130a <HAL_PCD_EP_Open+0x2c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001308:	81e1      	strh	r1, [r4, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800130a:	2b02      	cmp	r3, #2
 800130c:	d01a      	beq.n	8001344 <HAL_PCD_EP_Open+0x66>
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 800130e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001312:	2b01      	cmp	r3, #1
 8001314:	d019      	beq.n	800134a <HAL_PCD_EP_Open+0x6c>
 8001316:	4605      	mov	r5, r0
 8001318:	2301      	movs	r3, #1
 800131a:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800131e:	4621      	mov	r1, r4
 8001320:	6800      	ldr	r0, [r0, #0]
 8001322:	f002 f992 	bl	800364a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001326:	2000      	movs	r0, #0
 8001328:	f885 0228 	strb.w	r0, [r5, #552]	; 0x228

  return ret;
}
 800132c:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800132e:	f001 0507 	and.w	r5, r1, #7
 8001332:	016d      	lsls	r5, r5, #5
 8001334:	f105 0428 	add.w	r4, r5, #40	; 0x28
 8001338:	4404      	add	r4, r0
    ep->is_in = 1U;
 800133a:	4405      	add	r5, r0
 800133c:	2601      	movs	r6, #1
 800133e:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
 8001342:	e7da      	b.n	80012fa <HAL_PCD_EP_Open+0x1c>
    ep->data_pid_start = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	7123      	strb	r3, [r4, #4]
 8001348:	e7e1      	b.n	800130e <HAL_PCD_EP_Open+0x30>
  __HAL_LOCK(hpcd);
 800134a:	2002      	movs	r0, #2
 800134c:	e7ee      	b.n	800132c <HAL_PCD_EP_Open+0x4e>

0800134e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800134e:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001350:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001354:	d11c      	bne.n	8001390 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001356:	f001 0307 	and.w	r3, r1, #7
 800135a:	015b      	lsls	r3, r3, #5
 800135c:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001360:	4402      	add	r2, r0
    ep->is_in = 0U;
 8001362:	4403      	add	r3, r0
 8001364:	2400      	movs	r4, #0
 8001366:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800136a:	f001 0307 	and.w	r3, r1, #7
 800136e:	7013      	strb	r3, [r2, #0]

  __HAL_LOCK(hpcd);
 8001370:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001374:	2b01      	cmp	r3, #1
 8001376:	d016      	beq.n	80013a6 <HAL_PCD_EP_Close+0x58>
 8001378:	4604      	mov	r4, r0
 800137a:	2301      	movs	r3, #1
 800137c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001380:	4611      	mov	r1, r2
 8001382:	6800      	ldr	r0, [r0, #0]
 8001384:	f002 fb15 	bl	80039b2 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001388:	2000      	movs	r0, #0
 800138a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800138e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001390:	f001 0307 	and.w	r3, r1, #7
 8001394:	015b      	lsls	r3, r3, #5
 8001396:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800139a:	4402      	add	r2, r0
    ep->is_in = 1U;
 800139c:	4403      	add	r3, r0
 800139e:	2401      	movs	r4, #1
 80013a0:	f883 4029 	strb.w	r4, [r3, #41]	; 0x29
 80013a4:	e7e1      	b.n	800136a <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 80013a6:	2002      	movs	r0, #2
 80013a8:	e7f1      	b.n	800138e <HAL_PCD_EP_Close+0x40>

080013aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013aa:	b570      	push	{r4, r5, r6, lr}
 80013ac:	f001 0507 	and.w	r5, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b0:	016c      	lsls	r4, r5, #5
 80013b2:	f504 7194 	add.w	r1, r4, #296	; 0x128
 80013b6:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013b8:	4404      	add	r4, r0
 80013ba:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80013be:	f105 020a 	add.w	r2, r5, #10
 80013c2:	0152      	lsls	r2, r2, #5
 80013c4:	1886      	adds	r6, r0, r2
 80013c6:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 80013cc:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
  ep->num = ep_addr & EP_ADDR_MSK;
 80013d0:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013d4:	b125      	cbz	r5, 80013e0 <HAL_PCD_EP_Receive+0x36>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013d6:	6800      	ldr	r0, [r0, #0]
 80013d8:	f002 fc7a 	bl	8003cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80013dc:	2000      	movs	r0, #0
 80013de:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013e0:	6800      	ldr	r0, [r0, #0]
 80013e2:	f002 fc75 	bl	8003cd0 <USB_EPStartXfer>
 80013e6:	e7f9      	b.n	80013dc <HAL_PCD_EP_Receive+0x32>

080013e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	f001 0507 	and.w	r5, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ee:	016c      	lsls	r4, r5, #5
 80013f0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80013f4:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013f6:	4404      	add	r4, r0
 80013f8:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 80013fa:	1caa      	adds	r2, r5, #2
 80013fc:	0152      	lsls	r2, r2, #5
 80013fe:	1886      	adds	r6, r0, r2
 8001400:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 8001406:	2301      	movs	r3, #1
 8001408:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800140c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001410:	b125      	cbz	r5, 800141c <HAL_PCD_EP_Transmit+0x34>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001412:	6800      	ldr	r0, [r0, #0]
 8001414:	f002 fc5c 	bl	8003cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001418:	2000      	movs	r0, #0
 800141a:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800141c:	6800      	ldr	r0, [r0, #0]
 800141e:	f002 fc57 	bl	8003cd0 <USB_EPStartXfer>
 8001422:	e7f9      	b.n	8001418 <HAL_PCD_EP_Transmit+0x30>

08001424 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001426:	4604      	mov	r4, r0
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001428:	6820      	ldr	r0, [r4, #0]
 800142a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800142e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001432:	f000 81ad 	beq.w	8001790 <PCD_EP_ISR_Handler+0x36c>
  {
    wIstr = hpcd->Instance->ISTR;
 8001436:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800143a:	b29b      	uxth	r3, r3
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 800143c:	f013 050f 	ands.w	r5, r3, #15
 8001440:	f040 80cd 	bne.w	80015de <PCD_EP_ISR_Handler+0x1ba>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001444:	f013 0f10 	tst.w	r3, #16
 8001448:	d058      	beq.n	80014fc <PCD_EP_ISR_Handler+0xd8>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800144a:	8803      	ldrh	r3, [r0, #0]
 800144c:	b29b      	uxth	r3, r3

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800144e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001452:	f040 8089 	bne.w	8001568 <PCD_EP_ISR_Handler+0x144>
#else
          HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001456:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800145a:	d0e5      	beq.n	8001428 <PCD_EP_ISR_Handler+0x4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800145c:	8803      	ldrh	r3, [r0, #0]
 800145e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001462:	051b      	lsls	r3, r3, #20
 8001464:	0d1b      	lsrs	r3, r3, #20
 8001466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146a:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800146c:	6820      	ldr	r0, [r4, #0]
 800146e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001472:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8001476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800147a:	3306      	adds	r3, #6
 800147c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001480:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001488:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800148c:	b18b      	cbz	r3, 80014b2 <PCD_EP_ISR_Handler+0x8e>
 800148e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001492:	b171      	cbz	r1, 80014b2 <PCD_EP_ISR_Handler+0x8e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001494:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001498:	f002 fdaa 	bl	8003ff0 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 800149c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80014a0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80014a4:	4413      	add	r3, r2
 80014a6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014aa:	2100      	movs	r1, #0
 80014ac:	4620      	mov	r0, r4
 80014ae:	f004 fdc1 	bl	8006034 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80014b8:	4413      	add	r3, r2
 80014ba:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d174      	bne.n	80015ac <PCD_EP_ISR_Handler+0x188>
 80014c2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80014c6:	b292      	uxth	r2, r2
 80014c8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80014cc:	b292      	uxth	r2, r2
 80014ce:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80014d2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80014d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014da:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80014de:	6822      	ldr	r2, [r4, #0]
 80014e0:	8813      	ldrh	r3, [r2, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80014f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f8:	8013      	strh	r3, [r2, #0]
 80014fa:	e795      	b.n	8001428 <PCD_EP_ISR_Handler+0x4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014fc:	8803      	ldrh	r3, [r0, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800150c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001510:	b29b      	uxth	r3, r3
 8001512:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800151a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800151e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001522:	3302      	adds	r3, #2
 8001524:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001528:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800152c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001530:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001532:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001534:	4413      	add	r3, r2
 8001536:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001538:	2100      	movs	r1, #0
 800153a:	4620      	mov	r0, r4
 800153c:	f004 fd84 	bl	8006048 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001540:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001544:	2b00      	cmp	r3, #0
 8001546:	f43f af6f 	beq.w	8001428 <PCD_EP_ISR_Handler+0x4>
 800154a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f af6b 	bne.w	8001428 <PCD_EP_ISR_Handler+0x4>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001552:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001556:	6822      	ldr	r2, [r4, #0]
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001566:	e75f      	b.n	8001428 <PCD_EP_ISR_Handler+0x4>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001568:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800156c:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8001570:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001574:	3306      	adds	r3, #6
 8001576:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800157a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800157e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001582:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001586:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800158a:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800158e:	f002 fd2f 	bl	8003ff0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001592:	6822      	ldr	r2, [r4, #0]
 8001594:	8813      	ldrh	r3, [r2, #0]
 8001596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800159a:	051b      	lsls	r3, r3, #20
 800159c:	0d1b      	lsrs	r3, r3, #20
 800159e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80015a4:	4620      	mov	r0, r4
 80015a6:	f004 fd3d 	bl	8006024 <HAL_PCD_SetupStageCallback>
 80015aa:	e73d      	b.n	8001428 <PCD_EP_ISR_Handler+0x4>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015ac:	2a3e      	cmp	r2, #62	; 0x3e
 80015ae:	d809      	bhi.n	80015c4 <PCD_EP_ISR_Handler+0x1a0>
 80015b0:	0851      	lsrs	r1, r2, #1
 80015b2:	f012 0f01 	tst.w	r2, #1
 80015b6:	d000      	beq.n	80015ba <PCD_EP_ISR_Handler+0x196>
 80015b8:	3101      	adds	r1, #1
 80015ba:	0289      	lsls	r1, r1, #10
 80015bc:	b289      	uxth	r1, r1
 80015be:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 80015c2:	e78c      	b.n	80014de <PCD_EP_ISR_Handler+0xba>
 80015c4:	0951      	lsrs	r1, r2, #5
 80015c6:	f012 0f1f 	tst.w	r2, #31
 80015ca:	d100      	bne.n	80015ce <PCD_EP_ISR_Handler+0x1aa>
 80015cc:	3901      	subs	r1, #1
 80015ce:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80015d2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80015d6:	b292      	uxth	r2, r2
 80015d8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80015dc:	e77f      	b.n	80014de <PCD_EP_ISR_Handler+0xba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80015de:	f830 6025 	ldrh.w	r6, [r0, r5, lsl #2]
 80015e2:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015e4:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80015e8:	d133      	bne.n	8001652 <PCD_EP_ISR_Handler+0x22e>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80015ea:	f016 0f80 	tst.w	r6, #128	; 0x80
 80015ee:	f43f af1b 	beq.w	8001428 <PCD_EP_ISR_Handler+0x4>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80015f2:	6822      	ldr	r2, [r4, #0]
 80015f4:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800160a:	b29b      	uxth	r3, r3
 800160c:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001610:	6822      	ldr	r2, [r4, #0]
 8001612:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001616:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 800161a:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 800161e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001622:	3302      	adds	r3, #2
 8001624:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001628:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800162c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001630:	1cab      	adds	r3, r5, #2
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	18e1      	adds	r1, r4, r3
 8001636:	604a      	str	r2, [r1, #4]
        ep->xfer_buff += ep->xfer_count;
 8001638:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800163a:	440a      	add	r2, r1
 800163c:	63c2      	str	r2, [r0, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800163e:	58e3      	ldr	r3, [r4, r3]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 809d 	bne.w	8001780 <PCD_EP_ISR_Handler+0x35c>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001646:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 800164a:	4620      	mov	r0, r4
 800164c:	f004 fcfc 	bl	8006048 <HAL_PCD_DataInStageCallback>
 8001650:	e6ea      	b.n	8001428 <PCD_EP_ISR_Handler+0x4>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001652:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165a:	051b      	lsls	r3, r3, #20
 800165c:	0d1b      	lsrs	r3, r3, #20
 800165e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001662:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001666:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800166a:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800166e:	b9d3      	cbnz	r3, 80016a6 <PCD_EP_ISR_Handler+0x282>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001670:	6820      	ldr	r0, [r4, #0]
 8001672:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001676:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 800167a:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 800167e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001682:	3306      	adds	r3, #6
 8001684:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001688:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 800168c:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8001690:	b38f      	cbz	r7, 80016f6 <PCD_EP_ISR_Handler+0x2d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001692:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001696:	463b      	mov	r3, r7
 8001698:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 800169c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80016a0:	f002 fca6 	bl	8003ff0 <USB_ReadPMA>
 80016a4:	e027      	b.n	80016f6 <PCD_EP_ISR_Handler+0x2d2>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80016a6:	6820      	ldr	r0, [r4, #0]
 80016a8:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80016ac:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 80016b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016b4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80016b8:	d043      	beq.n	8001742 <PCD_EP_ISR_Handler+0x31e>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016ba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80016c2:	3302      	adds	r3, #2
 80016c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80016c8:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80016cc:	f3c7 0709 	ubfx	r7, r7, #0, #10
            if (count != 0U)
 80016d0:	bb6f      	cbnz	r7, 800172e <PCD_EP_ISR_Handler+0x30a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80016d8:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80016dc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016f2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count += count;
 80016f6:	f105 030a 	add.w	r3, r5, #10
 80016fa:	015b      	lsls	r3, r3, #5
 80016fc:	18e1      	adds	r1, r4, r3
 80016fe:	684a      	ldr	r2, [r1, #4]
 8001700:	443a      	add	r2, r7
 8001702:	604a      	str	r2, [r1, #4]
        ep->xfer_buff += count;
 8001704:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001708:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 800170c:	443a      	add	r2, r7
 800170e:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001712:	58e3      	ldr	r3, [r4, r3]
 8001714:	b11b      	cbz	r3, 800171e <PCD_EP_ISR_Handler+0x2fa>
 8001716:	f8d1 1138 	ldr.w	r1, [r1, #312]	; 0x138
 800171a:	428f      	cmp	r7, r1
 800171c:	d228      	bcs.n	8001770 <PCD_EP_ISR_Handler+0x34c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800171e:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001722:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8001726:	4620      	mov	r0, r4
 8001728:	f004 fc84 	bl	8006034 <HAL_PCD_DataOutStageCallback>
 800172c:	e75d      	b.n	80015ea <PCD_EP_ISR_Handler+0x1c6>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800172e:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001732:	463b      	mov	r3, r7
 8001734:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 8001738:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800173c:	f002 fc58 	bl	8003ff0 <USB_ReadPMA>
 8001740:	e7c7      	b.n	80016d2 <PCD_EP_ISR_Handler+0x2ae>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001742:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800174a:	3306      	adds	r3, #6
 800174c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001750:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8001754:	f3c7 0709 	ubfx	r7, r7, #0, #10
            if (count != 0U)
 8001758:	2f00      	cmp	r7, #0
 800175a:	d0ba      	beq.n	80016d2 <PCD_EP_ISR_Handler+0x2ae>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800175c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001760:	463b      	mov	r3, r7
 8001762:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8001766:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800176a:	f002 fc41 	bl	8003ff0 <USB_ReadPMA>
 800176e:	e7b0      	b.n	80016d2 <PCD_EP_ISR_Handler+0x2ae>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001770:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001774:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff fe16 	bl	80013aa <HAL_PCD_EP_Receive>
 800177e:	e734      	b.n	80015ea <PCD_EP_ISR_Handler+0x1c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001780:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001784:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff fe2d 	bl	80013e8 <HAL_PCD_EP_Transmit>
 800178e:	e64b      	b.n	8001428 <PCD_EP_ISR_Handler+0x4>
        }
      }
    }
  }
  return HAL_OK;
}
 8001790:	2000      	movs	r0, #0
 8001792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001794 <HAL_PCD_IRQHandler>:
{
 8001794:	b510      	push	{r4, lr}
 8001796:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001798:	6800      	ldr	r0, [r0, #0]
 800179a:	f002 fa7f 	bl	8003c9c <USB_ReadInterrupts>
 800179e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80017a2:	d145      	bne.n	8001830 <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80017a4:	6820      	ldr	r0, [r4, #0]
 80017a6:	f002 fa79 	bl	8003c9c <USB_ReadInterrupts>
 80017aa:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80017ae:	d143      	bne.n	8001838 <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017b0:	6820      	ldr	r0, [r4, #0]
 80017b2:	f002 fa73 	bl	8003c9c <USB_ReadInterrupts>
 80017b6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80017ba:	d008      	beq.n	80017ce <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017bc:	6822      	ldr	r2, [r4, #0]
 80017be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017ce:	6820      	ldr	r0, [r4, #0]
 80017d0:	f002 fa64 	bl	8003c9c <USB_ReadInterrupts>
 80017d4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80017d8:	d008      	beq.n	80017ec <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017ec:	6820      	ldr	r0, [r4, #0]
 80017ee:	f002 fa55 	bl	8003c9c <USB_ReadInterrupts>
 80017f2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80017f6:	d130      	bne.n	800185a <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80017f8:	6820      	ldr	r0, [r4, #0]
 80017fa:	f002 fa4f 	bl	8003c9c <USB_ReadInterrupts>
 80017fe:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001802:	d149      	bne.n	8001898 <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001804:	6820      	ldr	r0, [r4, #0]
 8001806:	f002 fa49 	bl	8003c9c <USB_ReadInterrupts>
 800180a:	f410 7f00 	tst.w	r0, #512	; 0x200
 800180e:	d16d      	bne.n	80018ec <HAL_PCD_IRQHandler+0x158>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001810:	6820      	ldr	r0, [r4, #0]
 8001812:	f002 fa43 	bl	8003c9c <USB_ReadInterrupts>
 8001816:	f410 7f80 	tst.w	r0, #256	; 0x100
 800181a:	d008      	beq.n	800182e <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001822:	b29b      	uxth	r3, r3
 8001824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001828:	b29b      	uxth	r3, r3
 800182a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800182e:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff fdf7 	bl	8001424 <PCD_EP_ISR_Handler>
 8001836:	e7b5      	b.n	80017a4 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001838:	6822      	ldr	r2, [r4, #0]
 800183a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800183e:	b29b      	uxth	r3, r3
 8001840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001844:	b29b      	uxth	r3, r3
 8001846:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800184a:	4620      	mov	r0, r4
 800184c:	f004 fc0b 	bl	8006066 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001850:	2100      	movs	r1, #0
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff fd2f 	bl	80012b6 <HAL_PCD_SetAddress>
 8001858:	e7aa      	b.n	80017b0 <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800185a:	6822      	ldr	r2, [r4, #0]
 800185c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001860:	b29b      	uxth	r3, r3
 8001862:	f023 0304 	bic.w	r3, r3, #4
 8001866:	b29b      	uxth	r3, r3
 8001868:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800186c:	6822      	ldr	r2, [r4, #0]
 800186e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001872:	b29b      	uxth	r3, r3
 8001874:	f023 0308 	bic.w	r3, r3, #8
 8001878:	b29b      	uxth	r3, r3
 800187a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800187e:	4620      	mov	r0, r4
 8001880:	f004 fc12 	bl	80060a8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001884:	6822      	ldr	r2, [r4, #0]
 8001886:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800188a:	b29b      	uxth	r3, r3
 800188c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001890:	b29b      	uxth	r3, r3
 8001892:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001896:	e7af      	b.n	80017f8 <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001898:	6822      	ldr	r2, [r4, #0]
 800189a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018a6:	6822      	ldr	r2, [r4, #0]
 80018a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80018b8:	6822      	ldr	r2, [r4, #0]
 80018ba:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018c6:	6820      	ldr	r0, [r4, #0]
 80018c8:	f002 f9e8 	bl	8003c9c <USB_ReadInterrupts>
 80018cc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80018d0:	d008      	beq.n	80018e4 <HAL_PCD_IRQHandler+0x150>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018d2:	6822      	ldr	r2, [r4, #0]
 80018d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018d8:	b29b      	uxth	r3, r3
 80018da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 80018e4:	4620      	mov	r0, r4
 80018e6:	f004 fbcf 	bl	8006088 <HAL_PCD_SuspendCallback>
 80018ea:	e78b      	b.n	8001804 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018ec:	6822      	ldr	r2, [r4, #0]
 80018ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80018fe:	4620      	mov	r0, r4
 8001900:	f004 fbab 	bl	800605a <HAL_PCD_SOFCallback>
 8001904:	e784      	b.n	8001810 <HAL_PCD_IRQHandler+0x7c>

08001906 <HAL_PCD_EP_SetStall>:
{
 8001906:	b538      	push	{r3, r4, r5, lr}
 8001908:	f001 0507 	and.w	r5, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800190c:	6843      	ldr	r3, [r0, #4]
 800190e:	429d      	cmp	r5, r3
 8001910:	d82c      	bhi.n	800196c <HAL_PCD_EP_SetStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8001912:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001916:	d11a      	bne.n	800194e <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 8001918:	014b      	lsls	r3, r1, #5
 800191a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800191e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001920:	4403      	add	r3, r0
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 8001928:	2301      	movs	r3, #1
 800192a:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800192c:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800192e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001932:	2b01      	cmp	r3, #1
 8001934:	d01c      	beq.n	8001970 <HAL_PCD_EP_SetStall+0x6a>
 8001936:	4604      	mov	r4, r0
 8001938:	2301      	movs	r3, #1
 800193a:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800193e:	6800      	ldr	r0, [r0, #0]
 8001940:	f002 f921 	bl	8003b86 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001944:	b165      	cbz	r5, 8001960 <HAL_PCD_EP_SetStall+0x5a>
  __HAL_UNLOCK(hpcd);
 8001946:	2000      	movs	r0, #0
 8001948:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 800194c:	e00f      	b.n	800196e <HAL_PCD_EP_SetStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800194e:	016b      	lsls	r3, r5, #5
 8001950:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001954:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001956:	4403      	add	r3, r0
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800195e:	e7e3      	b.n	8001928 <HAL_PCD_EP_SetStall+0x22>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001960:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8001964:	6820      	ldr	r0, [r4, #0]
 8001966:	f002 f99c 	bl	8003ca2 <USB_EP0_OutStart>
 800196a:	e7ec      	b.n	8001946 <HAL_PCD_EP_SetStall+0x40>
    return HAL_ERROR;
 800196c:	2001      	movs	r0, #1
}
 800196e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001970:	2002      	movs	r0, #2
 8001972:	e7fc      	b.n	800196e <HAL_PCD_EP_SetStall+0x68>

08001974 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001974:	f001 020f 	and.w	r2, r1, #15
 8001978:	6843      	ldr	r3, [r0, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d82d      	bhi.n	80019da <HAL_PCD_EP_ClrStall+0x66>
{
 800197e:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001980:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001984:	d11e      	bne.n	80019c4 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001986:	f001 0307 	and.w	r3, r1, #7
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001990:	4402      	add	r2, r0
    ep->is_in = 0U;
 8001992:	4403      	add	r3, r0
 8001994:	2400      	movs	r4, #0
 8001996:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  ep->is_stall = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800199e:	f001 0307 	and.w	r3, r1, #7
 80019a2:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 80019a4:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d018      	beq.n	80019de <HAL_PCD_EP_ClrStall+0x6a>
 80019ac:	4604      	mov	r4, r0
 80019ae:	2301      	movs	r3, #1
 80019b0:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019b4:	4611      	mov	r1, r2
 80019b6:	6800      	ldr	r0, [r0, #0]
 80019b8:	f002 f90a 	bl	8003bd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019bc:	2000      	movs	r0, #0
 80019be:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80019c2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c4:	f001 0307 	and.w	r3, r1, #7
 80019c8:	015b      	lsls	r3, r3, #5
 80019ca:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80019ce:	4402      	add	r2, r0
    ep->is_in = 1U;
 80019d0:	4403      	add	r3, r0
 80019d2:	2401      	movs	r4, #1
 80019d4:	f883 4029 	strb.w	r4, [r3, #41]	; 0x29
 80019d8:	e7df      	b.n	800199a <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
}
 80019dc:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80019de:	2002      	movs	r0, #2
 80019e0:	e7ef      	b.n	80019c2 <HAL_PCD_EP_ClrStall+0x4e>

080019e2 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80019e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019e6:	d00c      	beq.n	8001a02 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e8:	f001 0107 	and.w	r1, r1, #7
 80019ec:	0149      	lsls	r1, r1, #5
 80019ee:	3128      	adds	r1, #40	; 0x28
 80019f0:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80019f2:	b15a      	cbz	r2, 8001a0c <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80019f4:	2201      	movs	r2, #1
 80019f6:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80019f8:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80019fa:	0c1b      	lsrs	r3, r3, #16
 80019fc:	814b      	strh	r3, [r1, #10]
  }

  return HAL_OK;
}
 80019fe:	2000      	movs	r0, #0
 8001a00:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8001a02:	0149      	lsls	r1, r1, #5
 8001a04:	f501 7194 	add.w	r1, r1, #296	; 0x128
 8001a08:	4401      	add	r1, r0
 8001a0a:	e7f2      	b.n	80019f2 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0U;
 8001a0c:	730a      	strb	r2, [r1, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001a0e:	80cb      	strh	r3, [r1, #6]
 8001a10:	e7f5      	b.n	80019fe <HAL_PCDEx_PMAConfig+0x1c>
	...

08001a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a14:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <RCC_Delay+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <RCC_Delay+0x28>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	0a5b      	lsrs	r3, r3, #9
 8001a22:	fb00 f003 	mul.w	r0, r0, r3
 8001a26:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8001a28:	bf00      	nop
  }
  while (Delay --);
 8001a2a:	9b01      	ldr	r3, [sp, #4]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	9201      	str	r2, [sp, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f9      	bne.n	8001a28 <RCC_Delay+0x14>
}
 8001a34:	b002      	add	sp, #8
 8001a36:	4770      	bx	lr
 8001a38:	200001e0 	.word	0x200001e0
 8001a3c:	10624dd3 	.word	0x10624dd3

08001a40 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001a40:	2800      	cmp	r0, #0
 8001a42:	f000 828c 	beq.w	8001f5e <HAL_RCC_OscConfig+0x51e>
{
 8001a46:	b570      	push	{r4, r5, r6, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001a4c:	6803      	ldr	r3, [r0, #0]
 8001a4e:	b113      	cbz	r3, 8001a56 <HAL_RCC_OscConfig+0x16>
 8001a50:	f013 0f0f 	tst.w	r3, #15
 8001a54:	d02a      	beq.n	8001aac <HAL_RCC_OscConfig+0x6c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	f013 0f01 	tst.w	r3, #1
 8001a5c:	d040      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xa0>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001a5e:	6863      	ldr	r3, [r4, #4]
 8001a60:	b12b      	cbz	r3, 8001a6e <HAL_RCC_OscConfig+0x2e>
 8001a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a66:	d002      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2e>
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a6c:	d124      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a6e:	4ba9      	ldr	r3, [pc, #676]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d029      	beq.n	8001ace <HAL_RCC_OscConfig+0x8e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a7a:	4ba6      	ldr	r3, [pc, #664]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d01e      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a86:	6863      	ldr	r3, [r4, #4]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d055      	beq.n	8001b3a <HAL_RCC_OscConfig+0xfa>
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d169      	bne.n	8001b66 <HAL_RCC_OscConfig+0x126>
 8001a92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a96:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e04b      	b.n	8001b44 <HAL_RCC_OscConfig+0x104>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001aac:	f240 1167 	movw	r1, #359	; 0x167
 8001ab0:	4899      	ldr	r0, [pc, #612]	; (8001d18 <HAL_RCC_OscConfig+0x2d8>)
 8001ab2:	f003 ffe9 	bl	8005a88 <assert_failed>
 8001ab6:	e7ce      	b.n	8001a56 <HAL_RCC_OscConfig+0x16>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001ab8:	f240 116d 	movw	r1, #365	; 0x16d
 8001abc:	4896      	ldr	r0, [pc, #600]	; (8001d18 <HAL_RCC_OscConfig+0x2d8>)
 8001abe:	f003 ffe3 	bl	8005a88 <assert_failed>
 8001ac2:	e7d4      	b.n	8001a6e <HAL_RCC_OscConfig+0x2e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac4:	4b93      	ldr	r3, [pc, #588]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001acc:	d0db      	beq.n	8001a86 <HAL_RCC_OscConfig+0x46>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b91      	ldr	r3, [pc, #580]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ad6:	d003      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xa0>
 8001ad8:	6863      	ldr	r3, [r4, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8241 	beq.w	8001f62 <HAL_RCC_OscConfig+0x522>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	f013 0f02 	tst.w	r3, #2
 8001ae6:	f000 808a 	beq.w	8001bfe <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001aea:	6923      	ldr	r3, [r4, #16]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d863      	bhi.n	8001bb8 <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001af0:	6963      	ldr	r3, [r4, #20]
 8001af2:	2b1f      	cmp	r3, #31
 8001af4:	d866      	bhi.n	8001bc4 <HAL_RCC_OscConfig+0x184>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	4b87      	ldr	r3, [pc, #540]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f013 0f0c 	tst.w	r3, #12
 8001afe:	d06c      	beq.n	8001bda <HAL_RCC_OscConfig+0x19a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b00:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d061      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x190>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0c:	6923      	ldr	r3, [r4, #16]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 809a 	beq.w	8001c48 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b81      	ldr	r3, [pc, #516]	; (8001d1c <HAL_RCC_OscConfig+0x2dc>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b1a:	f7fe fb59 	bl	80001d0 <HAL_GetTick>
 8001b1e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	4b7c      	ldr	r3, [pc, #496]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f013 0f02 	tst.w	r3, #2
 8001b28:	f040 8085 	bne.w	8001c36 <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7fe fb50 	bl	80001d0 <HAL_GetTick>
 8001b30:	1b40      	subs	r0, r0, r5
 8001b32:	2802      	cmp	r0, #2
 8001b34:	d9f4      	bls.n	8001b20 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8001b36:	2003      	movs	r0, #3
 8001b38:	e216      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	4a76      	ldr	r2, [pc, #472]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001b3c:	6813      	ldr	r3, [r2, #0]
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b44:	6863      	ldr	r3, [r4, #4]
 8001b46:	b343      	cbz	r3, 8001b9a <HAL_RCC_OscConfig+0x15a>
        tickstart = HAL_GetTick();
 8001b48:	f7fe fb42 	bl	80001d0 <HAL_GetTick>
 8001b4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b71      	ldr	r3, [pc, #452]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b56:	d1c3      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xa0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7fe fb3a 	bl	80001d0 <HAL_GetTick>
 8001b5c:	1b40      	subs	r0, r0, r5
 8001b5e:	2864      	cmp	r0, #100	; 0x64
 8001b60:	d9f5      	bls.n	8001b4e <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8001b62:	2003      	movs	r0, #3
 8001b64:	e200      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6a:	d009      	beq.n	8001b80 <HAL_RCC_OscConfig+0x140>
 8001b6c:	4b69      	ldr	r3, [pc, #420]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e7e1      	b.n	8001b44 <HAL_RCC_OscConfig+0x104>
 8001b80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b84:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e7d4      	b.n	8001b44 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fb19 	bl	80001d0 <HAL_GetTick>
 8001b9e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba0:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ba8:	d09a      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xa0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001baa:	f7fe fb11 	bl	80001d0 <HAL_GetTick>
 8001bae:	1b40      	subs	r0, r0, r5
 8001bb0:	2864      	cmp	r0, #100	; 0x64
 8001bb2:	d9f5      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	e1d7      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001bb8:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001bbc:	4856      	ldr	r0, [pc, #344]	; (8001d18 <HAL_RCC_OscConfig+0x2d8>)
 8001bbe:	f003 ff63 	bl	8005a88 <assert_failed>
 8001bc2:	e795      	b.n	8001af0 <HAL_RCC_OscConfig+0xb0>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001bc4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001bc8:	4853      	ldr	r0, [pc, #332]	; (8001d18 <HAL_RCC_OscConfig+0x2d8>)
 8001bca:	f003 ff5d 	bl	8005a88 <assert_failed>
 8001bce:	e792      	b.n	8001af6 <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bd0:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001bd8:	d198      	bne.n	8001b0c <HAL_RCC_OscConfig+0xcc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f013 0f02 	tst.w	r3, #2
 8001be2:	d004      	beq.n	8001bee <HAL_RCC_OscConfig+0x1ae>
 8001be4:	6923      	ldr	r3, [r4, #16]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x1ae>
        return HAL_ERROR;
 8001bea:	2001      	movs	r0, #1
 8001bec:	e1bc      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001bf0:	6813      	ldr	r3, [r2, #0]
 8001bf2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bf6:	6961      	ldr	r1, [r4, #20]
 8001bf8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bfc:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	f013 0f08 	tst.w	r3, #8
 8001c04:	d03b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x23e>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001c06:	69a3      	ldr	r3, [r4, #24]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d82f      	bhi.n	8001c6c <HAL_RCC_OscConfig+0x22c>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0c:	69a3      	ldr	r3, [r4, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d066      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2a0>
      __HAL_RCC_LSI_ENABLE();
 8001c12:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <HAL_RCC_OscConfig+0x2e0>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c18:	f7fe fada 	bl	80001d0 <HAL_GetTick>
 8001c1c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	f013 0f02 	tst.w	r3, #2
 8001c26:	d127      	bne.n	8001c78 <HAL_RCC_OscConfig+0x238>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7fe fad2 	bl	80001d0 <HAL_GetTick>
 8001c2c:	1b40      	subs	r0, r0, r5
 8001c2e:	2802      	cmp	r0, #2
 8001c30:	d9f5      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1de>
          return HAL_TIMEOUT;
 8001c32:	2003      	movs	r0, #3
 8001c34:	e198      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4a37      	ldr	r2, [pc, #220]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c3e:	6961      	ldr	r1, [r4, #20]
 8001c40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e7da      	b.n	8001bfe <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_HSI_DISABLE();
 8001c48:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x2dc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fabf 	bl	80001d0 <HAL_GetTick>
 8001c52:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c54:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f013 0f02 	tst.w	r3, #2
 8001c5c:	d0cf      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1be>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7fe fab7 	bl	80001d0 <HAL_GetTick>
 8001c62:	1b40      	subs	r0, r0, r5
 8001c64:	2802      	cmp	r0, #2
 8001c66:	d9f5      	bls.n	8001c54 <HAL_RCC_OscConfig+0x214>
            return HAL_TIMEOUT;
 8001c68:	2003      	movs	r0, #3
 8001c6a:	e17d      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001c6c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001c70:	4829      	ldr	r0, [pc, #164]	; (8001d18 <HAL_RCC_OscConfig+0x2d8>)
 8001c72:	f003 ff09 	bl	8005a88 <assert_failed>
 8001c76:	e7c9      	b.n	8001c0c <HAL_RCC_OscConfig+0x1cc>
      RCC_Delay(1);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff fecb 	bl	8001a14 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	f013 0f04 	tst.w	r3, #4
 8001c84:	f000 80a5 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x392>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001c88:	68e3      	ldr	r3, [r4, #12]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x252>
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d138      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2c4>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c9a:	d139      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001c9e:	69da      	ldr	r2, [r3, #28]
 8001ca0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ca4:	61da      	str	r2, [r3, #28]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001cb0:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_RCC_OscConfig+0x2e4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cba:	d035      	beq.n	8001d28 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	68e3      	ldr	r3, [r4, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d046      	beq.n	8001d50 <HAL_RCC_OscConfig+0x310>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d15c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x340>
 8001cc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001cce:	6a1a      	ldr	r2, [r3, #32]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	621a      	str	r2, [r3, #32]
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	f022 0204 	bic.w	r2, r2, #4
 8001cdc:	621a      	str	r2, [r3, #32]
 8001cde:	e03c      	b.n	8001d5a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_LSI_DISABLE();
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_RCC_OscConfig+0x2e0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ce6:	f7fe fa73 	bl	80001d0 <HAL_GetTick>
 8001cea:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_OscConfig+0x2d4>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	f013 0f02 	tst.w	r3, #2
 8001cf4:	d0c3      	beq.n	8001c7e <HAL_RCC_OscConfig+0x23e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7fe fa6b 	bl	80001d0 <HAL_GetTick>
 8001cfa:	1b40      	subs	r0, r0, r5
 8001cfc:	2802      	cmp	r0, #2
 8001cfe:	d9f5      	bls.n	8001cec <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 8001d00:	2003      	movs	r0, #3
 8001d02:	e131      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001d04:	f240 2111 	movw	r1, #529	; 0x211
 8001d08:	4803      	ldr	r0, [pc, #12]	; (8001d18 <HAL_RCC_OscConfig+0x2d8>)
 8001d0a:	f003 febd 	bl	8005a88 <assert_failed>
 8001d0e:	e7c0      	b.n	8001c92 <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 8001d10:	2500      	movs	r5, #0
 8001d12:	e7ce      	b.n	8001cb2 <HAL_RCC_OscConfig+0x272>
 8001d14:	40021000 	.word	0x40021000
 8001d18:	080066b0 	.word	0x080066b0
 8001d1c:	42420000 	.word	0x42420000
 8001d20:	42420480 	.word	0x42420480
 8001d24:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d28:	4a92      	ldr	r2, [pc, #584]	; (8001f74 <HAL_RCC_OscConfig+0x534>)
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001d32:	f7fe fa4d 	bl	80001d0 <HAL_GetTick>
 8001d36:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <HAL_RCC_OscConfig+0x534>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d40:	d1bc      	bne.n	8001cbc <HAL_RCC_OscConfig+0x27c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7fe fa45 	bl	80001d0 <HAL_GetTick>
 8001d46:	1b80      	subs	r0, r0, r6
 8001d48:	2864      	cmp	r0, #100	; 0x64
 8001d4a:	d9f5      	bls.n	8001d38 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	e10b      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	4a89      	ldr	r2, [pc, #548]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001d52:	6a13      	ldr	r3, [r2, #32]
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5a:	68e3      	ldr	r3, [r4, #12]
 8001d5c:	b333      	cbz	r3, 8001dac <HAL_RCC_OscConfig+0x36c>
      tickstart = HAL_GetTick();
 8001d5e:	f7fe fa37 	bl	80001d0 <HAL_GetTick>
 8001d62:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	4b84      	ldr	r3, [pc, #528]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f013 0f02 	tst.w	r3, #2
 8001d6c:	d12f      	bne.n	8001dce <HAL_RCC_OscConfig+0x38e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7fe fa2f 	bl	80001d0 <HAL_GetTick>
 8001d72:	1b80      	subs	r0, r0, r6
 8001d74:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d78:	4298      	cmp	r0, r3
 8001d7a:	d9f3      	bls.n	8001d64 <HAL_RCC_OscConfig+0x324>
          return HAL_TIMEOUT;
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	e0f3      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d009      	beq.n	8001d98 <HAL_RCC_OscConfig+0x358>
 8001d84:	4b7c      	ldr	r3, [pc, #496]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	621a      	str	r2, [r3, #32]
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	f022 0204 	bic.w	r2, r2, #4
 8001d94:	621a      	str	r2, [r3, #32]
 8001d96:	e7e0      	b.n	8001d5a <HAL_RCC_OscConfig+0x31a>
 8001d98:	4b77      	ldr	r3, [pc, #476]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	f042 0204 	orr.w	r2, r2, #4
 8001da0:	621a      	str	r2, [r3, #32]
 8001da2:	6a1a      	ldr	r2, [r3, #32]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	621a      	str	r2, [r3, #32]
 8001daa:	e7d6      	b.n	8001d5a <HAL_RCC_OscConfig+0x31a>
      tickstart = HAL_GetTick();
 8001dac:	f7fe fa10 	bl	80001d0 <HAL_GetTick>
 8001db0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	f013 0f02 	tst.w	r3, #2
 8001dba:	d008      	beq.n	8001dce <HAL_RCC_OscConfig+0x38e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7fe fa08 	bl	80001d0 <HAL_GetTick>
 8001dc0:	1b80      	subs	r0, r0, r6
 8001dc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dc6:	4298      	cmp	r0, r3
 8001dc8:	d9f3      	bls.n	8001db2 <HAL_RCC_OscConfig+0x372>
          return HAL_TIMEOUT;
 8001dca:	2003      	movs	r0, #3
 8001dcc:	e0cc      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
    if (pwrclkchanged == SET)
 8001dce:	2d00      	cmp	r5, #0
 8001dd0:	d153      	bne.n	8001e7a <HAL_RCC_OscConfig+0x43a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001dd2:	69e3      	ldr	r3, [r4, #28]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d856      	bhi.n	8001e86 <HAL_RCC_OscConfig+0x446>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd8:	69e3      	ldr	r3, [r4, #28]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80c3 	beq.w	8001f66 <HAL_RCC_OscConfig+0x526>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de0:	4a65      	ldr	r2, [pc, #404]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001de2:	6852      	ldr	r2, [r2, #4]
 8001de4:	f002 020c 	and.w	r2, r2, #12
 8001de8:	2a08      	cmp	r2, #8
 8001dea:	f000 80a6 	beq.w	8001f3a <HAL_RCC_OscConfig+0x4fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	f040 808f 	bne.w	8001f12 <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001df4:	6a23      	ldr	r3, [r4, #32]
 8001df6:	b113      	cbz	r3, 8001dfe <HAL_RCC_OscConfig+0x3be>
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d149      	bne.n	8001e92 <HAL_RCC_OscConfig+0x452>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e00:	b34b      	cbz	r3, 8001e56 <HAL_RCC_OscConfig+0x416>
 8001e02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e06:	d026      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e0c:	d023      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e18:	d01d      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e1a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001e1e:	d01a      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e20:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e24:	d017      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e26:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001e2a:	d014      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e30:	d011      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e32:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001e36:	d00e      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e38:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e3e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e4a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001e4e:	d002      	beq.n	8001e56 <HAL_RCC_OscConfig+0x416>
 8001e50:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001e54:	d123      	bne.n	8001e9e <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_RCC_OscConfig+0x53c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e5c:	f7fe f9b8 	bl	80001d0 <HAL_GetTick>
 8001e60:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	4b45      	ldr	r3, [pc, #276]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e6a:	d01e      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe f9b0 	bl	80001d0 <HAL_GetTick>
 8001e70:	1b40      	subs	r0, r0, r5
 8001e72:	2802      	cmp	r0, #2
 8001e74:	d9f5      	bls.n	8001e62 <HAL_RCC_OscConfig+0x422>
            return HAL_TIMEOUT;
 8001e76:	2003      	movs	r0, #3
 8001e78:	e076      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4a3f      	ldr	r2, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001e7c:	69d3      	ldr	r3, [r2, #28]
 8001e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e82:	61d3      	str	r3, [r2, #28]
 8001e84:	e7a5      	b.n	8001dd2 <HAL_RCC_OscConfig+0x392>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001e86:	f240 21af 	movw	r1, #687	; 0x2af
 8001e8a:	483d      	ldr	r0, [pc, #244]	; (8001f80 <HAL_RCC_OscConfig+0x540>)
 8001e8c:	f003 fdfc 	bl	8005a88 <assert_failed>
 8001e90:	e7a2      	b.n	8001dd8 <HAL_RCC_OscConfig+0x398>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001e92:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001e96:	483a      	ldr	r0, [pc, #232]	; (8001f80 <HAL_RCC_OscConfig+0x540>)
 8001e98:	f003 fdf6 	bl	8005a88 <assert_failed>
 8001e9c:	e7af      	b.n	8001dfe <HAL_RCC_OscConfig+0x3be>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001e9e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001ea2:	4837      	ldr	r0, [pc, #220]	; (8001f80 <HAL_RCC_OscConfig+0x540>)
 8001ea4:	f003 fdf0 	bl	8005a88 <assert_failed>
 8001ea8:	e7d5      	b.n	8001e56 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eaa:	6a23      	ldr	r3, [r4, #32]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d01a      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb2:	4931      	ldr	r1, [pc, #196]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001eb4:	684b      	ldr	r3, [r1, #4]
 8001eb6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001eba:	6a22      	ldr	r2, [r4, #32]
 8001ebc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ebe:	4302      	orrs	r2, r0
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_OscConfig+0x53c>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001eca:	f7fe f981 	bl	80001d0 <HAL_GetTick>
 8001ece:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ed8:	d119      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7fe f979 	bl	80001d0 <HAL_GetTick>
 8001ede:	1b00      	subs	r0, r0, r4
 8001ee0:	2802      	cmp	r0, #2
 8001ee2:	d9f5      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x490>
            return HAL_TIMEOUT;
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	e03f      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001ee8:	68a3      	ldr	r3, [r4, #8]
 8001eea:	b113      	cbz	r3, 8001ef2 <HAL_RCC_OscConfig+0x4b2>
 8001eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_OscConfig+0x4c2>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ef2:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001ef4:	6853      	ldr	r3, [r2, #4]
 8001ef6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001efa:	68a1      	ldr	r1, [r4, #8]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6053      	str	r3, [r2, #4]
 8001f00:	e7d7      	b.n	8001eb2 <HAL_RCC_OscConfig+0x472>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001f02:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001f06:	481e      	ldr	r0, [pc, #120]	; (8001f80 <HAL_RCC_OscConfig+0x540>)
 8001f08:	f003 fdbe 	bl	8005a88 <assert_failed>
 8001f0c:	e7f1      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4b2>
  return HAL_OK;
 8001f0e:	2000      	movs	r0, #0
 8001f10:	e02a      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_RCC_OscConfig+0x53c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f18:	f7fe f95a 	bl	80001d0 <HAL_GetTick>
 8001f1c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f26:	d006      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe f952 	bl	80001d0 <HAL_GetTick>
 8001f2c:	1b00      	subs	r0, r0, r4
 8001f2e:	2802      	cmp	r0, #2
 8001f30:	d9f5      	bls.n	8001f1e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8001f32:	2003      	movs	r0, #3
 8001f34:	e018      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
  return HAL_OK;
 8001f36:	2000      	movs	r0, #0
 8001f38:	e016      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCC_OscConfig+0x52c>
        pll_config = RCC->CFGR;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001f40:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001f46:	6a22      	ldr	r2, [r4, #32]
 8001f48:	4291      	cmp	r1, r2
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0x510>
          return HAL_ERROR;
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f54:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCC_OscConfig+0x530>
          return HAL_ERROR;
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	e004      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
    return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
}
 8001f60:	4770      	bx	lr
        return HAL_ERROR;
 8001f62:	2001      	movs	r0, #1
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
  return HAL_OK;
 8001f66:	2000      	movs	r0, #0
}
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	e7fb      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
  return HAL_OK;
 8001f70:	2000      	movs	r0, #0
 8001f72:	e7f9      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
 8001f74:	40007000 	.word	0x40007000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	42420060 	.word	0x42420060
 8001f80:	080066b0 	.word	0x080066b0

08001f84 <HAL_RCC_GetSysClockFreq>:
{
 8001f84:	b410      	push	{r4}
 8001f86:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f88:	4c18      	ldr	r4, [pc, #96]	; (8001fec <HAL_RCC_GetSysClockFreq+0x68>)
 8001f8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f8e:	f10d 0c18 	add.w	ip, sp, #24
 8001f92:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f96:	8a23      	ldrh	r3, [r4, #16]
 8001f98:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001fa0:	f003 020c 	and.w	r2, r3, #12
 8001fa4:	2a04      	cmp	r2, #4
 8001fa6:	d003      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x2c>
 8001fa8:	2a08      	cmp	r2, #8
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x34>
      sysclockfreq = HSI_VALUE;
 8001fac:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x2e>
      sysclockfreq = HSE_VALUE;
 8001fb0:	4811      	ldr	r0, [pc, #68]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x74>)
}
 8001fb2:	b007      	add	sp, #28
 8001fb4:	bc10      	pop	{r4}
 8001fb6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fb8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001fbc:	a906      	add	r1, sp, #24
 8001fbe:	440a      	add	r2, r1
 8001fc0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fc4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x60>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fd8:	4807      	ldr	r0, [pc, #28]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x74>)
 8001fda:	fb00 f002 	mul.w	r0, r0, r2
 8001fde:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fe2:	e7e6      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x74>)
 8001fe6:	fb00 f002 	mul.w	r0, r0, r2
 8001fea:	e7e2      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x2e>
 8001fec:	08006514 	.word	0x08006514
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	007a1200 	.word	0x007a1200
 8001ff8:	003d0900 	.word	0x003d0900

08001ffc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	f000 80ff 	beq.w	8002200 <HAL_RCC_ClockConfig+0x204>
{
 8002002:	b570      	push	{r4, r5, r6, lr}
 8002004:	4604      	mov	r4, r0
 8002006:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002008:	6803      	ldr	r3, [r0, #0]
 800200a:	f013 0f0f 	tst.w	r3, #15
 800200e:	d014      	beq.n	800203a <HAL_RCC_ClockConfig+0x3e>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002010:	2d02      	cmp	r5, #2
 8002012:	d818      	bhi.n	8002046 <HAL_RCC_ClockConfig+0x4a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b7c      	ldr	r3, [pc, #496]	; (8002208 <HAL_RCC_ClockConfig+0x20c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	42ab      	cmp	r3, r5
 800201e:	d218      	bcs.n	8002052 <HAL_RCC_ClockConfig+0x56>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002020:	4a79      	ldr	r2, [pc, #484]	; (8002208 <HAL_RCC_ClockConfig+0x20c>)
 8002022:	6813      	ldr	r3, [r2, #0]
 8002024:	f023 0307 	bic.w	r3, r3, #7
 8002028:	432b      	orrs	r3, r5
 800202a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202c:	6813      	ldr	r3, [r2, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	42ab      	cmp	r3, r5
 8002034:	d00d      	beq.n	8002052 <HAL_RCC_ClockConfig+0x56>
    return HAL_ERROR;
 8002036:	2001      	movs	r0, #1
}
 8002038:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800203a:	f44f 714e 	mov.w	r1, #824	; 0x338
 800203e:	4873      	ldr	r0, [pc, #460]	; (800220c <HAL_RCC_ClockConfig+0x210>)
 8002040:	f003 fd22 	bl	8005a88 <assert_failed>
 8002044:	e7e4      	b.n	8002010 <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002046:	f240 3139 	movw	r1, #825	; 0x339
 800204a:	4870      	ldr	r0, [pc, #448]	; (800220c <HAL_RCC_ClockConfig+0x210>)
 800204c:	f003 fd1c 	bl	8005a88 <assert_failed>
 8002050:	e7e0      	b.n	8002014 <HAL_RCC_ClockConfig+0x18>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	f013 0f02 	tst.w	r3, #2
 8002058:	d029      	beq.n	80020ae <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	f013 0f04 	tst.w	r3, #4
 800205e:	d004      	beq.n	800206a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4a6b      	ldr	r2, [pc, #428]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 8002062:	6853      	ldr	r3, [r2, #4]
 8002064:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002068:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	f013 0f08 	tst.w	r3, #8
 8002070:	d004      	beq.n	800207c <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002072:	4a67      	ldr	r2, [pc, #412]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 8002074:	6853      	ldr	r3, [r2, #4]
 8002076:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800207a:	6053      	str	r3, [r2, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800207c:	68a3      	ldr	r3, [r4, #8]
 800207e:	b17b      	cbz	r3, 80020a0 <HAL_RCC_ClockConfig+0xa4>
 8002080:	2b80      	cmp	r3, #128	; 0x80
 8002082:	d00d      	beq.n	80020a0 <HAL_RCC_ClockConfig+0xa4>
 8002084:	2b90      	cmp	r3, #144	; 0x90
 8002086:	d00b      	beq.n	80020a0 <HAL_RCC_ClockConfig+0xa4>
 8002088:	2ba0      	cmp	r3, #160	; 0xa0
 800208a:	d009      	beq.n	80020a0 <HAL_RCC_ClockConfig+0xa4>
 800208c:	2bb0      	cmp	r3, #176	; 0xb0
 800208e:	d007      	beq.n	80020a0 <HAL_RCC_ClockConfig+0xa4>
 8002090:	2bc0      	cmp	r3, #192	; 0xc0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0xa4>
 8002094:	2bd0      	cmp	r3, #208	; 0xd0
 8002096:	d003      	beq.n	80020a0 <HAL_RCC_ClockConfig+0xa4>
 8002098:	2be0      	cmp	r3, #224	; 0xe0
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0xa4>
 800209c:	2bf0      	cmp	r3, #240	; 0xf0
 800209e:	d132      	bne.n	8002106 <HAL_RCC_ClockConfig+0x10a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4a5b      	ldr	r2, [pc, #364]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 80020a2:	6853      	ldr	r3, [r2, #4]
 80020a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a8:	68a1      	ldr	r1, [r4, #8]
 80020aa:	430b      	orrs	r3, r1
 80020ac:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	f013 0f01 	tst.w	r3, #1
 80020b4:	d041      	beq.n	800213a <HAL_RCC_ClockConfig+0x13e>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80020b6:	6863      	ldr	r3, [r4, #4]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d82a      	bhi.n	8002112 <HAL_RCC_ClockConfig+0x116>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020bc:	6863      	ldr	r3, [r4, #4]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d02d      	beq.n	800211e <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d032      	beq.n	800212c <HAL_RCC_ClockConfig+0x130>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c6:	4a52      	ldr	r2, [pc, #328]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	f012 0f02 	tst.w	r2, #2
 80020ce:	f000 8099 	beq.w	8002204 <HAL_RCC_ClockConfig+0x208>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	494f      	ldr	r1, [pc, #316]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 80020d4:	684a      	ldr	r2, [r1, #4]
 80020d6:	f022 0203 	bic.w	r2, r2, #3
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80020de:	f7fe f877 	bl	80001d0 <HAL_GetTick>
 80020e2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e4:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	6862      	ldr	r2, [r4, #4]
 80020ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020f2:	d022      	beq.n	800213a <HAL_RCC_ClockConfig+0x13e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f4:	f7fe f86c 	bl	80001d0 <HAL_GetTick>
 80020f8:	1b80      	subs	r0, r0, r6
 80020fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80020fe:	4298      	cmp	r0, r3
 8002100:	d9f0      	bls.n	80020e4 <HAL_RCC_ClockConfig+0xe8>
        return HAL_TIMEOUT;
 8002102:	2003      	movs	r0, #3
 8002104:	e798      	b.n	8002038 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002106:	f240 315f 	movw	r1, #863	; 0x35f
 800210a:	4840      	ldr	r0, [pc, #256]	; (800220c <HAL_RCC_ClockConfig+0x210>)
 800210c:	f003 fcbc 	bl	8005a88 <assert_failed>
 8002110:	e7c6      	b.n	80020a0 <HAL_RCC_ClockConfig+0xa4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002112:	f240 3166 	movw	r1, #870	; 0x366
 8002116:	483d      	ldr	r0, [pc, #244]	; (800220c <HAL_RCC_ClockConfig+0x210>)
 8002118:	f003 fcb6 	bl	8005a88 <assert_failed>
 800211c:	e7ce      	b.n	80020bc <HAL_RCC_ClockConfig+0xc0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4a3c      	ldr	r2, [pc, #240]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002126:	d1d4      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_ERROR;
 8002128:	2001      	movs	r0, #1
 800212a:	e785      	b.n	8002038 <HAL_RCC_ClockConfig+0x3c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212c:	4a38      	ldr	r2, [pc, #224]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002134:	d1cd      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_ERROR;
 8002136:	2001      	movs	r0, #1
 8002138:	e77e      	b.n	8002038 <HAL_RCC_ClockConfig+0x3c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800213a:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_RCC_ClockConfig+0x20c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	42ab      	cmp	r3, r5
 8002144:	d90c      	bls.n	8002160 <HAL_RCC_ClockConfig+0x164>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4a30      	ldr	r2, [pc, #192]	; (8002208 <HAL_RCC_ClockConfig+0x20c>)
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f023 0307 	bic.w	r3, r3, #7
 800214e:	432b      	orrs	r3, r5
 8002150:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	6813      	ldr	r3, [r2, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	42ab      	cmp	r3, r5
 800215a:	d001      	beq.n	8002160 <HAL_RCC_ClockConfig+0x164>
    return HAL_ERROR;
 800215c:	2001      	movs	r0, #1
 800215e:	e76b      	b.n	8002038 <HAL_RCC_ClockConfig+0x3c>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	f013 0f04 	tst.w	r3, #4
 8002166:	d014      	beq.n	8002192 <HAL_RCC_ClockConfig+0x196>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002168:	68e3      	ldr	r3, [r4, #12]
 800216a:	b15b      	cbz	r3, 8002184 <HAL_RCC_ClockConfig+0x188>
 800216c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002170:	d008      	beq.n	8002184 <HAL_RCC_ClockConfig+0x188>
 8002172:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x188>
 8002178:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800217c:	d002      	beq.n	8002184 <HAL_RCC_ClockConfig+0x188>
 800217e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002182:	d131      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x1ec>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4a22      	ldr	r2, [pc, #136]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 8002186:	6853      	ldr	r3, [r2, #4]
 8002188:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800218c:	68e1      	ldr	r1, [r4, #12]
 800218e:	430b      	orrs	r3, r1
 8002190:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	f013 0f08 	tst.w	r3, #8
 8002198:	d015      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x1ca>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800219a:	6923      	ldr	r3, [r4, #16]
 800219c:	b15b      	cbz	r3, 80021b6 <HAL_RCC_ClockConfig+0x1ba>
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a2:	d008      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x1ba>
 80021a4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x1ba>
 80021aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021ae:	d002      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x1ba>
 80021b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021b4:	d11e      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b6:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 80021b8:	6853      	ldr	r3, [r2, #4]
 80021ba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021be:	6921      	ldr	r1, [r4, #16]
 80021c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021c4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c6:	f7ff fedd 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_ClockConfig+0x214>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021d2:	4a10      	ldr	r2, [pc, #64]	; (8002214 <HAL_RCC_ClockConfig+0x218>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	40d8      	lsrs	r0, r3
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_RCC_ClockConfig+0x21c>)
 80021da:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_RCC_ClockConfig+0x220>)
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	f7fd ffb4 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80021e4:	2000      	movs	r0, #0
 80021e6:	e727      	b.n	8002038 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80021e8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80021ec:	4807      	ldr	r0, [pc, #28]	; (800220c <HAL_RCC_ClockConfig+0x210>)
 80021ee:	f003 fc4b 	bl	8005a88 <assert_failed>
 80021f2:	e7c7      	b.n	8002184 <HAL_RCC_ClockConfig+0x188>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80021f4:	f240 31ab 	movw	r1, #939	; 0x3ab
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <HAL_RCC_ClockConfig+0x210>)
 80021fa:	f003 fc45 	bl	8005a88 <assert_failed>
 80021fe:	e7da      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ba>
    return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
}
 8002202:	4770      	bx	lr
        return HAL_ERROR;
 8002204:	2001      	movs	r0, #1
 8002206:	e717      	b.n	8002038 <HAL_RCC_ClockConfig+0x3c>
 8002208:	40022000 	.word	0x40022000
 800220c:	080066b0 	.word	0x080066b0
 8002210:	40021000 	.word	0x40021000
 8002214:	0800653c 	.word	0x0800653c
 8002218:	200001e0 	.word	0x200001e0
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_RCC_GetHCLKFreq>:
}
 8002220:	4b01      	ldr	r3, [pc, #4]	; (8002228 <HAL_RCC_GetHCLKFreq+0x8>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	200001e0 	.word	0x200001e0

0800222c <HAL_RCC_GetPCLK2Freq>:
{
 800222c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800222e:	f7ff fff7 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800223a:	4a03      	ldr	r2, [pc, #12]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
}
 800223e:	40d8      	lsrs	r0, r3
 8002240:	bd08      	pop	{r3, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	0800654c 	.word	0x0800654c

0800224c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800224c:	b570      	push	{r4, r5, r6, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	4604      	mov	r4, r0
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002252:	6803      	ldr	r3, [r0, #0]
 8002254:	f013 0f13 	tst.w	r3, #19
 8002258:	d06d      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0xea>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	f013 0f01 	tst.w	r3, #1
 8002260:	d03f      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002262:	6863      	ldr	r3, [r4, #4]
 8002264:	b143      	cbz	r3, 8002278 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8002266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226a:	d005      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d002      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8002272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002276:	d163      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002280:	d163      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b4e      	ldr	r3, [pc, #312]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800228a:	61da      	str	r2, [r3, #28]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002296:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022a0:	d055      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x102>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a2:	4b46      	ldr	r3, [pc, #280]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022aa:	d011      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80022ac:	6862      	ldr	r2, [r4, #4]
 80022ae:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d00c      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b6:	4a41      	ldr	r2, [pc, #260]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80022b8:	6a13      	ldr	r3, [r2, #32]
 80022ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022be:	4941      	ldr	r1, [pc, #260]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80022c0:	2601      	movs	r6, #1
 80022c2:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c4:	2600      	movs	r6, #0
 80022c6:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022c8:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022ca:	f013 0f01 	tst.w	r3, #1
 80022ce:	d152      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x12a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d0:	4a3a      	ldr	r2, [pc, #232]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80022d2:	6a13      	ldr	r3, [r2, #32]
 80022d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d8:	6861      	ldr	r1, [r4, #4]
 80022da:	430b      	orrs	r3, r1
 80022dc:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022de:	2d00      	cmp	r5, #0
 80022e0:	d15a      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f013 0f02 	tst.w	r3, #2
 80022e8:	d011      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80022ea:	68a3      	ldr	r3, [r4, #8]
 80022ec:	b143      	cbz	r3, 8002300 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80022ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f2:	d005      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80022f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f8:	d002      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80022fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80022fe:	d150      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x156>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002300:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002302:	6853      	ldr	r3, [r2, #4]
 8002304:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002308:	68a1      	ldr	r1, [r4, #8]
 800230a:	430b      	orrs	r3, r1
 800230c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	f013 0f10 	tst.w	r3, #16
 8002314:	d050      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8002316:	68e3      	ldr	r3, [r4, #12]
 8002318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231c:	d001      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800231e:	2b00      	cmp	r3, #0
 8002320:	d144      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002322:	4a26      	ldr	r2, [pc, #152]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002324:	6853      	ldr	r3, [r2, #4]
 8002326:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800232a:	68e1      	ldr	r1, [r4, #12]
 800232c:	430b      	orrs	r3, r1
 800232e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002330:	2000      	movs	r0, #0
}
 8002332:	b002      	add	sp, #8
 8002334:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002336:	216c      	movs	r1, #108	; 0x6c
 8002338:	4823      	ldr	r0, [pc, #140]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800233a:	f003 fba5 	bl	8005a88 <assert_failed>
 800233e:	e78c      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xe>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002340:	2172      	movs	r1, #114	; 0x72
 8002342:	4821      	ldr	r0, [pc, #132]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002344:	f003 fba0 	bl	8005a88 <assert_failed>
 8002348:	e796      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2500      	movs	r5, #0
 800234c:	e7a4      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002356:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002358:	f7fd ff3a 	bl	80001d0 <HAL_GetTick>
 800235c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002366:	d19c      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7fd ff32 	bl	80001d0 <HAL_GetTick>
 800236c:	1b80      	subs	r0, r0, r6
 800236e:	2864      	cmp	r0, #100	; 0x64
 8002370:	d9f5      	bls.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8002372:	2003      	movs	r0, #3
 8002374:	e7dd      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8002376:	f7fd ff2b 	bl	80001d0 <HAL_GetTick>
 800237a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f013 0f02 	tst.w	r3, #2
 8002384:	d1a4      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fd ff23 	bl	80001d0 <HAL_GetTick>
 800238a:	1b80      	subs	r0, r0, r6
 800238c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002390:	4298      	cmp	r0, r3
 8002392:	d9f3      	bls.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x130>
            return HAL_TIMEOUT;
 8002394:	2003      	movs	r0, #3
 8002396:	e7cc      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	69d3      	ldr	r3, [r2, #28]
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239e:	61d3      	str	r3, [r2, #28]
 80023a0:	e79f      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80023a2:	21b9      	movs	r1, #185	; 0xb9
 80023a4:	4808      	ldr	r0, [pc, #32]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80023a6:	f003 fb6f 	bl	8005a88 <assert_failed>
 80023aa:	e7a9      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80023ac:	f240 1115 	movw	r1, #277	; 0x115
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80023b2:	f003 fb69 	bl	8005a88 <assert_failed>
 80023b6:	e7b4      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  return HAL_OK;
 80023b8:	2000      	movs	r0, #0
 80023ba:	e7ba      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40007000 	.word	0x40007000
 80023c4:	42420440 	.word	0x42420440
 80023c8:	080066e8 	.word	0x080066e8

080023cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023cc:	b530      	push	{r4, r5, lr}
 80023ce:	b087      	sub	sp, #28
 80023d0:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023d2:	4c3d      	ldr	r4, [pc, #244]	; (80024c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80023d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023d8:	f10d 0c18 	add.w	ip, sp, #24
 80023dc:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023e0:	8a23      	ldrh	r3, [r4, #16]
 80023e2:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80023e6:	f015 0f13 	tst.w	r5, #19
 80023ea:	d007      	beq.n	80023fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>

  switch (PeriphClk)
 80023ec:	2d02      	cmp	r5, #2
 80023ee:	d056      	beq.n	800249e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80023f0:	2d10      	cmp	r5, #16
 80023f2:	d009      	beq.n	8002408 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80023f4:	2d01      	cmp	r5, #1
 80023f6:	d031      	beq.n	800245c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
  uint32_t temp_reg = 0U, frequency = 0U;
 80023f8:	2000      	movs	r0, #0
 80023fa:	e05a      	b.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80023fc:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8002400:	4832      	ldr	r0, [pc, #200]	; (80024cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8002402:	f003 fb41 	bl	8005a88 <assert_failed>
 8002406:	e7f1      	b.n	80023ec <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002408:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 800240a:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002412:	d050      	beq.n	80024b6 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002414:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8002418:	a906      	add	r1, sp, #24
 800241a:	440b      	add	r3, r1
 800241c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002420:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002424:	d016      	beq.n	8002454 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800242e:	440b      	add	r3, r1
 8002430:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8002436:	fbb3 f3f2 	udiv	r3, r3, r2
 800243a:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002446:	d134      	bne.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 8002448:	0040      	lsls	r0, r0, #1
 800244a:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 800244c:	fba3 3000 	umull	r3, r0, r3, r0
 8002450:	0840      	lsrs	r0, r0, #1
 8002452:	e02e      	b.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8002456:	fb03 f000 	mul.w	r0, r3, r0
 800245a:	e7f0      	b.n	800243e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 800245e:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002460:	f240 3202 	movw	r2, #770	; 0x302
 8002464:	401a      	ands	r2, r3
 8002466:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800246a:	d026      	beq.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800246c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002474:	d004      	beq.n	8002480 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800247a:	d009      	beq.n	8002490 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
  uint32_t temp_reg = 0U, frequency = 0U;
 800247c:	2000      	movs	r0, #0
 800247e:	e018      	b.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002480:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8002482:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002484:	f012 0f02 	tst.w	r2, #2
 8002488:	d0f5      	beq.n	8002476 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
        frequency = LSI_VALUE;
 800248a:	f649 4040 	movw	r0, #40000	; 0x9c40
 800248e:	e010      	b.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002498:	d112      	bne.n	80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  uint32_t temp_reg = 0U, frequency = 0U;
 800249a:	2000      	movs	r0, #0
 800249c:	e009      	b.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800249e:	f7ff fec5 	bl	800222c <HAL_RCC_GetPCLK2Freq>
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return (frequency);
}
 80024b2:	b007      	add	sp, #28
 80024b4:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 80024b6:	2000      	movs	r0, #0
 80024b8:	e7fb      	b.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
        frequency = LSE_VALUE;
 80024ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024be:	e7f8      	b.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
        frequency = HSE_VALUE / 128U;
 80024c0:	f647 2012 	movw	r0, #31250	; 0x7a12
  return (frequency);
 80024c4:	e7f5      	b.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80024c6:	bf00      	nop
 80024c8:	08006528 	.word	0x08006528
 80024cc:	080066e8 	.word	0x080066e8
 80024d0:	40021000 	.word	0x40021000
 80024d4:	003d0900 	.word	0x003d0900
 80024d8:	aaaaaaab 	.word	0xaaaaaaab

080024dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	4605      	mov	r5, r0
 80024e0:	460f      	mov	r7, r1
 80024e2:	4616      	mov	r6, r2
 80024e4:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024e6:	682b      	ldr	r3, [r5, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	ea37 0303 	bics.w	r3, r7, r3
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	42b3      	cmp	r3, r6
 80024f6:	d037      	beq.n	8002568 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80024fc:	d0f3      	beq.n	80024e6 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80024fe:	f7fd fe67 	bl	80001d0 <HAL_GetTick>
 8002502:	9b06      	ldr	r3, [sp, #24]
 8002504:	1ac0      	subs	r0, r0, r3
 8002506:	42a0      	cmp	r0, r4
 8002508:	d201      	bcs.n	800250e <SPI_WaitFlagStateUntilTimeout+0x32>
 800250a:	2c00      	cmp	r4, #0
 800250c:	d1eb      	bne.n	80024e6 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800250e:	682a      	ldr	r2, [r5, #0]
 8002510:	6853      	ldr	r3, [r2, #4]
 8002512:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002516:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002518:	686b      	ldr	r3, [r5, #4]
 800251a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800251e:	d00b      	beq.n	8002538 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002520:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002526:	d014      	beq.n	8002552 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002528:	2301      	movs	r3, #1
 800252a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800252e:	2300      	movs	r3, #0
 8002530:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8002534:	2003      	movs	r0, #3
 8002536:	e018      	b.n	800256a <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002538:	68ab      	ldr	r3, [r5, #8]
 800253a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253e:	d002      	beq.n	8002546 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002544:	d1ec      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8002546:	682a      	ldr	r2, [r5, #0]
 8002548:	6813      	ldr	r3, [r2, #0]
 800254a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e7e6      	b.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8002552:	682a      	ldr	r2, [r5, #0]
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	682a      	ldr	r2, [r5, #0]
 800255e:	6813      	ldr	r3, [r2, #0]
 8002560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e7df      	b.n	8002528 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8002568:	2000      	movs	r0, #0
}
 800256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800256c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b510      	push	{r4, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002572:	9200      	str	r2, [sp, #0]
 8002574:	460b      	mov	r3, r1
 8002576:	2200      	movs	r2, #0
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	f7ff ffaf 	bl	80024dc <SPI_WaitFlagStateUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	b910      	cbnz	r0, 8002588 <SPI_EndRxTxTransaction+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002582:	4618      	mov	r0, r3
 8002584:	b002      	add	sp, #8
 8002586:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002588:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800258a:	f043 0320 	orr.w	r3, r3, #32
 800258e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e7f6      	b.n	8002582 <SPI_EndRxTxTransaction+0x16>

08002594 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002594:	2800      	cmp	r0, #0
 8002596:	f000 80b9 	beq.w	800270c <HAL_SPI_Init+0x178>
{
 800259a:	b510      	push	{r4, lr}
 800259c:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800259e:	6803      	ldr	r3, [r0, #0]
 80025a0:	4a5b      	ldr	r2, [pc, #364]	; (8002710 <HAL_SPI_Init+0x17c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d008      	beq.n	80025b8 <HAL_SPI_Init+0x24>
 80025a6:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_SPI_Init+0x24>
 80025ae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80025b2:	4858      	ldr	r0, [pc, #352]	; (8002714 <HAL_SPI_Init+0x180>)
 80025b4:	f003 fa68 	bl	8005a88 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	b113      	cbz	r3, 80025c2 <HAL_SPI_Init+0x2e>
 80025bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c0:	d168      	bne.n	8002694 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80025c2:	68a3      	ldr	r3, [r4, #8]
 80025c4:	b12b      	cbz	r3, 80025d2 <HAL_SPI_Init+0x3e>
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d002      	beq.n	80025d2 <HAL_SPI_Init+0x3e>
 80025cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d0:	d166      	bne.n	80026a0 <HAL_SPI_Init+0x10c>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80025d2:	68e3      	ldr	r3, [r4, #12]
 80025d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d8:	d001      	beq.n	80025de <HAL_SPI_Init+0x4a>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d166      	bne.n	80026ac <HAL_SPI_Init+0x118>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80025de:	69a3      	ldr	r3, [r4, #24]
 80025e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e4:	d003      	beq.n	80025ee <HAL_SPI_Init+0x5a>
 80025e6:	b113      	cbz	r3, 80025ee <HAL_SPI_Init+0x5a>
 80025e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025ec:	d164      	bne.n	80026b8 <HAL_SPI_Init+0x124>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80025ee:	69e3      	ldr	r3, [r4, #28]
 80025f0:	b16b      	cbz	r3, 800260e <HAL_SPI_Init+0x7a>
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d00b      	beq.n	800260e <HAL_SPI_Init+0x7a>
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d009      	beq.n	800260e <HAL_SPI_Init+0x7a>
 80025fa:	2b18      	cmp	r3, #24
 80025fc:	d007      	beq.n	800260e <HAL_SPI_Init+0x7a>
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d005      	beq.n	800260e <HAL_SPI_Init+0x7a>
 8002602:	2b28      	cmp	r3, #40	; 0x28
 8002604:	d003      	beq.n	800260e <HAL_SPI_Init+0x7a>
 8002606:	2b30      	cmp	r3, #48	; 0x30
 8002608:	d001      	beq.n	800260e <HAL_SPI_Init+0x7a>
 800260a:	2b38      	cmp	r3, #56	; 0x38
 800260c:	d15a      	bne.n	80026c4 <HAL_SPI_Init+0x130>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800260e:	6a23      	ldr	r3, [r4, #32]
 8002610:	b10b      	cbz	r3, 8002616 <HAL_SPI_Init+0x82>
 8002612:	2b80      	cmp	r3, #128	; 0x80
 8002614:	d15c      	bne.n	80026d0 <HAL_SPI_Init+0x13c>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d15f      	bne.n	80026dc <HAL_SPI_Init+0x148>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800261c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800261e:	b933      	cbnz	r3, 800262e <HAL_SPI_Init+0x9a>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002620:	6923      	ldr	r3, [r4, #16]
 8002622:	b10b      	cbz	r3, 8002628 <HAL_SPI_Init+0x94>
 8002624:	2b02      	cmp	r3, #2
 8002626:	d15f      	bne.n	80026e8 <HAL_SPI_Init+0x154>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002628:	6963      	ldr	r3, [r4, #20]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d862      	bhi.n	80026f4 <HAL_SPI_Init+0x160>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002632:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002636:	2b00      	cmp	r3, #0
 8002638:	d062      	beq.n	8002700 <HAL_SPI_Init+0x16c>
  hspi->State = HAL_SPI_STATE_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002648:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800264a:	6863      	ldr	r3, [r4, #4]
 800264c:	68a2      	ldr	r2, [r4, #8]
 800264e:	4313      	orrs	r3, r2
 8002650:	68e2      	ldr	r2, [r4, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	6922      	ldr	r2, [r4, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	6962      	ldr	r2, [r4, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	69a2      	ldr	r2, [r4, #24]
 800265e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002662:	4313      	orrs	r3, r2
 8002664:	69e2      	ldr	r2, [r4, #28]
 8002666:	4313      	orrs	r3, r2
 8002668:	6a22      	ldr	r2, [r4, #32]
 800266a:	4313      	orrs	r3, r2
 800266c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800266e:	6822      	ldr	r2, [r4, #0]
 8002670:	430b      	orrs	r3, r1
 8002672:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002674:	8b63      	ldrh	r3, [r4, #26]
 8002676:	6822      	ldr	r2, [r4, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	69d3      	ldr	r3, [r2, #28]
 8002682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002686:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002688:	2000      	movs	r0, #0
 800268a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800268c:	2301      	movs	r3, #1
 800268e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002692:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002694:	f240 1159 	movw	r1, #345	; 0x159
 8002698:	481e      	ldr	r0, [pc, #120]	; (8002714 <HAL_SPI_Init+0x180>)
 800269a:	f003 f9f5 	bl	8005a88 <assert_failed>
 800269e:	e790      	b.n	80025c2 <HAL_SPI_Init+0x2e>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80026a0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80026a4:	481b      	ldr	r0, [pc, #108]	; (8002714 <HAL_SPI_Init+0x180>)
 80026a6:	f003 f9ef 	bl	8005a88 <assert_failed>
 80026aa:	e792      	b.n	80025d2 <HAL_SPI_Init+0x3e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80026ac:	f240 115b 	movw	r1, #347	; 0x15b
 80026b0:	4818      	ldr	r0, [pc, #96]	; (8002714 <HAL_SPI_Init+0x180>)
 80026b2:	f003 f9e9 	bl	8005a88 <assert_failed>
 80026b6:	e792      	b.n	80025de <HAL_SPI_Init+0x4a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80026b8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80026bc:	4815      	ldr	r0, [pc, #84]	; (8002714 <HAL_SPI_Init+0x180>)
 80026be:	f003 f9e3 	bl	8005a88 <assert_failed>
 80026c2:	e794      	b.n	80025ee <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80026c4:	f240 115d 	movw	r1, #349	; 0x15d
 80026c8:	4812      	ldr	r0, [pc, #72]	; (8002714 <HAL_SPI_Init+0x180>)
 80026ca:	f003 f9dd 	bl	8005a88 <assert_failed>
 80026ce:	e79e      	b.n	800260e <HAL_SPI_Init+0x7a>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80026d0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80026d4:	480f      	ldr	r0, [pc, #60]	; (8002714 <HAL_SPI_Init+0x180>)
 80026d6:	f003 f9d7 	bl	8005a88 <assert_failed>
 80026da:	e79c      	b.n	8002616 <HAL_SPI_Init+0x82>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80026dc:	f240 1161 	movw	r1, #353	; 0x161
 80026e0:	480c      	ldr	r0, [pc, #48]	; (8002714 <HAL_SPI_Init+0x180>)
 80026e2:	f003 f9d1 	bl	8005a88 <assert_failed>
 80026e6:	e799      	b.n	800261c <HAL_SPI_Init+0x88>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80026e8:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80026ec:	4809      	ldr	r0, [pc, #36]	; (8002714 <HAL_SPI_Init+0x180>)
 80026ee:	f003 f9cb 	bl	8005a88 <assert_failed>
 80026f2:	e799      	b.n	8002628 <HAL_SPI_Init+0x94>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80026f4:	f240 1165 	movw	r1, #357	; 0x165
 80026f8:	4806      	ldr	r0, [pc, #24]	; (8002714 <HAL_SPI_Init+0x180>)
 80026fa:	f003 f9c5 	bl	8005a88 <assert_failed>
 80026fe:	e796      	b.n	800262e <HAL_SPI_Init+0x9a>
    hspi->Lock = HAL_UNLOCKED;
 8002700:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002704:	4620      	mov	r0, r4
 8002706:	f003 f9e5 	bl	8005ad4 <HAL_SPI_MspInit>
 800270a:	e796      	b.n	800263a <HAL_SPI_Init+0xa6>
    return HAL_ERROR;
 800270c:	2001      	movs	r0, #1
}
 800270e:	4770      	bx	lr
 8002710:	40013000 	.word	0x40013000
 8002714:	08006724 	.word	0x08006724

08002718 <HAL_SPI_Transmit>:
{
 8002718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	4604      	mov	r4, r0
 8002720:	4688      	mov	r8, r1
 8002722:	4617      	mov	r7, r2
 8002724:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8002726:	6883      	ldr	r3, [r0, #8]
 8002728:	b113      	cbz	r3, 8002730 <HAL_SPI_Transmit+0x18>
 800272a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272e:	d119      	bne.n	8002764 <HAL_SPI_Transmit+0x4c>
  __HAL_LOCK(hspi);
 8002730:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002734:	2b01      	cmp	r3, #1
 8002736:	f000 80c5 	beq.w	80028c4 <HAL_SPI_Transmit+0x1ac>
 800273a:	2301      	movs	r3, #1
 800273c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002740:	f7fd fd46 	bl	80001d0 <HAL_GetTick>
 8002744:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002746:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d00f      	beq.n	8002770 <HAL_SPI_Transmit+0x58>
    errorcode = HAL_BUSY;
 8002750:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002752:	2301      	movs	r3, #1
 8002754:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002758:	2300      	movs	r3, #0
 800275a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800275e:	b002      	add	sp, #8
 8002760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8002764:	f240 310a 	movw	r1, #778	; 0x30a
 8002768:	4857      	ldr	r0, [pc, #348]	; (80028c8 <HAL_SPI_Transmit+0x1b0>)
 800276a:	f003 f98d 	bl	8005a88 <assert_failed>
 800276e:	e7df      	b.n	8002730 <HAL_SPI_Transmit+0x18>
  if ((pData == NULL) || (Size == 0U))
 8002770:	f1b8 0f00 	cmp.w	r8, #0
 8002774:	f000 8098 	beq.w	80028a8 <HAL_SPI_Transmit+0x190>
 8002778:	2f00      	cmp	r7, #0
 800277a:	f000 8097 	beq.w	80028ac <HAL_SPI_Transmit+0x194>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800277e:	2303      	movs	r3, #3
 8002780:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002784:	2300      	movs	r3, #0
 8002786:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002788:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800278c:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800278e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002790:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002792:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002794:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002796:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002798:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279a:	68a3      	ldr	r3, [r4, #8]
 800279c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a0:	d01c      	beq.n	80027dc <HAL_SPI_Transmit+0xc4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027aa:	d103      	bne.n	80027b4 <HAL_SPI_Transmit+0x9c>
    __HAL_SPI_ENABLE(hspi);
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027b4:	68e3      	ldr	r3, [r4, #12]
 80027b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ba:	d015      	beq.n	80027e8 <HAL_SPI_Transmit+0xd0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027bc:	6863      	ldr	r3, [r4, #4]
 80027be:	b10b      	cbz	r3, 80027c4 <HAL_SPI_Transmit+0xac>
 80027c0:	2f01      	cmp	r7, #1
 80027c2:	d149      	bne.n	8002858 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027ce:	3301      	adds	r3, #1
 80027d0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80027d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80027da:	e03d      	b.n	8002858 <HAL_SPI_Transmit+0x140>
    SPI_1LINE_TX(hspi);
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e7dc      	b.n	80027a2 <HAL_SPI_Transmit+0x8a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e8:	6863      	ldr	r3, [r4, #4]
 80027ea:	b10b      	cbz	r3, 80027f0 <HAL_SPI_Transmit+0xd8>
 80027ec:	2f01      	cmp	r7, #1
 80027ee:	d115      	bne.n	800281c <HAL_SPI_Transmit+0x104>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	8812      	ldrh	r2, [r2, #0]
 80027f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027fa:	3302      	adds	r3, #2
 80027fc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80027fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002800:	3b01      	subs	r3, #1
 8002802:	b29b      	uxth	r3, r3
 8002804:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002806:	e009      	b.n	800281c <HAL_SPI_Transmit+0x104>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002808:	f7fd fce2 	bl	80001d0 <HAL_GetTick>
 800280c:	1b80      	subs	r0, r0, r6
 800280e:	42a8      	cmp	r0, r5
 8002810:	d302      	bcc.n	8002818 <HAL_SPI_Transmit+0x100>
 8002812:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002816:	d14b      	bne.n	80028b0 <HAL_SPI_Transmit+0x198>
 8002818:	2d00      	cmp	r5, #0
 800281a:	d04b      	beq.n	80028b4 <HAL_SPI_Transmit+0x19c>
    while (hspi->TxXferCount > 0U)
 800281c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d02c      	beq.n	800287e <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	f012 0f02 	tst.w	r2, #2
 800282c:	d0ec      	beq.n	8002808 <HAL_SPI_Transmit+0xf0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800282e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002830:	8812      	ldrh	r2, [r2, #0]
 8002832:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002834:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002836:	3302      	adds	r3, #2
 8002838:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800283a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800283c:	3b01      	subs	r3, #1
 800283e:	b29b      	uxth	r3, r3
 8002840:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002842:	e7eb      	b.n	800281c <HAL_SPI_Transmit+0x104>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002844:	f7fd fcc4 	bl	80001d0 <HAL_GetTick>
 8002848:	1b80      	subs	r0, r0, r6
 800284a:	42a8      	cmp	r0, r5
 800284c:	d302      	bcc.n	8002854 <HAL_SPI_Transmit+0x13c>
 800284e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002852:	d131      	bne.n	80028b8 <HAL_SPI_Transmit+0x1a0>
 8002854:	2d00      	cmp	r5, #0
 8002856:	d031      	beq.n	80028bc <HAL_SPI_Transmit+0x1a4>
    while (hspi->TxXferCount > 0U)
 8002858:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800285a:	b29b      	uxth	r3, r3
 800285c:	b17b      	cbz	r3, 800287e <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	f012 0f02 	tst.w	r2, #2
 8002866:	d0ed      	beq.n	8002844 <HAL_SPI_Transmit+0x12c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002868:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800286e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002870:	3301      	adds	r3, #1
 8002872:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002874:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002876:	3b01      	subs	r3, #1
 8002878:	b29b      	uxth	r3, r3
 800287a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800287c:	e7ec      	b.n	8002858 <HAL_SPI_Transmit+0x140>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800287e:	4632      	mov	r2, r6
 8002880:	4629      	mov	r1, r5
 8002882:	4620      	mov	r0, r4
 8002884:	f7ff fe72 	bl	800256c <SPI_EndRxTxTransaction>
 8002888:	b108      	cbz	r0, 800288e <HAL_SPI_Transmit+0x176>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800288a:	2320      	movs	r3, #32
 800288c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800288e:	68a3      	ldr	r3, [r4, #8]
 8002890:	b933      	cbnz	r3, 80028a0 <HAL_SPI_Transmit+0x188>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	9201      	str	r2, [sp, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028a2:	b96b      	cbnz	r3, 80028c0 <HAL_SPI_Transmit+0x1a8>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028a4:	2000      	movs	r0, #0
 80028a6:	e754      	b.n	8002752 <HAL_SPI_Transmit+0x3a>
    errorcode = HAL_ERROR;
 80028a8:	2001      	movs	r0, #1
 80028aa:	e752      	b.n	8002752 <HAL_SPI_Transmit+0x3a>
 80028ac:	2001      	movs	r0, #1
 80028ae:	e750      	b.n	8002752 <HAL_SPI_Transmit+0x3a>
          errorcode = HAL_TIMEOUT;
 80028b0:	2003      	movs	r0, #3
 80028b2:	e74e      	b.n	8002752 <HAL_SPI_Transmit+0x3a>
 80028b4:	2003      	movs	r0, #3
 80028b6:	e74c      	b.n	8002752 <HAL_SPI_Transmit+0x3a>
          errorcode = HAL_TIMEOUT;
 80028b8:	2003      	movs	r0, #3
 80028ba:	e74a      	b.n	8002752 <HAL_SPI_Transmit+0x3a>
 80028bc:	2003      	movs	r0, #3
 80028be:	e748      	b.n	8002752 <HAL_SPI_Transmit+0x3a>
    errorcode = HAL_ERROR;
 80028c0:	2001      	movs	r0, #1
 80028c2:	e746      	b.n	8002752 <HAL_SPI_Transmit+0x3a>
  __HAL_LOCK(hspi);
 80028c4:	2002      	movs	r0, #2
 80028c6:	e74a      	b.n	800275e <HAL_SPI_Transmit+0x46>
 80028c8:	08006724 	.word	0x08006724

080028cc <HAL_SPI_TransmitReceive>:
{
 80028cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028d0:	b083      	sub	sp, #12
 80028d2:	4604      	mov	r4, r0
 80028d4:	460f      	mov	r7, r1
 80028d6:	4690      	mov	r8, r2
 80028d8:	461e      	mov	r6, r3
 80028da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80028dc:	6883      	ldr	r3, [r0, #8]
 80028de:	b9f3      	cbnz	r3, 800291e <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 80028e0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	f000 810e 	beq.w	8002b06 <HAL_SPI_TransmitReceive+0x23a>
 80028ea:	2301      	movs	r3, #1
 80028ec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80028f0:	f7fd fc6e 	bl	80001d0 <HAL_GetTick>
 80028f4:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 80028f6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80028fa:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80028fc:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d01b      	beq.n	800293a <HAL_SPI_TransmitReceive+0x6e>
 8002902:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002906:	d010      	beq.n	800292a <HAL_SPI_TransmitReceive+0x5e>
    errorcode = HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800290a:	2201      	movs	r2, #1
 800290c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002910:	2200      	movs	r2, #0
 8002912:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8002916:	4618      	mov	r0, r3
 8002918:	b003      	add	sp, #12
 800291a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800291e:	f240 4182 	movw	r1, #1154	; 0x482
 8002922:	487a      	ldr	r0, [pc, #488]	; (8002b0c <HAL_SPI_TransmitReceive+0x240>)
 8002924:	f003 f8b0 	bl	8005a88 <assert_failed>
 8002928:	e7da      	b.n	80028e0 <HAL_SPI_TransmitReceive+0x14>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800292a:	68a2      	ldr	r2, [r4, #8]
 800292c:	2a00      	cmp	r2, #0
 800292e:	f040 80dc 	bne.w	8002aea <HAL_SPI_TransmitReceive+0x21e>
 8002932:	2b04      	cmp	r3, #4
 8002934:	d001      	beq.n	800293a <HAL_SPI_TransmitReceive+0x6e>
    errorcode = HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	e7e7      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800293a:	2f00      	cmp	r7, #0
 800293c:	f000 80d7 	beq.w	8002aee <HAL_SPI_TransmitReceive+0x222>
 8002940:	f1b8 0f00 	cmp.w	r8, #0
 8002944:	f000 80d5 	beq.w	8002af2 <HAL_SPI_TransmitReceive+0x226>
 8002948:	2e00      	cmp	r6, #0
 800294a:	f000 80d4 	beq.w	8002af6 <HAL_SPI_TransmitReceive+0x22a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800294e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b04      	cmp	r3, #4
 8002956:	d002      	beq.n	800295e <HAL_SPI_TransmitReceive+0x92>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002958:	2305      	movs	r3, #5
 800295a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800295e:	2300      	movs	r3, #0
 8002960:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002962:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002966:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002968:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800296a:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800296c:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800296e:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8002970:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002972:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	f012 0f40 	tst.w	r2, #64	; 0x40
 800297c:	d103      	bne.n	8002986 <HAL_SPI_TransmitReceive+0xba>
    __HAL_SPI_ENABLE(hspi);
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002984:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002986:	68e3      	ldr	r3, [r4, #12]
 8002988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800298c:	d010      	beq.n	80029b0 <HAL_SPI_TransmitReceive+0xe4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800298e:	6863      	ldr	r3, [r4, #4]
 8002990:	b10b      	cbz	r3, 8002996 <HAL_SPI_TransmitReceive+0xca>
 8002992:	2e01      	cmp	r6, #1
 8002994:	d10a      	bne.n	80029ac <HAL_SPI_TransmitReceive+0xe0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002996:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800299e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029a0:	3301      	adds	r3, #1
 80029a2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80029a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80029ac:	2601      	movs	r6, #1
 80029ae:	e068      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x1b6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029b0:	6863      	ldr	r3, [r4, #4]
 80029b2:	b10b      	cbz	r3, 80029b8 <HAL_SPI_TransmitReceive+0xec>
 80029b4:	2e01      	cmp	r6, #1
 80029b6:	d10a      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x102>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	8812      	ldrh	r2, [r2, #0]
 80029be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029c2:	3302      	adds	r3, #2
 80029c4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80029c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80029ce:	2601      	movs	r6, #1
 80029d0:	e01b      	b.n	8002a0a <HAL_SPI_TransmitReceive+0x13e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	f012 0f01 	tst.w	r2, #1
 80029da:	d00d      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x12c>
 80029dc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80029de:	b292      	uxth	r2, r2
 80029e0:	b152      	cbz	r2, 80029f8 <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ea:	3302      	adds	r3, #2
 80029ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80029ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80029f6:	2601      	movs	r6, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029f8:	f7fd fbea 	bl	80001d0 <HAL_GetTick>
 80029fc:	eba0 0009 	sub.w	r0, r0, r9
 8002a00:	42a8      	cmp	r0, r5
 8002a02:	d302      	bcc.n	8002a0a <HAL_SPI_TransmitReceive+0x13e>
 8002a04:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002a08:	d177      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x22e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b91b      	cbnz	r3, 8002a18 <HAL_SPI_TransmitReceive+0x14c>
 8002a10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d051      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x1f0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	f012 0f02 	tst.w	r2, #2
 8002a20:	d0d7      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x106>
 8002a22:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002a24:	b292      	uxth	r2, r2
 8002a26:	2a00      	cmp	r2, #0
 8002a28:	d0d3      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x106>
 8002a2a:	2e00      	cmp	r6, #0
 8002a2c:	d0d1      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x106>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a30:	8812      	ldrh	r2, [r2, #0]
 8002a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a36:	3302      	adds	r3, #2
 8002a38:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002a3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002a42:	2600      	movs	r6, #0
 8002a44:	e7c5      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x106>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	f012 0f01 	tst.w	r2, #1
 8002a4e:	d00d      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x1a0>
 8002a50:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002a52:	b292      	uxth	r2, r2
 8002a54:	b152      	cbz	r2, 8002a6c <HAL_SPI_TransmitReceive+0x1a0>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a5e:	3301      	adds	r3, #1
 8002a60:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002a62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002a6a:	2601      	movs	r6, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a6c:	f7fd fbb0 	bl	80001d0 <HAL_GetTick>
 8002a70:	eba0 0009 	sub.w	r0, r0, r9
 8002a74:	42a8      	cmp	r0, r5
 8002a76:	d302      	bcc.n	8002a7e <HAL_SPI_TransmitReceive+0x1b2>
 8002a78:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002a7c:	d13f      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x232>
 8002a7e:	2d00      	cmp	r5, #0
 8002a80:	d03f      	beq.n	8002b02 <HAL_SPI_TransmitReceive+0x236>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b913      	cbnz	r3, 8002a8e <HAL_SPI_TransmitReceive+0x1c2>
 8002a88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b1b3      	cbz	r3, 8002abc <HAL_SPI_TransmitReceive+0x1f0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	f012 0f02 	tst.w	r2, #2
 8002a96:	d0d6      	beq.n	8002a46 <HAL_SPI_TransmitReceive+0x17a>
 8002a98:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	2a00      	cmp	r2, #0
 8002a9e:	d0d2      	beq.n	8002a46 <HAL_SPI_TransmitReceive+0x17a>
 8002aa0:	2e00      	cmp	r6, #0
 8002aa2:	d0d0      	beq.n	8002a46 <HAL_SPI_TransmitReceive+0x17a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002aa4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002aaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002aac:	3301      	adds	r3, #1
 8002aae:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002ab0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002ab8:	2600      	movs	r6, #0
 8002aba:	e7c4      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x17a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002abc:	464a      	mov	r2, r9
 8002abe:	4629      	mov	r1, r5
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7ff fd53 	bl	800256c <SPI_EndRxTxTransaction>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	b118      	cbz	r0, 8002ad2 <HAL_SPI_TransmitReceive+0x206>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aca:	2320      	movs	r3, #32
 8002acc:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
    goto error;
 8002ad0:	e71b      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad2:	68a2      	ldr	r2, [r4, #8]
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	f47f af18 	bne.w	800290a <HAL_SPI_TransmitReceive+0x3e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ada:	9201      	str	r2, [sp, #4]
 8002adc:	6822      	ldr	r2, [r4, #0]
 8002ade:	68d1      	ldr	r1, [r2, #12]
 8002ae0:	9101      	str	r1, [sp, #4]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	9201      	str	r2, [sp, #4]
 8002ae6:	9a01      	ldr	r2, [sp, #4]
 8002ae8:	e70f      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
    errorcode = HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
 8002aec:	e70d      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
    errorcode = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e70b      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e709      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e707      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
        errorcode = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e705      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
        errorcode = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e703      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e701      	b.n	800290a <HAL_SPI_TransmitReceive+0x3e>
  __HAL_LOCK(hspi);
 8002b06:	2302      	movs	r3, #2
 8002b08:	e705      	b.n	8002916 <HAL_SPI_TransmitReceive+0x4a>
 8002b0a:	bf00      	nop
 8002b0c:	08006724 	.word	0x08006724

08002b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b12:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b14:	6a04      	ldr	r4, [r0, #32]
 8002b16:	f024 0401 	bic.w	r4, r4, #1
 8002b1a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b1e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b22:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b26:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002b2a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b2e:	6203      	str	r3, [r0, #32]
}
 8002b30:	bc10      	pop	{r4}
 8002b32:	4770      	bx	lr

08002b34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b34:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b36:	6a03      	ldr	r3, [r0, #32]
 8002b38:	f023 0310 	bic.w	r3, r3, #16
 8002b3c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002b40:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b42:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b46:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b4e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b52:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b54:	6203      	str	r3, [r0, #32]
}
 8002b56:	bc10      	pop	{r4}
 8002b58:	4770      	bx	lr

08002b5a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b5a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b60:	4319      	orrs	r1, r3
 8002b62:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b66:	6081      	str	r1, [r0, #8]
}
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_TIM_Base_Start_IT>:
{
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002b70:	6803      	ldr	r3, [r0, #0]
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_TIM_Base_Start_IT+0x50>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00f      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x2c>
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d00c      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x2c>
 8002b7e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d008      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x2c>
 8002b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x2c>
 8002b8e:	f240 11b9 	movw	r1, #441	; 0x1b9
 8002b92:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <HAL_TIM_Base_Start_IT+0x54>)
 8002b94:	f002 ff78 	bl	8005a88 <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b98:	6822      	ldr	r2, [r4, #0]
 8002b9a:	68d3      	ldr	r3, [r2, #12]
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	6893      	ldr	r3, [r2, #8]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_Base_Start_IT+0x4a>
    __HAL_TIM_ENABLE(htim);
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]
}
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	bd10      	pop	{r4, pc}
 8002bba:	bf00      	nop
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	0800675c 	.word	0x0800675c

08002bc4 <HAL_TIM_PeriodElapsedCallback>:
}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_TriggerCallback>:
}
 8002bca:	4770      	bx	lr

08002bcc <HAL_TIM_IRQHandler>:
{
 8002bcc:	b510      	push	{r4, lr}
 8002bce:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd0:	6803      	ldr	r3, [r0, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	f012 0f02 	tst.w	r2, #2
 8002bd8:	d011      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	f012 0f02 	tst.w	r2, #2
 8002be0:	d00d      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002be2:	f06f 0202 	mvn.w	r2, #2
 8002be6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be8:	2301      	movs	r3, #1
 8002bea:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bec:	6803      	ldr	r3, [r0, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f013 0f03 	tst.w	r3, #3
 8002bf4:	d070      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	f002 fffb 	bl	8005bf0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	f012 0f04 	tst.w	r2, #4
 8002c06:	d012      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	f012 0f04 	tst.w	r2, #4
 8002c0e:	d00e      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c10:	f06f 0204 	mvn.w	r2, #4
 8002c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c16:	2302      	movs	r3, #2
 8002c18:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c22:	d05f      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c24:	4620      	mov	r0, r4
 8002c26:	f002 ffe3 	bl	8005bf0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	f012 0f08 	tst.w	r2, #8
 8002c36:	d012      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	f012 0f08 	tst.w	r2, #8
 8002c3e:	d00e      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c40:	f06f 0208 	mvn.w	r2, #8
 8002c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c46:	2304      	movs	r3, #4
 8002c48:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f013 0f03 	tst.w	r3, #3
 8002c52:	d04e      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c54:	4620      	mov	r0, r4
 8002c56:	f002 ffcb 	bl	8005bf0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	f012 0f10 	tst.w	r2, #16
 8002c66:	d012      	beq.n	8002c8e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	f012 0f10 	tst.w	r2, #16
 8002c6e:	d00e      	beq.n	8002c8e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c70:	f06f 0210 	mvn.w	r2, #16
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c76:	2308      	movs	r3, #8
 8002c78:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c82:	d03d      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c84:	4620      	mov	r0, r4
 8002c86:	f002 ffb3 	bl	8005bf0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	f012 0f01 	tst.w	r2, #1
 8002c96:	d003      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	f012 0f01 	tst.w	r2, #1
 8002c9e:	d136      	bne.n	8002d0e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cb0:	d134      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002cba:	d003      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002cc2:	d132      	bne.n	8002d2a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	f012 0f20 	tst.w	r2, #32
 8002ccc:	d003      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	f012 0f20 	tst.w	r2, #32
 8002cd4:	d130      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x16c>
}
 8002cd6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd8:	f7ff ff75 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7ff ff73 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ce2:	e78a      	b.n	8002bfa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7ff ff6e 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7ff ff6c 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002cf0:	e79b      	b.n	8002c2a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff ff67 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7ff ff65 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002cfe:	e7ac      	b.n	8002c5a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d00:	4620      	mov	r0, r4
 8002d02:	f7ff ff60 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff ff5e 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d0c:	e7bd      	b.n	8002c8a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d0e:	f06f 0201 	mvn.w	r2, #1
 8002d12:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7ff ff55 	bl	8002bc4 <HAL_TIM_PeriodElapsedCallback>
 8002d1a:	e7c1      	b.n	8002ca0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002d22:	4620      	mov	r0, r4
 8002d24:	f000 fc5f 	bl	80035e6 <HAL_TIMEx_BreakCallback>
 8002d28:	e7c3      	b.n	8002cb2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7ff ff4a 	bl	8002bca <HAL_TIM_TriggerCallback>
 8002d36:	e7c5      	b.n	8002cc4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d38:	f06f 0220 	mvn.w	r2, #32
 8002d3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f000 fc50 	bl	80035e4 <HAL_TIMEx_CommutCallback>
}
 8002d44:	e7c7      	b.n	8002cd6 <HAL_TIM_IRQHandler+0x10a>
	...

08002d48 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002d48:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d4a:	4a1b      	ldr	r2, [pc, #108]	; (8002db8 <TIM_Base_SetConfig+0x70>)
 8002d4c:	4290      	cmp	r0, r2
 8002d4e:	d00a      	beq.n	8002d66 <TIM_Base_SetConfig+0x1e>
 8002d50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d54:	d007      	beq.n	8002d66 <TIM_Base_SetConfig+0x1e>
 8002d56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002d5a:	4290      	cmp	r0, r2
 8002d5c:	d003      	beq.n	8002d66 <TIM_Base_SetConfig+0x1e>
 8002d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d62:	4290      	cmp	r0, r2
 8002d64:	d103      	bne.n	8002d6e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d6a:	684a      	ldr	r2, [r1, #4]
 8002d6c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <TIM_Base_SetConfig+0x70>)
 8002d70:	4290      	cmp	r0, r2
 8002d72:	d00a      	beq.n	8002d8a <TIM_Base_SetConfig+0x42>
 8002d74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d78:	d007      	beq.n	8002d8a <TIM_Base_SetConfig+0x42>
 8002d7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002d7e:	4290      	cmp	r0, r2
 8002d80:	d003      	beq.n	8002d8a <TIM_Base_SetConfig+0x42>
 8002d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d86:	4290      	cmp	r0, r2
 8002d88:	d103      	bne.n	8002d92 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	68ca      	ldr	r2, [r1, #12]
 8002d90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d96:	694a      	ldr	r2, [r1, #20]
 8002d98:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002d9a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d9c:	688b      	ldr	r3, [r1, #8]
 8002d9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002da0:	680b      	ldr	r3, [r1, #0]
 8002da2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <TIM_Base_SetConfig+0x70>)
 8002da6:	4298      	cmp	r0, r3
 8002da8:	d002      	beq.n	8002db0 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8002daa:	2301      	movs	r3, #1
 8002dac:	6143      	str	r3, [r0, #20]
}
 8002dae:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002db0:	690b      	ldr	r3, [r1, #16]
 8002db2:	6303      	str	r3, [r0, #48]	; 0x30
 8002db4:	e7f9      	b.n	8002daa <TIM_Base_SetConfig+0x62>
 8002db6:	bf00      	nop
 8002db8:	40012c00 	.word	0x40012c00

08002dbc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d052      	beq.n	8002e66 <HAL_TIM_Base_Init+0xaa>
{
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002dc4:	6803      	ldr	r3, [r0, #0]
 8002dc6:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <HAL_TIM_Base_Init+0xb0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00f      	beq.n	8002dec <HAL_TIM_Base_Init+0x30>
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd0:	d00c      	beq.n	8002dec <HAL_TIM_Base_Init+0x30>
 8002dd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d008      	beq.n	8002dec <HAL_TIM_Base_Init+0x30>
 8002dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <HAL_TIM_Base_Init+0x30>
 8002de2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8002de6:	4822      	ldr	r0, [pc, #136]	; (8002e70 <HAL_TIM_Base_Init+0xb4>)
 8002de8:	f002 fe4e 	bl	8005a88 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002dec:	68a3      	ldr	r3, [r4, #8]
 8002dee:	b13b      	cbz	r3, 8002e00 <HAL_TIM_Base_Init+0x44>
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d005      	beq.n	8002e00 <HAL_TIM_Base_Init+0x44>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d003      	beq.n	8002e00 <HAL_TIM_Base_Init+0x44>
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d001      	beq.n	8002e00 <HAL_TIM_Base_Init+0x44>
 8002dfc:	2b60      	cmp	r3, #96	; 0x60
 8002dfe:	d11a      	bne.n	8002e36 <HAL_TIM_Base_Init+0x7a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002e00:	6923      	ldr	r3, [r4, #16]
 8002e02:	b12b      	cbz	r3, 8002e10 <HAL_TIM_Base_Init+0x54>
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d002      	beq.n	8002e10 <HAL_TIM_Base_Init+0x54>
 8002e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0e:	d118      	bne.n	8002e42 <HAL_TIM_Base_Init+0x86>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002e10:	69a3      	ldr	r3, [r4, #24]
 8002e12:	b10b      	cbz	r3, 8002e18 <HAL_TIM_Base_Init+0x5c>
 8002e14:	2b80      	cmp	r3, #128	; 0x80
 8002e16:	d11a      	bne.n	8002e4e <HAL_TIM_Base_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e18:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002e1c:	b1eb      	cbz	r3, 8002e5a <HAL_TIM_Base_Init+0x9e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e24:	1d21      	adds	r1, r4, #4
 8002e26:	6820      	ldr	r0, [r4, #0]
 8002e28:	f7ff ff8e 	bl	8002d48 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002e32:	2000      	movs	r0, #0
}
 8002e34:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002e36:	f240 1113 	movw	r1, #275	; 0x113
 8002e3a:	480d      	ldr	r0, [pc, #52]	; (8002e70 <HAL_TIM_Base_Init+0xb4>)
 8002e3c:	f002 fe24 	bl	8005a88 <assert_failed>
 8002e40:	e7de      	b.n	8002e00 <HAL_TIM_Base_Init+0x44>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002e42:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002e46:	480a      	ldr	r0, [pc, #40]	; (8002e70 <HAL_TIM_Base_Init+0xb4>)
 8002e48:	f002 fe1e 	bl	8005a88 <assert_failed>
 8002e4c:	e7e0      	b.n	8002e10 <HAL_TIM_Base_Init+0x54>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002e4e:	f240 1115 	movw	r1, #277	; 0x115
 8002e52:	4807      	ldr	r0, [pc, #28]	; (8002e70 <HAL_TIM_Base_Init+0xb4>)
 8002e54:	f002 fe18 	bl	8005a88 <assert_failed>
 8002e58:	e7de      	b.n	8002e18 <HAL_TIM_Base_Init+0x5c>
    htim->Lock = HAL_UNLOCKED;
 8002e5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f003 f818 	bl	8005e94 <HAL_TIM_Base_MspInit>
 8002e64:	e7db      	b.n	8002e1e <HAL_TIM_Base_Init+0x62>
    return HAL_ERROR;
 8002e66:	2001      	movs	r0, #1
}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	0800675c 	.word	0x0800675c

08002e74 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8002e74:	2800      	cmp	r0, #0
 8002e76:	f000 80f8 	beq.w	800306a <HAL_TIM_Encoder_Init+0x1f6>
{
 8002e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7c:	4605      	mov	r5, r0
 8002e7e:	460c      	mov	r4, r1
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002e80:	6883      	ldr	r3, [r0, #8]
 8002e82:	b143      	cbz	r3, 8002e96 <HAL_TIM_Encoder_Init+0x22>
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d006      	beq.n	8002e96 <HAL_TIM_Encoder_Init+0x22>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d004      	beq.n	8002e96 <HAL_TIM_Encoder_Init+0x22>
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d002      	beq.n	8002e96 <HAL_TIM_Encoder_Init+0x22>
 8002e90:	2b60      	cmp	r3, #96	; 0x60
 8002e92:	f040 809c 	bne.w	8002fce <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002e96:	692b      	ldr	r3, [r5, #16]
 8002e98:	b133      	cbz	r3, 8002ea8 <HAL_TIM_Encoder_Init+0x34>
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9e:	d003      	beq.n	8002ea8 <HAL_TIM_Encoder_Init+0x34>
 8002ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea4:	f040 8099 	bne.w	8002fda <HAL_TIM_Encoder_Init+0x166>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002ea8:	69ab      	ldr	r3, [r5, #24]
 8002eaa:	b113      	cbz	r3, 8002eb2 <HAL_TIM_Encoder_Init+0x3e>
 8002eac:	2b80      	cmp	r3, #128	; 0x80
 8002eae:	f040 809a 	bne.w	8002fe6 <HAL_TIM_Encoder_Init+0x172>
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002eb2:	682b      	ldr	r3, [r5, #0]
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_TIM_Encoder_Init+0x1fc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00f      	beq.n	8002eda <HAL_TIM_Encoder_Init+0x66>
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d00c      	beq.n	8002eda <HAL_TIM_Encoder_Init+0x66>
 8002ec0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d008      	beq.n	8002eda <HAL_TIM_Encoder_Init+0x66>
 8002ec8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_TIM_Encoder_Init+0x66>
 8002ed0:	f640 2134 	movw	r1, #2612	; 0xa34
 8002ed4:	4867      	ldr	r0, [pc, #412]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8002ed6:	f002 fdd7 	bl	8005a88 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	f200 8087 	bhi.w	8002ff2 <HAL_TIM_Encoder_Init+0x17e>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8002ee4:	68a3      	ldr	r3, [r4, #8]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	f200 8088 	bhi.w	8002ffe <HAL_TIM_Encoder_Init+0x18a>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8002eee:	69a3      	ldr	r3, [r4, #24]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	f200 8089 	bhi.w	800300a <HAL_TIM_Encoder_Init+0x196>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
 8002ef8:	6863      	ldr	r3, [r4, #4]
 8002efa:	b123      	cbz	r3, 8002f06 <HAL_TIM_Encoder_Init+0x92>
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d002      	beq.n	8002f06 <HAL_TIM_Encoder_Init+0x92>
 8002f00:	2b0a      	cmp	r3, #10
 8002f02:	f040 8088 	bne.w	8003016 <HAL_TIM_Encoder_Init+0x1a2>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
 8002f06:	6963      	ldr	r3, [r4, #20]
 8002f08:	b123      	cbz	r3, 8002f14 <HAL_TIM_Encoder_Init+0xa0>
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d002      	beq.n	8002f14 <HAL_TIM_Encoder_Init+0xa0>
 8002f0e:	2b0a      	cmp	r3, #10
 8002f10:	f040 8087 	bne.w	8003022 <HAL_TIM_Encoder_Init+0x1ae>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8002f14:	68e3      	ldr	r3, [r4, #12]
 8002f16:	b133      	cbz	r3, 8002f26 <HAL_TIM_Encoder_Init+0xb2>
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIM_Encoder_Init+0xb2>
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d002      	beq.n	8002f26 <HAL_TIM_Encoder_Init+0xb2>
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	f040 8084 	bne.w	800302e <HAL_TIM_Encoder_Init+0x1ba>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8002f26:	69e3      	ldr	r3, [r4, #28]
 8002f28:	b133      	cbz	r3, 8002f38 <HAL_TIM_Encoder_Init+0xc4>
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d004      	beq.n	8002f38 <HAL_TIM_Encoder_Init+0xc4>
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d002      	beq.n	8002f38 <HAL_TIM_Encoder_Init+0xc4>
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	f040 8081 	bne.w	800303a <HAL_TIM_Encoder_Init+0x1c6>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	f200 8083 	bhi.w	8003046 <HAL_TIM_Encoder_Init+0x1d2>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8002f40:	6a23      	ldr	r3, [r4, #32]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	f200 8085 	bhi.w	8003052 <HAL_TIM_Encoder_Init+0x1de>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f48:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8086 	beq.w	800305e <HAL_TIM_Encoder_Init+0x1ea>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f52:	2302      	movs	r3, #2
 8002f54:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f58:	4629      	mov	r1, r5
 8002f5a:	f851 2b04 	ldr.w	r2, [r1], #4
 8002f5e:	6893      	ldr	r3, [r2, #8]
 8002f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f64:	f023 0307 	bic.w	r3, r3, #7
 8002f68:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6a:	6828      	ldr	r0, [r5, #0]
 8002f6c:	f7ff feec 	bl	8002d48 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002f70:	6829      	ldr	r1, [r5, #0]
 8002f72:	688a      	ldr	r2, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002f74:	698e      	ldr	r6, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8002f76:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f7c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
 8002f80:	f026 0603 	bic.w	r6, r6, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f84:	68a2      	ldr	r2, [r4, #8]
 8002f86:	69a3      	ldr	r3, [r4, #24]
 8002f88:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002f8c:	4333      	orrs	r3, r6
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f8e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8002f92:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f96:	68e6      	ldr	r6, [r4, #12]
 8002f98:	69e2      	ldr	r2, [r4, #28]
 8002f9a:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8002f9e:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fa0:	6a22      	ldr	r2, [r4, #32]
 8002fa2:	0313      	lsls	r3, r2, #12
 8002fa4:	6922      	ldr	r2, [r4, #16]
 8002fa6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002faa:	4333      	orrs	r3, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fac:	f027 0722 	bic.w	r7, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fb0:	6862      	ldr	r2, [r4, #4]
 8002fb2:	6964      	ldr	r4, [r4, #20]
 8002fb4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002fb8:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 8002fba:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8002fbc:	6829      	ldr	r1, [r5, #0]
 8002fbe:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8002fc0:	682b      	ldr	r3, [r5, #0]
 8002fc2:	621a      	str	r2, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8002fca:	2000      	movs	r0, #0
}
 8002fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002fce:	f640 2131 	movw	r1, #2609	; 0xa31
 8002fd2:	4828      	ldr	r0, [pc, #160]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8002fd4:	f002 fd58 	bl	8005a88 <assert_failed>
 8002fd8:	e75d      	b.n	8002e96 <HAL_TIM_Encoder_Init+0x22>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002fda:	f640 2132 	movw	r1, #2610	; 0xa32
 8002fde:	4825      	ldr	r0, [pc, #148]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8002fe0:	f002 fd52 	bl	8005a88 <assert_failed>
 8002fe4:	e760      	b.n	8002ea8 <HAL_TIM_Encoder_Init+0x34>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002fe6:	f640 2133 	movw	r1, #2611	; 0xa33
 8002fea:	4822      	ldr	r0, [pc, #136]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8002fec:	f002 fd4c 	bl	8005a88 <assert_failed>
 8002ff0:	e75f      	b.n	8002eb2 <HAL_TIM_Encoder_Init+0x3e>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8002ff2:	f640 2135 	movw	r1, #2613	; 0xa35
 8002ff6:	481f      	ldr	r0, [pc, #124]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8002ff8:	f002 fd46 	bl	8005a88 <assert_failed>
 8002ffc:	e772      	b.n	8002ee4 <HAL_TIM_Encoder_Init+0x70>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8002ffe:	f640 2136 	movw	r1, #2614	; 0xa36
 8003002:	481c      	ldr	r0, [pc, #112]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8003004:	f002 fd40 	bl	8005a88 <assert_failed>
 8003008:	e771      	b.n	8002eee <HAL_TIM_Encoder_Init+0x7a>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800300a:	f640 2137 	movw	r1, #2615	; 0xa37
 800300e:	4819      	ldr	r0, [pc, #100]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8003010:	f002 fd3a 	bl	8005a88 <assert_failed>
 8003014:	e770      	b.n	8002ef8 <HAL_TIM_Encoder_Init+0x84>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
 8003016:	f640 2138 	movw	r1, #2616	; 0xa38
 800301a:	4816      	ldr	r0, [pc, #88]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 800301c:	f002 fd34 	bl	8005a88 <assert_failed>
 8003020:	e771      	b.n	8002f06 <HAL_TIM_Encoder_Init+0x92>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
 8003022:	f640 2139 	movw	r1, #2617	; 0xa39
 8003026:	4813      	ldr	r0, [pc, #76]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8003028:	f002 fd2e 	bl	8005a88 <assert_failed>
 800302c:	e772      	b.n	8002f14 <HAL_TIM_Encoder_Init+0xa0>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800302e:	f640 213a 	movw	r1, #2618	; 0xa3a
 8003032:	4810      	ldr	r0, [pc, #64]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8003034:	f002 fd28 	bl	8005a88 <assert_failed>
 8003038:	e775      	b.n	8002f26 <HAL_TIM_Encoder_Init+0xb2>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800303a:	f640 213b 	movw	r1, #2619	; 0xa3b
 800303e:	480d      	ldr	r0, [pc, #52]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8003040:	f002 fd22 	bl	8005a88 <assert_failed>
 8003044:	e778      	b.n	8002f38 <HAL_TIM_Encoder_Init+0xc4>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8003046:	f640 213c 	movw	r1, #2620	; 0xa3c
 800304a:	480a      	ldr	r0, [pc, #40]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 800304c:	f002 fd1c 	bl	8005a88 <assert_failed>
 8003050:	e776      	b.n	8002f40 <HAL_TIM_Encoder_Init+0xcc>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8003052:	f640 213d 	movw	r1, #2621	; 0xa3d
 8003056:	4807      	ldr	r0, [pc, #28]	; (8003074 <HAL_TIM_Encoder_Init+0x200>)
 8003058:	f002 fd16 	bl	8005a88 <assert_failed>
 800305c:	e774      	b.n	8002f48 <HAL_TIM_Encoder_Init+0xd4>
    htim->Lock = HAL_UNLOCKED;
 800305e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003062:	4628      	mov	r0, r5
 8003064:	f002 ff36 	bl	8005ed4 <HAL_TIM_Encoder_MspInit>
 8003068:	e773      	b.n	8002f52 <HAL_TIM_Encoder_Init+0xde>
    return HAL_ERROR;
 800306a:	2001      	movs	r0, #1
}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40012c00 	.word	0x40012c00
 8003074:	0800675c 	.word	0x0800675c

08003078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003078:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800307a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003080:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003084:	430b      	orrs	r3, r1
 8003086:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003088:	6083      	str	r3, [r0, #8]
}
 800308a:	bc10      	pop	{r4}
 800308c:	4770      	bx	lr
	...

08003090 <HAL_TIM_ConfigClockSource>:
{
 8003090:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003092:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	f000 81ba 	beq.w	8003410 <HAL_TIM_ConfigClockSource+0x380>
 800309c:	460d      	mov	r5, r1
 800309e:	4604      	mov	r4, r0
 80030a0:	2301      	movs	r3, #1
 80030a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80030ac:	680b      	ldr	r3, [r1, #0]
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b2:	d011      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x48>
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b8:	d00e      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x48>
 80030ba:	b16b      	cbz	r3, 80030d8 <HAL_TIM_ConfigClockSource+0x48>
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d00b      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x48>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d009      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x48>
 80030c4:	2b30      	cmp	r3, #48	; 0x30
 80030c6:	d007      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x48>
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d005      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x48>
 80030cc:	2b50      	cmp	r3, #80	; 0x50
 80030ce:	d003      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x48>
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d001      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x48>
 80030d4:	2b70      	cmp	r3, #112	; 0x70
 80030d6:	d141      	bne.n	800315c <HAL_TIM_ConfigClockSource+0xcc>
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80030e4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80030e6:	682b      	ldr	r3, [r5, #0]
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	f000 815b 	beq.w	80033a4 <HAL_TIM_ConfigClockSource+0x314>
 80030ee:	d93b      	bls.n	8003168 <HAL_TIM_ConfigClockSource+0xd8>
 80030f0:	2b70      	cmp	r3, #112	; 0x70
 80030f2:	f000 80b0 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x1c6>
 80030f6:	d85b      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x120>
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	f000 810d 	beq.w	8003318 <HAL_TIM_ConfigClockSource+0x288>
 80030fe:	2b60      	cmp	r3, #96	; 0x60
 8003100:	f040 80df 	bne.w	80032c2 <HAL_TIM_ConfigClockSource+0x232>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	4aa5      	ldr	r2, [pc, #660]	; (800339c <HAL_TIM_ConfigClockSource+0x30c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00f      	beq.n	800312c <HAL_TIM_ConfigClockSource+0x9c>
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d00c      	beq.n	800312c <HAL_TIM_ConfigClockSource+0x9c>
 8003112:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003116:	4293      	cmp	r3, r2
 8003118:	d008      	beq.n	800312c <HAL_TIM_ConfigClockSource+0x9c>
 800311a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_TIM_ConfigClockSource+0x9c>
 8003122:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8003126:	489e      	ldr	r0, [pc, #632]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 8003128:	f002 fcae 	bl	8005a88 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800312c:	686b      	ldr	r3, [r5, #4]
 800312e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003132:	d005      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0xb0>
 8003134:	b123      	cbz	r3, 8003140 <HAL_TIM_ConfigClockSource+0xb0>
 8003136:	2b02      	cmp	r3, #2
 8003138:	d002      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0xb0>
 800313a:	2b0a      	cmp	r3, #10
 800313c:	f040 8122 	bne.w	8003384 <HAL_TIM_ConfigClockSource+0x2f4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003140:	68eb      	ldr	r3, [r5, #12]
 8003142:	2b0f      	cmp	r3, #15
 8003144:	f200 8124 	bhi.w	8003390 <HAL_TIM_ConfigClockSource+0x300>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003148:	68ea      	ldr	r2, [r5, #12]
 800314a:	6869      	ldr	r1, [r5, #4]
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	f7ff fcf1 	bl	8002b34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003152:	2160      	movs	r1, #96	; 0x60
 8003154:	6820      	ldr	r0, [r4, #0]
 8003156:	f7ff fd00 	bl	8002b5a <TIM_ITRx_SetConfig>
      break;
 800315a:	e0b2      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800315c:	f241 118a 	movw	r1, #4490	; 0x118a
 8003160:	488f      	ldr	r0, [pc, #572]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 8003162:	f002 fc91 	bl	8005a88 <assert_failed>
 8003166:	e7b7      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8003168:	2b10      	cmp	r3, #16
 800316a:	d008      	beq.n	800317e <HAL_TIM_ConfigClockSource+0xee>
 800316c:	d904      	bls.n	8003178 <HAL_TIM_ConfigClockSource+0xe8>
 800316e:	2b20      	cmp	r3, #32
 8003170:	d005      	beq.n	800317e <HAL_TIM_ConfigClockSource+0xee>
 8003172:	2b30      	cmp	r3, #48	; 0x30
 8003174:	d003      	beq.n	800317e <HAL_TIM_ConfigClockSource+0xee>
 8003176:	e0a4      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
 8003178:	2b00      	cmp	r3, #0
 800317a:	f040 80a2 	bne.w	80032c2 <HAL_TIM_ConfigClockSource+0x232>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	4a86      	ldr	r2, [pc, #536]	; (800339c <HAL_TIM_ConfigClockSource+0x30c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00f      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x116>
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318a:	d00c      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x116>
 800318c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003190:	4293      	cmp	r3, r2
 8003192:	d008      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x116>
 8003194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x116>
 800319c:	f241 11fc 	movw	r1, #4604	; 0x11fc
 80031a0:	487f      	ldr	r0, [pc, #508]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 80031a2:	f002 fc71 	bl	8005a88 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031a6:	6829      	ldr	r1, [r5, #0]
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	f7ff fcd6 	bl	8002b5a <TIM_ITRx_SetConfig>
      break;
 80031ae:	e088      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
  switch (sClockSourceConfig->ClockSource)
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b4:	d03a      	beq.n	800322c <HAL_TIM_ConfigClockSource+0x19c>
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ba:	f040 8082 	bne.w	80032c2 <HAL_TIM_ConfigClockSource+0x232>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	4a76      	ldr	r2, [pc, #472]	; (800339c <HAL_TIM_ConfigClockSource+0x30c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00f      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x156>
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d00c      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x156>
 80031cc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d008      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x156>
 80031d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x156>
 80031dc:	f241 11b5 	movw	r1, #4533	; 0x11b5
 80031e0:	486f      	ldr	r0, [pc, #444]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 80031e2:	f002 fc51 	bl	8005a88 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80031e6:	68ab      	ldr	r3, [r5, #8]
 80031e8:	b143      	cbz	r3, 80031fc <HAL_TIM_ConfigClockSource+0x16c>
 80031ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ee:	d005      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f4:	d002      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 80031f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031fa:	d17b      	bne.n	80032f4 <HAL_TIM_ConfigClockSource+0x264>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80031fc:	686b      	ldr	r3, [r5, #4]
 80031fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003202:	d004      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x17e>
 8003204:	b11b      	cbz	r3, 800320e <HAL_TIM_ConfigClockSource+0x17e>
 8003206:	2b02      	cmp	r3, #2
 8003208:	d001      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x17e>
 800320a:	2b0a      	cmp	r3, #10
 800320c:	d178      	bne.n	8003300 <HAL_TIM_ConfigClockSource+0x270>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800320e:	68eb      	ldr	r3, [r5, #12]
 8003210:	2b0f      	cmp	r3, #15
 8003212:	d87b      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x27c>
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	68eb      	ldr	r3, [r5, #12]
 8003216:	686a      	ldr	r2, [r5, #4]
 8003218:	68a9      	ldr	r1, [r5, #8]
 800321a:	6820      	ldr	r0, [r4, #0]
 800321c:	f7ff ff2c 	bl	8003078 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	6893      	ldr	r3, [r2, #8]
 8003224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003228:	6093      	str	r3, [r2, #8]
      break;
 800322a:	e04a      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	4a5b      	ldr	r2, [pc, #364]	; (800339c <HAL_TIM_ConfigClockSource+0x30c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d046      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003238:	d043      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
 800323a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800323e:	4293      	cmp	r3, r2
 8003240:	d03f      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
 8003242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003246:	4293      	cmp	r3, r2
 8003248:	d03b      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
 800324a:	f241 1196 	movw	r1, #4502	; 0x1196
 800324e:	4854      	ldr	r0, [pc, #336]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 8003250:	f002 fc1a 	bl	8005a88 <assert_failed>
 8003254:	e035      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	4a50      	ldr	r2, [pc, #320]	; (800339c <HAL_TIM_ConfigClockSource+0x30c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00f      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x1ee>
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d00c      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x1ee>
 8003264:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003268:	4293      	cmp	r3, r2
 800326a:	d008      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x1ee>
 800326c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x1ee>
 8003274:	f241 119d 	movw	r1, #4509	; 0x119d
 8003278:	4849      	ldr	r0, [pc, #292]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 800327a:	f002 fc05 	bl	8005a88 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800327e:	68ab      	ldr	r3, [r5, #8]
 8003280:	b143      	cbz	r3, 8003294 <HAL_TIM_ConfigClockSource+0x204>
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d005      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0x204>
 8003288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328c:	d002      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0x204>
 800328e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003292:	d11d      	bne.n	80032d0 <HAL_TIM_ConfigClockSource+0x240>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003294:	686b      	ldr	r3, [r5, #4]
 8003296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329a:	d004      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x216>
 800329c:	b11b      	cbz	r3, 80032a6 <HAL_TIM_ConfigClockSource+0x216>
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d001      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x216>
 80032a2:	2b0a      	cmp	r3, #10
 80032a4:	d11a      	bne.n	80032dc <HAL_TIM_ConfigClockSource+0x24c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80032a6:	68eb      	ldr	r3, [r5, #12]
 80032a8:	2b0f      	cmp	r3, #15
 80032aa:	d81d      	bhi.n	80032e8 <HAL_TIM_ConfigClockSource+0x258>
      TIM_ETR_SetConfig(htim->Instance,
 80032ac:	68eb      	ldr	r3, [r5, #12]
 80032ae:	686a      	ldr	r2, [r5, #4]
 80032b0:	68a9      	ldr	r1, [r5, #8]
 80032b2:	6820      	ldr	r0, [r4, #0]
 80032b4:	f7ff fee0 	bl	8003078 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80032c0:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80032ce:	bd38      	pop	{r3, r4, r5, pc}
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80032d0:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 80032d4:	4832      	ldr	r0, [pc, #200]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 80032d6:	f002 fbd7 	bl	8005a88 <assert_failed>
 80032da:	e7db      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80032dc:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80032e0:	482f      	ldr	r0, [pc, #188]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 80032e2:	f002 fbd1 	bl	8005a88 <assert_failed>
 80032e6:	e7de      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x216>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80032e8:	f241 11a2 	movw	r1, #4514	; 0x11a2
 80032ec:	482c      	ldr	r0, [pc, #176]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 80032ee:	f002 fbcb 	bl	8005a88 <assert_failed>
 80032f2:	e7db      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x21c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80032f4:	f241 11b8 	movw	r1, #4536	; 0x11b8
 80032f8:	4829      	ldr	r0, [pc, #164]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 80032fa:	f002 fbc5 	bl	8005a88 <assert_failed>
 80032fe:	e77d      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003300:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8003304:	4826      	ldr	r0, [pc, #152]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 8003306:	f002 fbbf 	bl	8005a88 <assert_failed>
 800330a:	e780      	b.n	800320e <HAL_TIM_ConfigClockSource+0x17e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800330c:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8003310:	4823      	ldr	r0, [pc, #140]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 8003312:	f002 fbb9 	bl	8005a88 <assert_failed>
 8003316:	e77d      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	4a20      	ldr	r2, [pc, #128]	; (800339c <HAL_TIM_ConfigClockSource+0x30c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0x2b0>
 8003320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003324:	d00c      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0x2b0>
 8003326:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800332a:	4293      	cmp	r3, r2
 800332c:	d008      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0x2b0>
 800332e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0x2b0>
 8003336:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800333a:	4819      	ldr	r0, [pc, #100]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 800333c:	f002 fba4 	bl	8005a88 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003340:	686b      	ldr	r3, [r5, #4]
 8003342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003346:	d004      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x2c2>
 8003348:	b11b      	cbz	r3, 8003352 <HAL_TIM_ConfigClockSource+0x2c2>
 800334a:	2b02      	cmp	r3, #2
 800334c:	d001      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x2c2>
 800334e:	2b0a      	cmp	r3, #10
 8003350:	d10c      	bne.n	800336c <HAL_TIM_ConfigClockSource+0x2dc>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003352:	68eb      	ldr	r3, [r5, #12]
 8003354:	2b0f      	cmp	r3, #15
 8003356:	d80f      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x2e8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003358:	68ea      	ldr	r2, [r5, #12]
 800335a:	6869      	ldr	r1, [r5, #4]
 800335c:	6820      	ldr	r0, [r4, #0]
 800335e:	f7ff fbd7 	bl	8002b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003362:	2150      	movs	r1, #80	; 0x50
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	f7ff fbf8 	bl	8002b5a <TIM_ITRx_SetConfig>
      break;
 800336a:	e7aa      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800336c:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8003370:	480b      	ldr	r0, [pc, #44]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 8003372:	f002 fb89 	bl	8005a88 <assert_failed>
 8003376:	e7ec      	b.n	8003352 <HAL_TIM_ConfigClockSource+0x2c2>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003378:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800337c:	4808      	ldr	r0, [pc, #32]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 800337e:	f002 fb83 	bl	8005a88 <assert_failed>
 8003382:	e7e9      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x2c8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003384:	f241 11dc 	movw	r1, #4572	; 0x11dc
 8003388:	4805      	ldr	r0, [pc, #20]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 800338a:	f002 fb7d 	bl	8005a88 <assert_failed>
 800338e:	e6d7      	b.n	8003140 <HAL_TIM_ConfigClockSource+0xb0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003390:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8003394:	4802      	ldr	r0, [pc, #8]	; (80033a0 <HAL_TIM_ConfigClockSource+0x310>)
 8003396:	f002 fb77 	bl	8005a88 <assert_failed>
 800339a:	e6d5      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xb8>
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	0800675c 	.word	0x0800675c
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <HAL_TIM_ConfigClockSource+0x384>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00f      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x33c>
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d00c      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x33c>
 80033b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d008      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x33c>
 80033ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x33c>
 80033c2:	f241 11e9 	movw	r1, #4585	; 0x11e9
 80033c6:	4814      	ldr	r0, [pc, #80]	; (8003418 <HAL_TIM_ConfigClockSource+0x388>)
 80033c8:	f002 fb5e 	bl	8005a88 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80033cc:	686b      	ldr	r3, [r5, #4]
 80033ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d2:	d004      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x34e>
 80033d4:	b11b      	cbz	r3, 80033de <HAL_TIM_ConfigClockSource+0x34e>
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d001      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x34e>
 80033da:	2b0a      	cmp	r3, #10
 80033dc:	d10c      	bne.n	80033f8 <HAL_TIM_ConfigClockSource+0x368>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80033de:	68eb      	ldr	r3, [r5, #12]
 80033e0:	2b0f      	cmp	r3, #15
 80033e2:	d80f      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x374>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e4:	68ea      	ldr	r2, [r5, #12]
 80033e6:	6869      	ldr	r1, [r5, #4]
 80033e8:	6820      	ldr	r0, [r4, #0]
 80033ea:	f7ff fb91 	bl	8002b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ee:	2140      	movs	r1, #64	; 0x40
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	f7ff fbb2 	bl	8002b5a <TIM_ITRx_SetConfig>
      break;
 80033f6:	e764      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x232>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80033f8:	f241 11ec 	movw	r1, #4588	; 0x11ec
 80033fc:	4806      	ldr	r0, [pc, #24]	; (8003418 <HAL_TIM_ConfigClockSource+0x388>)
 80033fe:	f002 fb43 	bl	8005a88 <assert_failed>
 8003402:	e7ec      	b.n	80033de <HAL_TIM_ConfigClockSource+0x34e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003404:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8003408:	4803      	ldr	r0, [pc, #12]	; (8003418 <HAL_TIM_ConfigClockSource+0x388>)
 800340a:	f002 fb3d 	bl	8005a88 <assert_failed>
 800340e:	e7e9      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x354>
  __HAL_LOCK(htim);
 8003410:	2002      	movs	r0, #2
 8003412:	e75c      	b.n	80032ce <HAL_TIM_ConfigClockSource+0x23e>
 8003414:	40012c00 	.word	0x40012c00
 8003418:	0800675c 	.word	0x0800675c

0800341c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	4604      	mov	r4, r0
 8003420:	460d      	mov	r5, r1
 8003422:	4616      	mov	r6, r2
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8003424:	4b17      	ldr	r3, [pc, #92]	; (8003484 <TIM_CCxChannelCmd+0x68>)
 8003426:	4298      	cmp	r0, r3
 8003428:	d00f      	beq.n	800344a <TIM_CCxChannelCmd+0x2e>
 800342a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800342e:	d00c      	beq.n	800344a <TIM_CCxChannelCmd+0x2e>
 8003430:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8003434:	4298      	cmp	r0, r3
 8003436:	d008      	beq.n	800344a <TIM_CCxChannelCmd+0x2e>
 8003438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800343c:	4298      	cmp	r0, r3
 800343e:	d004      	beq.n	800344a <TIM_CCxChannelCmd+0x2e>
 8003440:	f641 11c9 	movw	r1, #6601	; 0x19c9
 8003444:	4810      	ldr	r0, [pc, #64]	; (8003488 <TIM_CCxChannelCmd+0x6c>)
 8003446:	f002 fb1f 	bl	8005a88 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800344a:	b165      	cbz	r5, 8003466 <TIM_CCxChannelCmd+0x4a>
 800344c:	2d04      	cmp	r5, #4
 800344e:	d00a      	beq.n	8003466 <TIM_CCxChannelCmd+0x4a>
 8003450:	2d08      	cmp	r5, #8
 8003452:	d008      	beq.n	8003466 <TIM_CCxChannelCmd+0x4a>
 8003454:	2d0c      	cmp	r5, #12
 8003456:	d006      	beq.n	8003466 <TIM_CCxChannelCmd+0x4a>
 8003458:	2d3c      	cmp	r5, #60	; 0x3c
 800345a:	d004      	beq.n	8003466 <TIM_CCxChannelCmd+0x4a>
 800345c:	f641 11ca 	movw	r1, #6602	; 0x19ca
 8003460:	4809      	ldr	r0, [pc, #36]	; (8003488 <TIM_CCxChannelCmd+0x6c>)
 8003462:	f002 fb11 	bl	8005a88 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003466:	f005 051f 	and.w	r5, r5, #31
 800346a:	2301      	movs	r3, #1
 800346c:	fa03 f205 	lsl.w	r2, r3, r5

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003470:	6a23      	ldr	r3, [r4, #32]
 8003472:	ea23 0302 	bic.w	r3, r3, r2
 8003476:	6223      	str	r3, [r4, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003478:	6a23      	ldr	r3, [r4, #32]
 800347a:	fa06 f505 	lsl.w	r5, r6, r5
 800347e:	431d      	orrs	r5, r3
 8003480:	6225      	str	r5, [r4, #32]
}
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	40012c00 	.word	0x40012c00
 8003488:	0800675c 	.word	0x0800675c

0800348c <HAL_TIM_Encoder_Start_IT>:
{
 800348c:	b538      	push	{r3, r4, r5, lr}
 800348e:	4604      	mov	r4, r0
 8003490:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003492:	6803      	ldr	r3, [r0, #0]
 8003494:	4a23      	ldr	r2, [pc, #140]	; (8003524 <HAL_TIM_Encoder_Start_IT+0x98>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00f      	beq.n	80034ba <HAL_TIM_Encoder_Start_IT+0x2e>
 800349a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349e:	d00c      	beq.n	80034ba <HAL_TIM_Encoder_Start_IT+0x2e>
 80034a0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d008      	beq.n	80034ba <HAL_TIM_Encoder_Start_IT+0x2e>
 80034a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_TIM_Encoder_Start_IT+0x2e>
 80034b0:	f44f 6133 	mov.w	r1, #2864	; 0xb30
 80034b4:	481c      	ldr	r0, [pc, #112]	; (8003528 <HAL_TIM_Encoder_Start_IT+0x9c>)
 80034b6:	f002 fae7 	bl	8005a88 <assert_failed>
  switch (Channel)
 80034ba:	b1b5      	cbz	r5, 80034ea <HAL_TIM_Encoder_Start_IT+0x5e>
 80034bc:	2d04      	cmp	r5, #4
 80034be:	d025      	beq.n	800350c <HAL_TIM_Encoder_Start_IT+0x80>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034c0:	2201      	movs	r2, #1
 80034c2:	2100      	movs	r1, #0
 80034c4:	6820      	ldr	r0, [r4, #0]
 80034c6:	f7ff ffa9 	bl	800341c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034ca:	2201      	movs	r2, #1
 80034cc:	2104      	movs	r1, #4
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	f7ff ffa4 	bl	800341c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	68d3      	ldr	r3, [r2, #12]
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034de:	6822      	ldr	r2, [r4, #0]
 80034e0:	68d3      	ldr	r3, [r2, #12]
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	60d3      	str	r3, [r2, #12]
      break;
 80034e8:	e009      	b.n	80034fe <HAL_TIM_Encoder_Start_IT+0x72>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034ea:	2201      	movs	r2, #1
 80034ec:	2100      	movs	r1, #0
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	f7ff ff94 	bl	800341c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	68d3      	ldr	r3, [r2, #12]
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	6813      	ldr	r3, [r2, #0]
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6013      	str	r3, [r2, #0]
}
 8003508:	2000      	movs	r0, #0
 800350a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800350c:	2201      	movs	r2, #1
 800350e:	2104      	movs	r1, #4
 8003510:	6820      	ldr	r0, [r4, #0]
 8003512:	f7ff ff83 	bl	800341c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	68d3      	ldr	r3, [r2, #12]
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	60d3      	str	r3, [r2, #12]
      break;
 8003520:	e7ed      	b.n	80034fe <HAL_TIM_Encoder_Start_IT+0x72>
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	0800675c 	.word	0x0800675c

0800352c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	4604      	mov	r4, r0
 8003530:	460d      	mov	r5, r1
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8003532:	6803      	ldr	r3, [r0, #0]
 8003534:	4a29      	ldr	r2, [pc, #164]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00f      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 800353a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353e:	d00c      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8003540:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003544:	4293      	cmp	r3, r2
 8003546:	d008      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8003548:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8003550:	f240 6164 	movw	r1, #1636	; 0x664
 8003554:	4822      	ldr	r0, [pc, #136]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003556:	f002 fa97 	bl	8005a88 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800355a:	682b      	ldr	r3, [r5, #0]
 800355c:	b16b      	cbz	r3, 800357a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800355e:	2b10      	cmp	r3, #16
 8003560:	d00b      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003562:	2b20      	cmp	r3, #32
 8003564:	d009      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003566:	2b30      	cmp	r3, #48	; 0x30
 8003568:	d007      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d005      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800356e:	2b50      	cmp	r3, #80	; 0x50
 8003570:	d003      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003572:	2b60      	cmp	r3, #96	; 0x60
 8003574:	d001      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003576:	2b70      	cmp	r3, #112	; 0x70
 8003578:	d121      	bne.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0x92>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800357a:	686b      	ldr	r3, [r5, #4]
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	d000      	beq.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003580:	bb1b      	cbnz	r3, 80035ca <HAL_TIMEx_MasterConfigSynchronization+0x9e>

  /* Check input state */
  __HAL_LOCK(htim);
 8003582:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d025      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800358a:	2601      	movs	r6, #1
 800358c:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	2302      	movs	r3, #2
 8003592:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800359a:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800359c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035a0:	6829      	ldr	r1, [r5, #0]
 80035a2:	4301      	orrs	r1, r0

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80035a4:	f023 0080 	bic.w	r0, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a8:	686b      	ldr	r3, [r5, #4]
 80035aa:	4303      	orrs	r3, r0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ac:	6051      	str	r1, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035ae:	6822      	ldr	r2, [r4, #0]
 80035b0:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b2:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 80035bc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80035be:	f240 6165 	movw	r1, #1637	; 0x665
 80035c2:	4807      	ldr	r0, [pc, #28]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035c4:	f002 fa60 	bl	8005a88 <assert_failed>
 80035c8:	e7d7      	b.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80035ca:	f240 6166 	movw	r1, #1638	; 0x666
 80035ce:	4804      	ldr	r0, [pc, #16]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035d0:	f002 fa5a 	bl	8005a88 <assert_failed>
 80035d4:	e7d5      	b.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  __HAL_LOCK(htim);
 80035d6:	2002      	movs	r0, #2
 80035d8:	e7f0      	b.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80035da:	bf00      	nop
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	08006794 	.word	0x08006794

080035e4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035e6:	4770      	bx	lr

080035e8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035e8:	b084      	sub	sp, #16
 80035ea:	a801      	add	r0, sp, #4
 80035ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80035f0:	2000      	movs	r0, #0
 80035f2:	b004      	add	sp, #16
 80035f4:	4770      	bx	lr

080035f6 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80035f6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80035fa:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80035fe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003602:	2000      	movs	r0, #0
 8003604:	4770      	bx	lr

08003606 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003606:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800360a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800360e:	045b      	lsls	r3, r3, #17
 8003610:	0c5b      	lsrs	r3, r3, #17
 8003612:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003616:	2000      	movs	r0, #0
 8003618:	4770      	bx	lr

0800361a <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800361a:	2000      	movs	r0, #0
 800361c:	4770      	bx	lr

0800361e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800361e:	b084      	sub	sp, #16
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	ac05      	add	r4, sp, #20
 8003624:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003628:	2301      	movs	r3, #1
 800362a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800362e:	2400      	movs	r4, #0
 8003630:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003634:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003638:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800363c:	f7ff ffdb 	bl	80035f6 <USB_EnableGlobalInt>

  return HAL_OK;
}
 8003640:	4620      	mov	r0, r4
 8003642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003646:	b004      	add	sp, #16
 8003648:	4770      	bx	lr

0800364a <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800364a:	b430      	push	{r4, r5}
 800364c:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800364e:	780c      	ldrb	r4, [r1, #0]
 8003650:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8003654:	b292      	uxth	r2, r2
 8003656:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800365a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800365e:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8003660:	78c8      	ldrb	r0, [r1, #3]
 8003662:	2803      	cmp	r0, #3
 8003664:	d85a      	bhi.n	800371c <USB_ActivateEndpoint+0xd2>
 8003666:	e8df f000 	tbb	[pc, r0]
 800366a:	554d      	.short	0x554d
 800366c:	5102      	.short	0x5102
  HAL_StatusTypeDef ret = HAL_OK;
 800366e:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003670:	f248 0580 	movw	r5, #32896	; 0x8080
 8003674:	432a      	orrs	r2, r5
 8003676:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800367a:	780c      	ldrb	r4, [r1, #0]
 800367c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003680:	b292      	uxth	r2, r2
 8003682:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003686:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800368a:	4322      	orrs	r2, r4
 800368c:	432a      	orrs	r2, r5
 800368e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 8003692:	7b0a      	ldrb	r2, [r1, #12]
 8003694:	2a00      	cmp	r2, #0
 8003696:	f040 80b1 	bne.w	80037fc <USB_ActivateEndpoint+0x1b2>
  {
    if (ep->is_in != 0U)
 800369a:	784a      	ldrb	r2, [r1, #1]
 800369c:	2a00      	cmp	r2, #0
 800369e:	d04e      	beq.n	800373e <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036a0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80036a4:	441a      	add	r2, r3
 80036a6:	780c      	ldrb	r4, [r1, #0]
 80036a8:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80036ac:	88cc      	ldrh	r4, [r1, #6]
 80036ae:	0864      	lsrs	r4, r4, #1
 80036b0:	0064      	lsls	r4, r4, #1
 80036b2:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036b6:	780c      	ldrb	r4, [r1, #0]
 80036b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80036c0:	d00c      	beq.n	80036dc <USB_ActivateEndpoint+0x92>
 80036c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036c6:	b292      	uxth	r2, r2
 80036c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80036cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036d4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80036d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80036dc:	78ca      	ldrb	r2, [r1, #3]
 80036de:	2a01      	cmp	r2, #1
 80036e0:	d01e      	beq.n	8003720 <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036e2:	7809      	ldrb	r1, [r1, #0]
 80036e4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80036e8:	b292      	uxth	r2, r2
 80036ea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80036ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f2:	f082 0220 	eor.w	r2, r2, #32
 80036f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036fe:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003702:	e060      	b.n	80037c6 <USB_ActivateEndpoint+0x17c>
      wEpRegVal |= USB_EP_CONTROL;
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003708:	2000      	movs	r0, #0
      break;
 800370a:	e7b1      	b.n	8003670 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 800370c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003710:	2000      	movs	r0, #0
      break;
 8003712:	e7ad      	b.n	8003670 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8003718:	2000      	movs	r0, #0
      break;
 800371a:	e7a9      	b.n	8003670 <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 800371c:	2001      	movs	r0, #1
 800371e:	e7a7      	b.n	8003670 <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003720:	7809      	ldrb	r1, [r1, #0]
 8003722:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003726:	b292      	uxth	r2, r2
 8003728:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800372c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003730:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003734:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003738:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800373c:	e043      	b.n	80037c6 <USB_ActivateEndpoint+0x17c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800373e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003742:	441a      	add	r2, r3
 8003744:	780c      	ldrb	r4, [r1, #0]
 8003746:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800374a:	88cc      	ldrh	r4, [r1, #6]
 800374c:	0864      	lsrs	r4, r4, #1
 800374e:	0064      	lsls	r4, r4, #1
 8003750:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003754:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003758:	441a      	add	r2, r3
 800375a:	780c      	ldrb	r4, [r1, #0]
 800375c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003760:	690c      	ldr	r4, [r1, #16]
 8003762:	bb94      	cbnz	r4, 80037ca <USB_ActivateEndpoint+0x180>
 8003764:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8003768:	b2a4      	uxth	r4, r4
 800376a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800376e:	b2a4      	uxth	r4, r4
 8003770:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8003774:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8003778:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800377c:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003780:	780c      	ldrb	r4, [r1, #0]
 8003782:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003786:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800378a:	d00c      	beq.n	80037a6 <USB_ActivateEndpoint+0x15c>
 800378c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003790:	b292      	uxth	r2, r2
 8003792:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003796:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800379a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800379e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037a2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037a6:	7809      	ldrb	r1, [r1, #0]
 80037a8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80037ac:	b292      	uxth	r2, r2
 80037ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037b6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80037ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037c2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80037c6:	bc30      	pop	{r4, r5}
 80037c8:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037ca:	2c3e      	cmp	r4, #62	; 0x3e
 80037cc:	d809      	bhi.n	80037e2 <USB_ActivateEndpoint+0x198>
 80037ce:	0865      	lsrs	r5, r4, #1
 80037d0:	f014 0f01 	tst.w	r4, #1
 80037d4:	d000      	beq.n	80037d8 <USB_ActivateEndpoint+0x18e>
 80037d6:	3501      	adds	r5, #1
 80037d8:	02ad      	lsls	r5, r5, #10
 80037da:	b2ad      	uxth	r5, r5
 80037dc:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 80037e0:	e7ce      	b.n	8003780 <USB_ActivateEndpoint+0x136>
 80037e2:	0965      	lsrs	r5, r4, #5
 80037e4:	f014 0f1f 	tst.w	r4, #31
 80037e8:	d100      	bne.n	80037ec <USB_ActivateEndpoint+0x1a2>
 80037ea:	3d01      	subs	r5, #1
 80037ec:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 80037f0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80037f4:	b2a4      	uxth	r4, r4
 80037f6:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80037fa:	e7c1      	b.n	8003780 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80037fc:	780c      	ldrb	r4, [r1, #0]
 80037fe:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003802:	b292      	uxth	r2, r2
 8003804:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003808:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800380c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003810:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003814:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003818:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800381c:	441a      	add	r2, r3
 800381e:	780c      	ldrb	r4, [r1, #0]
 8003820:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003824:	890c      	ldrh	r4, [r1, #8]
 8003826:	0864      	lsrs	r4, r4, #1
 8003828:	0064      	lsls	r4, r4, #1
 800382a:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 800382e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003832:	441a      	add	r2, r3
 8003834:	780c      	ldrb	r4, [r1, #0]
 8003836:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800383a:	894c      	ldrh	r4, [r1, #10]
 800383c:	0864      	lsrs	r4, r4, #1
 800383e:	0064      	lsls	r4, r4, #1
 8003840:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8003844:	784a      	ldrb	r2, [r1, #1]
 8003846:	2a00      	cmp	r2, #0
 8003848:	d14e      	bne.n	80038e8 <USB_ActivateEndpoint+0x29e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800384a:	780c      	ldrb	r4, [r1, #0]
 800384c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003850:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003854:	d00c      	beq.n	8003870 <USB_ActivateEndpoint+0x226>
 8003856:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800385a:	b292      	uxth	r2, r2
 800385c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003860:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003864:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003868:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800386c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003870:	780c      	ldrb	r4, [r1, #0]
 8003872:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003876:	f012 0f40 	tst.w	r2, #64	; 0x40
 800387a:	d00c      	beq.n	8003896 <USB_ActivateEndpoint+0x24c>
 800387c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003880:	b292      	uxth	r2, r2
 8003882:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003886:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800388a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800388e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003892:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003896:	780c      	ldrb	r4, [r1, #0]
 8003898:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800389c:	b292      	uxth	r2, r2
 800389e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80038a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038aa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80038ae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038b2:	780d      	ldrb	r5, [r1, #0]
 80038b4:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80038b8:	b292      	uxth	r2, r2
 80038ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038c2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80038c6:	f248 0480 	movw	r4, #32896	; 0x8080
 80038ca:	4322      	orrs	r2, r4
 80038cc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038d0:	7809      	ldrb	r1, [r1, #0]
 80038d2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80038d6:	b292      	uxth	r2, r2
 80038d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80038dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e0:	4322      	orrs	r2, r4
 80038e2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80038e6:	e76e      	b.n	80037c6 <USB_ActivateEndpoint+0x17c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038e8:	780c      	ldrb	r4, [r1, #0]
 80038ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038ee:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80038f2:	d00c      	beq.n	800390e <USB_ActivateEndpoint+0x2c4>
 80038f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038f8:	b292      	uxth	r2, r2
 80038fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80038fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003902:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800390a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800390e:	780c      	ldrb	r4, [r1, #0]
 8003910:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003914:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003918:	d00c      	beq.n	8003934 <USB_ActivateEndpoint+0x2ea>
 800391a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800391e:	b292      	uxth	r2, r2
 8003920:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003924:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003930:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003934:	780c      	ldrb	r4, [r1, #0]
 8003936:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800393a:	b292      	uxth	r2, r2
 800393c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003940:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003944:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003948:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800394c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003950:	78ca      	ldrb	r2, [r1, #3]
 8003952:	2a01      	cmp	r2, #1
 8003954:	d01e      	beq.n	8003994 <USB_ActivateEndpoint+0x34a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003956:	780c      	ldrb	r4, [r1, #0]
 8003958:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800395c:	b292      	uxth	r2, r2
 800395e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003966:	f082 0220 	eor.w	r2, r2, #32
 800396a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800396e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003972:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003976:	7809      	ldrb	r1, [r1, #0]
 8003978:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800397c:	b292      	uxth	r2, r2
 800397e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003982:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800398e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003992:	e718      	b.n	80037c6 <USB_ActivateEndpoint+0x17c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003994:	780c      	ldrb	r4, [r1, #0]
 8003996:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800399a:	b292      	uxth	r2, r2
 800399c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039ac:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80039b0:	e7e1      	b.n	8003976 <USB_ActivateEndpoint+0x32c>

080039b2 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80039b2:	7b0b      	ldrb	r3, [r1, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d146      	bne.n	8003a46 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 80039b8:	784b      	ldrb	r3, [r1, #1]
 80039ba:	b313      	cbz	r3, 8003a02 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039bc:	780a      	ldrb	r2, [r1, #0]
 80039be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039c6:	d00c      	beq.n	80039e2 <USB_DeactivateEndpoint+0x30>
 80039c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039e2:	780a      	ldrb	r2, [r1, #0]
 80039e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80039fe:	2000      	movs	r0, #0
 8003a00:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a02:	780a      	ldrb	r2, [r1, #0]
 8003a04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a08:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003a0c:	d00c      	beq.n	8003a28 <USB_DeactivateEndpoint+0x76>
 8003a0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a28:	780a      	ldrb	r2, [r1, #0]
 8003a2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003a44:	e7db      	b.n	80039fe <USB_DeactivateEndpoint+0x4c>
{
 8003a46:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8003a48:	784b      	ldrb	r3, [r1, #1]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d14e      	bne.n	8003aec <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a4e:	780a      	ldrb	r2, [r1, #0]
 8003a50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a54:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003a58:	d00c      	beq.n	8003a74 <USB_DeactivateEndpoint+0xc2>
 8003a5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a74:	780a      	ldrb	r2, [r1, #0]
 8003a76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a7a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a7e:	d00c      	beq.n	8003a9a <USB_DeactivateEndpoint+0xe8>
 8003a80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a96:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003a9a:	780a      	ldrb	r2, [r1, #0]
 8003a9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ab2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ab6:	780b      	ldrb	r3, [r1, #0]
 8003ab8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003abc:	b292      	uxth	r2, r2
 8003abe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ac2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ac6:	f248 0480 	movw	r4, #32896	; 0x8080
 8003aca:	4322      	orrs	r2, r4
 8003acc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ad0:	780a      	ldrb	r2, [r1, #0]
 8003ad2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae0:	4323      	orrs	r3, r4
 8003ae2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	bc10      	pop	{r4}
 8003aea:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003aec:	780a      	ldrb	r2, [r1, #0]
 8003aee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003af2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003af6:	d00c      	beq.n	8003b12 <USB_DeactivateEndpoint+0x160>
 8003af8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b12:	780a      	ldrb	r2, [r1, #0]
 8003b14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b1c:	d00c      	beq.n	8003b38 <USB_DeactivateEndpoint+0x186>
 8003b1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003b38:	780a      	ldrb	r2, [r1, #0]
 8003b3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b54:	780b      	ldrb	r3, [r1, #0]
 8003b56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003b5a:	b292      	uxth	r2, r2
 8003b5c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b64:	f248 0480 	movw	r4, #32896	; 0x8080
 8003b68:	4322      	orrs	r2, r4
 8003b6a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b6e:	780a      	ldrb	r2, [r1, #0]
 8003b70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	4323      	orrs	r3, r4
 8003b80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003b84:	e7af      	b.n	8003ae6 <USB_DeactivateEndpoint+0x134>

08003b86 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003b86:	784b      	ldrb	r3, [r1, #1]
 8003b88:	b98b      	cbnz	r3, 8003bae <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003b8a:	780a      	ldrb	r2, [r1, #0]
 8003b8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003baa:	2000      	movs	r0, #0
 8003bac:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003bae:	780a      	ldrb	r2, [r1, #0]
 8003bb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bbe:	f083 0310 	eor.w	r3, r3, #16
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003bce:	e7ec      	b.n	8003baa <USB_EPSetStall+0x24>

08003bd0 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003bd0:	7b0b      	ldrb	r3, [r1, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d14b      	bne.n	8003c6e <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8003bd6:	784b      	ldrb	r3, [r1, #1]
 8003bd8:	b333      	cbz	r3, 8003c28 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bda:	780a      	ldrb	r2, [r1, #0]
 8003bdc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003be0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003be4:	d00c      	beq.n	8003c00 <USB_EPClearStall+0x30>
 8003be6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bfc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003c00:	78cb      	ldrb	r3, [r1, #3]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d033      	beq.n	8003c6e <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c06:	780a      	ldrb	r2, [r1, #0]
 8003c08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c16:	f083 0320 	eor.w	r3, r3, #32
 8003c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003c26:	e022      	b.n	8003c6e <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c28:	780a      	ldrb	r2, [r1, #0]
 8003c2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c2e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003c32:	d00c      	beq.n	8003c4e <USB_EPClearStall+0x7e>
 8003c34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c4e:	780a      	ldrb	r2, [r1, #0]
 8003c50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003c6e:	2000      	movs	r0, #0
 8003c70:	4770      	bx	lr

08003c72 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 8003c72:	4603      	mov	r3, r0
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 8003c74:	2201      	movs	r2, #1
 8003c76:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0;
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 8003c80:	2203      	movs	r2, #3
 8003c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8003c86:	4770      	bx	lr

08003c88 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003c88:	b911      	cbnz	r1, 8003c90 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003c90:	2000      	movs	r0, #0
 8003c92:	4770      	bx	lr

08003c94 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003c94:	2000      	movs	r0, #0
 8003c96:	4770      	bx	lr

08003c98 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003c98:	2000      	movs	r0, #0
 8003c9a:	4770      	bx	lr

08003c9c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003c9c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003ca0:	4770      	bx	lr

08003ca2 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	4770      	bx	lr

08003ca6 <USB_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003caa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003cb2:	b163      	cbz	r3, 8003cce <USB_WritePMA+0x28>
{
 8003cb4:	b410      	push	{r4}
  {
    temp1 = *pBuf;
 8003cb6:	780c      	ldrb	r4, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003cb8:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8003cba:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8003cbe:	f822 4b04 	strh.w	r4, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003cc2:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f5      	bne.n	8003cb6 <USB_WritePMA+0x10>
  }
}
 8003cca:	bc10      	pop	{r4}
 8003ccc:	4770      	bx	lr
 8003cce:	4770      	bx	lr

08003cd0 <USB_EPStartXfer>:
{
 8003cd0:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8003cd2:	784e      	ldrb	r6, [r1, #1]
 8003cd4:	2e01      	cmp	r6, #1
 8003cd6:	d033      	beq.n	8003d40 <USB_EPStartXfer+0x70>
    if (ep->xfer_len > ep->maxpacket)
 8003cd8:	698a      	ldr	r2, [r1, #24]
 8003cda:	690b      	ldr	r3, [r1, #16]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	f240 80fc 	bls.w	8003eda <USB_EPStartXfer+0x20a>
      ep->xfer_len -= len;
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0U)
 8003ce6:	7b0a      	ldrb	r2, [r1, #12]
 8003ce8:	2a00      	cmp	r2, #0
 8003cea:	f040 8113 	bne.w	8003f14 <USB_EPStartXfer+0x244>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003cee:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003cf2:	4402      	add	r2, r0
 8003cf4:	780c      	ldrb	r4, [r1, #0]
 8003cf6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 80f1 	bne.w	8003ee2 <USB_EPStartXfer+0x212>
 8003d00:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003d10:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d18:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d1c:	780a      	ldrb	r2, [r1, #0]
 8003d1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8003d40:	698a      	ldr	r2, [r1, #24]
 8003d42:	690b      	ldr	r3, [r1, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d922      	bls.n	8003d8e <USB_EPStartXfer+0xbe>
      ep->xfer_len -= len;
 8003d48:	1ad2      	subs	r2, r2, r3
 8003d4a:	618a      	str	r2, [r1, #24]
 8003d4c:	460c      	mov	r4, r1
 8003d4e:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0U)
 8003d50:	7b0a      	ldrb	r2, [r1, #12]
 8003d52:	b302      	cbz	r2, 8003d96 <USB_EPStartXfer+0xc6>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d54:	780a      	ldrb	r2, [r1, #0]
 8003d56:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8003d5a:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003d5e:	d072      	beq.n	8003e46 <USB_EPStartXfer+0x176>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d60:	2e00      	cmp	r6, #0
 8003d62:	d140      	bne.n	8003de6 <USB_EPStartXfer+0x116>
 8003d64:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003d68:	4401      	add	r1, r0
 8003d6a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8003d6e:	bb0b      	cbnz	r3, 8003db4 <USB_EPStartXfer+0xe4>
 8003d70:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8003d74:	b289      	uxth	r1, r1
 8003d76:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003d7a:	b289      	uxth	r1, r1
 8003d7c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8003d80:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8003d84:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003d88:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8003d8c:	e033      	b.n	8003df6 <USB_EPStartXfer+0x126>
      ep->xfer_len = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	618b      	str	r3, [r1, #24]
      len = ep->xfer_len;
 8003d92:	4613      	mov	r3, r2
 8003d94:	e7da      	b.n	8003d4c <USB_EPStartXfer+0x7c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003d96:	b29e      	uxth	r6, r3
 8003d98:	4633      	mov	r3, r6
 8003d9a:	88ca      	ldrh	r2, [r1, #6]
 8003d9c:	6949      	ldr	r1, [r1, #20]
 8003d9e:	f7ff ff82 	bl	8003ca6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003da2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003da6:	442b      	add	r3, r5
 8003da8:	7822      	ldrb	r2, [r4, #0]
 8003daa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003dae:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
 8003db2:	e037      	b.n	8003e24 <USB_EPStartXfer+0x154>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003db4:	2b3e      	cmp	r3, #62	; 0x3e
 8003db6:	d809      	bhi.n	8003dcc <USB_EPStartXfer+0xfc>
 8003db8:	0859      	lsrs	r1, r3, #1
 8003dba:	f013 0f01 	tst.w	r3, #1
 8003dbe:	d000      	beq.n	8003dc2 <USB_EPStartXfer+0xf2>
 8003dc0:	3101      	adds	r1, #1
 8003dc2:	0289      	lsls	r1, r1, #10
 8003dc4:	b289      	uxth	r1, r1
 8003dc6:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8003dca:	e014      	b.n	8003df6 <USB_EPStartXfer+0x126>
 8003dcc:	0959      	lsrs	r1, r3, #5
 8003dce:	f013 0f1f 	tst.w	r3, #31
 8003dd2:	d100      	bne.n	8003dd6 <USB_EPStartXfer+0x106>
 8003dd4:	3901      	subs	r1, #1
 8003dd6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003dda:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003dde:	b289      	uxth	r1, r1
 8003de0:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8003de4:	e007      	b.n	8003df6 <USB_EPStartXfer+0x126>
 8003de6:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003dea:	4401      	add	r1, r0
 8003dec:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8003df0:	b299      	uxth	r1, r3
 8003df2:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
        pmabuffer = ep->pmaaddr1;
 8003df6:	8962      	ldrh	r2, [r4, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	6961      	ldr	r1, [r4, #20]
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f7ff ff52 	bl	8003ca6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003e02:	7863      	ldrb	r3, [r4, #1]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d157      	bne.n	8003eb8 <USB_EPStartXfer+0x1e8>
 8003e08:	7822      	ldrb	r2, [r4, #0]
 8003e0a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e20:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003e24:	7822      	ldrb	r2, [r4, #0]
 8003e26:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e34:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e40:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003e44:	e77a      	b.n	8003d3c <USB_EPStartXfer+0x6c>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e46:	bb6e      	cbnz	r6, 8003ea4 <USB_EPStartXfer+0x1d4>
 8003e48:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003e4c:	4401      	add	r1, r0
 8003e4e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8003e52:	b973      	cbnz	r3, 8003e72 <USB_EPStartXfer+0x1a2>
 8003e54:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8003e58:	b289      	uxth	r1, r1
 8003e5a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003e5e:	b289      	uxth	r1, r1
 8003e60:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8003e64:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8003e68:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003e6c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8003e70:	e020      	b.n	8003eb4 <USB_EPStartXfer+0x1e4>
 8003e72:	2b3e      	cmp	r3, #62	; 0x3e
 8003e74:	d809      	bhi.n	8003e8a <USB_EPStartXfer+0x1ba>
 8003e76:	0859      	lsrs	r1, r3, #1
 8003e78:	f013 0f01 	tst.w	r3, #1
 8003e7c:	d000      	beq.n	8003e80 <USB_EPStartXfer+0x1b0>
 8003e7e:	3101      	adds	r1, #1
 8003e80:	0289      	lsls	r1, r1, #10
 8003e82:	b289      	uxth	r1, r1
 8003e84:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8003e88:	e014      	b.n	8003eb4 <USB_EPStartXfer+0x1e4>
 8003e8a:	0959      	lsrs	r1, r3, #5
 8003e8c:	f013 0f1f 	tst.w	r3, #31
 8003e90:	d100      	bne.n	8003e94 <USB_EPStartXfer+0x1c4>
 8003e92:	3901      	subs	r1, #1
 8003e94:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003e98:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003e9c:	b289      	uxth	r1, r1
 8003e9e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8003ea2:	e007      	b.n	8003eb4 <USB_EPStartXfer+0x1e4>
 8003ea4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003ea8:	4401      	add	r1, r0
 8003eaa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8003eae:	b299      	uxth	r1, r3
 8003eb0:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8003eb4:	8922      	ldrh	r2, [r4, #8]
 8003eb6:	e79f      	b.n	8003df8 <USB_EPStartXfer+0x128>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d1b3      	bne.n	8003e24 <USB_EPStartXfer+0x154>
 8003ebc:	7822      	ldrb	r2, [r4, #0]
 8003ebe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003ed8:	e7a4      	b.n	8003e24 <USB_EPStartXfer+0x154>
      ep->xfer_len = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	618b      	str	r3, [r1, #24]
      len = ep->xfer_len;
 8003ede:	4613      	mov	r3, r2
 8003ee0:	e701      	b.n	8003ce6 <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ee4:	d809      	bhi.n	8003efa <USB_EPStartXfer+0x22a>
 8003ee6:	085c      	lsrs	r4, r3, #1
 8003ee8:	f013 0f01 	tst.w	r3, #1
 8003eec:	d000      	beq.n	8003ef0 <USB_EPStartXfer+0x220>
 8003eee:	3401      	adds	r4, #1
 8003ef0:	02a4      	lsls	r4, r4, #10
 8003ef2:	b2a4      	uxth	r4, r4
 8003ef4:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8003ef8:	e710      	b.n	8003d1c <USB_EPStartXfer+0x4c>
 8003efa:	095c      	lsrs	r4, r3, #5
 8003efc:	f013 0f1f 	tst.w	r3, #31
 8003f00:	d100      	bne.n	8003f04 <USB_EPStartXfer+0x234>
 8003f02:	3c01      	subs	r4, #1
 8003f04:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003f08:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003f0c:	b2a4      	uxth	r4, r4
 8003f0e:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8003f12:	e703      	b.n	8003d1c <USB_EPStartXfer+0x4c>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003f14:	b9a6      	cbnz	r6, 8003f40 <USB_EPStartXfer+0x270>
 8003f16:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003f1a:	4402      	add	r2, r0
 8003f1c:	780c      	ldrb	r4, [r1, #0]
 8003f1e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003f22:	bb33      	cbnz	r3, 8003f72 <USB_EPStartXfer+0x2a2>
 8003f24:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 8003f28:	b2a4      	uxth	r4, r4
 8003f2a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8003f2e:	b2a4      	uxth	r4, r4
 8003f30:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003f34:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 8003f38:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003f3c:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003f40:	784a      	ldrb	r2, [r1, #1]
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d147      	bne.n	8003fd6 <USB_EPStartXfer+0x306>
 8003f46:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003f4a:	4402      	add	r2, r0
 8003f4c:	780c      	ldrb	r4, [r1, #0]
 8003f4e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003f52:	bb3b      	cbnz	r3, 8003fa4 <USB_EPStartXfer+0x2d4>
 8003f54:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003f64:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6c:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003f70:	e6d4      	b.n	8003d1c <USB_EPStartXfer+0x4c>
 8003f72:	2b3e      	cmp	r3, #62	; 0x3e
 8003f74:	d809      	bhi.n	8003f8a <USB_EPStartXfer+0x2ba>
 8003f76:	085c      	lsrs	r4, r3, #1
 8003f78:	f013 0f01 	tst.w	r3, #1
 8003f7c:	d000      	beq.n	8003f80 <USB_EPStartXfer+0x2b0>
 8003f7e:	3401      	adds	r4, #1
 8003f80:	02a4      	lsls	r4, r4, #10
 8003f82:	b2a4      	uxth	r4, r4
 8003f84:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003f88:	e7da      	b.n	8003f40 <USB_EPStartXfer+0x270>
 8003f8a:	095c      	lsrs	r4, r3, #5
 8003f8c:	f013 0f1f 	tst.w	r3, #31
 8003f90:	d100      	bne.n	8003f94 <USB_EPStartXfer+0x2c4>
 8003f92:	3c01      	subs	r4, #1
 8003f94:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003f98:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003f9c:	b2a4      	uxth	r4, r4
 8003f9e:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003fa2:	e7cd      	b.n	8003f40 <USB_EPStartXfer+0x270>
 8003fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8003fa6:	d809      	bhi.n	8003fbc <USB_EPStartXfer+0x2ec>
 8003fa8:	085c      	lsrs	r4, r3, #1
 8003faa:	f013 0f01 	tst.w	r3, #1
 8003fae:	d000      	beq.n	8003fb2 <USB_EPStartXfer+0x2e2>
 8003fb0:	3401      	adds	r4, #1
 8003fb2:	02a4      	lsls	r4, r4, #10
 8003fb4:	b2a4      	uxth	r4, r4
 8003fb6:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8003fba:	e6af      	b.n	8003d1c <USB_EPStartXfer+0x4c>
 8003fbc:	095c      	lsrs	r4, r3, #5
 8003fbe:	f013 0f1f 	tst.w	r3, #31
 8003fc2:	d100      	bne.n	8003fc6 <USB_EPStartXfer+0x2f6>
 8003fc4:	3c01      	subs	r4, #1
 8003fc6:	ea6f 63c4 	mvn.w	r3, r4, lsl #27
 8003fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003fd4:	e6a2      	b.n	8003d1c <USB_EPStartXfer+0x4c>
 8003fd6:	2a01      	cmp	r2, #1
 8003fd8:	f47f aea0 	bne.w	8003d1c <USB_EPStartXfer+0x4c>
 8003fdc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003fe0:	4402      	add	r2, r0
 8003fe2:	780c      	ldrb	r4, [r1, #0]
 8003fe4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003fee:	e695      	b.n	8003d1c <USB_EPStartXfer+0x4c>

08003ff0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003ff0:	b430      	push	{r4, r5}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003ff2:	085d      	lsrs	r5, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ff4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003ffc:	e007      	b.n	800400e <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003ffe:	f832 4b04 	ldrh.w	r4, [r2], #4
 8004002:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004004:	700c      	strb	r4, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004006:	0a24      	lsrs	r4, r4, #8
 8004008:	704c      	strb	r4, [r1, #1]
    pBuf++;
 800400a:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800400c:	3d01      	subs	r5, #1
 800400e:	2d00      	cmp	r5, #0
 8004010:	d1f5      	bne.n	8003ffe <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004012:	f013 0f01 	tst.w	r3, #1
 8004016:	d001      	beq.n	800401c <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 8004018:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800401a:	700b      	strb	r3, [r1, #0]
  }
}
 800401c:	bc30      	pop	{r4, r5}
 800401e:	4770      	bx	lr

08004020 <USBD_AUDIO_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_AUDIO_CfgDesc);
 8004020:	236d      	movs	r3, #109	; 0x6d
 8004022:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_CfgDesc;
}
 8004024:	4800      	ldr	r0, [pc, #0]	; (8004028 <USBD_AUDIO_GetCfgDesc+0x8>)
 8004026:	4770      	bx	lr
 8004028:	20000008 	.word	0x20000008

0800402c <USBD_AUDIO_DataIn>:
  */
static uint8_t  USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  /* Only OUT data are processed */
  return USBD_OK;
}
 800402c:	2000      	movs	r0, #0
 800402e:	4770      	bx	lr

08004030 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004030:	b510      	push	{r4, lr}
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004032:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8004036:	f641 338a 	movw	r3, #7050	; 0x1b8a
 800403a:	5ce3      	ldrb	r3, [r4, r3]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d001      	beq.n	8004044 <USBD_AUDIO_EP0_RxReady+0x14>
      haudio->control.len = 0U;
    }
  }

  return USBD_OK;
}
 8004040:	2000      	movs	r0, #0
 8004042:	bd10      	pop	{r4, pc}
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8004044:	f641 33cc 	movw	r3, #7116	; 0x1bcc
 8004048:	5ce3      	ldrb	r3, [r4, r3]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d1f8      	bne.n	8004040 <USBD_AUDIO_EP0_RxReady+0x10>
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 800404e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f641 328b 	movw	r2, #7051	; 0x1b8b
 8004058:	5ca0      	ldrb	r0, [r4, r2]
 800405a:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	f641 328a 	movw	r2, #7050	; 0x1b8a
 8004062:	54a3      	strb	r3, [r4, r2]
      haudio->control.len = 0U;
 8004064:	f641 32cb 	movw	r2, #7115	; 0x1bcb
 8004068:	54a3      	strb	r3, [r4, r2]
 800406a:	e7e9      	b.n	8004040 <USBD_AUDIO_EP0_RxReady+0x10>

0800406c <USBD_AUDIO_EP0_TxReady>:
  */
static uint8_t  USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
  /* Only OUT control data are processed */
  return USBD_OK;
}
 800406c:	2000      	movs	r0, #0
 800406e:	4770      	bx	lr

08004070 <USBD_AUDIO_SOF>:
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
  return USBD_OK;
}
 8004070:	2000      	movs	r0, #0
 8004072:	4770      	bx	lr

08004074 <USBD_AUDIO_IsoINIncomplete>:
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8004074:	2000      	movs	r0, #0
 8004076:	4770      	bx	lr

08004078 <USBD_AUDIO_IsoOutIncomplete>:
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8004078:	2000      	movs	r0, #0
 800407a:	4770      	bx	lr

0800407c <USBD_AUDIO_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800407c:	230a      	movs	r3, #10
 800407e:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
}
 8004080:	4800      	ldr	r0, [pc, #0]	; (8004084 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 8004082:	4770      	bx	lr
 8004084:	20000078 	.word	0x20000078

08004088 <USBD_AUDIO_DataOut>:
{
 8004088:	b538      	push	{r3, r4, r5, lr}
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 800408a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if (epnum == AUDIO_OUT_EP)
 800408e:	2901      	cmp	r1, #1
 8004090:	d001      	beq.n	8004096 <USBD_AUDIO_DataOut+0xe>
}
 8004092:	2000      	movs	r0, #0
 8004094:	bd38      	pop	{r3, r4, r5, pc}
 8004096:	4605      	mov	r5, r0
    haudio->wr_ptr += AUDIO_OUT_PACKET;
 8004098:	f641 3288 	movw	r2, #7048	; 0x1b88
 800409c:	5aa3      	ldrh	r3, [r4, r2]
 800409e:	3358      	adds	r3, #88	; 0x58
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	52a3      	strh	r3, [r4, r2]
    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 80040a4:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 80040a8:	d014      	beq.n	80040d4 <USBD_AUDIO_DataOut+0x4c>
    if (haudio->rd_enable == 0U)
 80040aa:	f641 3385 	movw	r3, #7045	; 0x1b85
 80040ae:	5ce3      	ldrb	r3, [r4, r3]
 80040b0:	b92b      	cbnz	r3, 80040be <USBD_AUDIO_DataOut+0x36>
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 80040b2:	f641 3388 	movw	r3, #7048	; 0x1b88
 80040b6:	5ae3      	ldrh	r3, [r4, r3]
 80040b8:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 80040bc:	d01f      	beq.n	80040fe <USBD_AUDIO_DataOut+0x76>
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
 80040be:	f641 3388 	movw	r3, #7048	; 0x1b88
 80040c2:	5ae2      	ldrh	r2, [r4, r3]
 80040c4:	4422      	add	r2, r4
 80040c6:	2358      	movs	r3, #88	; 0x58
 80040c8:	3204      	adds	r2, #4
 80040ca:	2101      	movs	r1, #1
 80040cc:	4628      	mov	r0, r5
 80040ce:	f002 f881 	bl	80061d4 <USBD_LL_PrepareReceive>
 80040d2:	e7de      	b.n	8004092 <USBD_AUDIO_DataOut+0xa>
      haudio->wr_ptr = 0U;
 80040d4:	4613      	mov	r3, r2
 80040d6:	2200      	movs	r2, #0
 80040d8:	52e2      	strh	r2, [r4, r3]
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80040da:	f641 3384 	movw	r3, #7044	; 0x1b84
 80040de:	5ce3      	ldrb	r3, [r4, r3]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d1e2      	bne.n	80040aa <USBD_AUDIO_DataOut+0x22>
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 80040e4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80040f0:	1d20      	adds	r0, r4, #4
 80040f2:	4798      	blx	r3
        haudio->offset = AUDIO_OFFSET_NONE;
 80040f4:	f641 3384 	movw	r3, #7044	; 0x1b84
 80040f8:	2200      	movs	r2, #0
 80040fa:	54e2      	strb	r2, [r4, r3]
 80040fc:	e7d5      	b.n	80040aa <USBD_AUDIO_DataOut+0x22>
        haudio->rd_enable = 1U;
 80040fe:	f641 3385 	movw	r3, #7045	; 0x1b85
 8004102:	2201      	movs	r2, #1
 8004104:	54e2      	strb	r2, [r4, r3]
 8004106:	e7da      	b.n	80040be <USBD_AUDIO_DataOut+0x36>

08004108 <AUDIO_REQ_GetCurrent>:
{
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	4605      	mov	r5, r0
 800410c:	460e      	mov	r6, r1
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 800410e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  memset(haudio->control.data, 0, 64U);
 8004112:	f504 54dc 	add.w	r4, r4, #7040	; 0x1b80
 8004116:	340b      	adds	r4, #11
 8004118:	2240      	movs	r2, #64	; 0x40
 800411a:	2100      	movs	r1, #0
 800411c:	4620      	mov	r0, r4
 800411e:	f002 f9e5 	bl	80064ec <memset>
  USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8004122:	88f2      	ldrh	r2, [r6, #6]
 8004124:	4621      	mov	r1, r4
 8004126:	4628      	mov	r0, r5
 8004128:	f000 fe4a 	bl	8004dc0 <USBD_CtlSendData>
}
 800412c:	bd70      	pop	{r4, r5, r6, pc}

0800412e <AUDIO_REQ_SetCurrent>:
{
 800412e:	b538      	push	{r3, r4, r5, lr}
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004130:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  if (req->wLength)
 8004134:	88ca      	ldrh	r2, [r1, #6]
 8004136:	b902      	cbnz	r2, 800413a <AUDIO_REQ_SetCurrent+0xc>
}
 8004138:	bd38      	pop	{r3, r4, r5, pc}
 800413a:	460c      	mov	r4, r1
    USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800413c:	f505 51dc 	add.w	r1, r5, #7040	; 0x1b80
 8004140:	310b      	adds	r1, #11
 8004142:	f000 fe52 	bl	8004dea <USBD_CtlPrepareRx>
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8004146:	f641 338a 	movw	r3, #7050	; 0x1b8a
 800414a:	2201      	movs	r2, #1
 800414c:	54ea      	strb	r2, [r5, r3]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800414e:	79a2      	ldrb	r2, [r4, #6]
 8004150:	f641 33cb 	movw	r3, #7115	; 0x1bcb
 8004154:	54ea      	strb	r2, [r5, r3]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8004156:	88a3      	ldrh	r3, [r4, #4]
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	f641 32cc 	movw	r2, #7116	; 0x1bcc
 800415e:	54ab      	strb	r3, [r5, r2]
}
 8004160:	e7ea      	b.n	8004138 <AUDIO_REQ_SetCurrent+0xa>
	...

08004164 <USBD_AUDIO_Setup>:
{
 8004164:	b510      	push	{r4, lr}
 8004166:	b082      	sub	sp, #8
  uint16_t status_info = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	f8ad 3006 	strh.w	r3, [sp, #6]
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800416e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004172:	780b      	ldrb	r3, [r1, #0]
 8004174:	f013 0360 	ands.w	r3, r3, #96	; 0x60
 8004178:	d012      	beq.n	80041a0 <USBD_AUDIO_Setup+0x3c>
 800417a:	2b20      	cmp	r3, #32
 800417c:	d15d      	bne.n	800423a <USBD_AUDIO_Setup+0xd6>
      switch (req->bRequest)
 800417e:	784b      	ldrb	r3, [r1, #1]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d005      	beq.n	8004190 <USBD_AUDIO_Setup+0x2c>
 8004184:	2b81      	cmp	r3, #129	; 0x81
 8004186:	d107      	bne.n	8004198 <USBD_AUDIO_Setup+0x34>
          AUDIO_REQ_GetCurrent(pdev, req);
 8004188:	f7ff ffbe 	bl	8004108 <AUDIO_REQ_GetCurrent>
  uint8_t ret = USBD_OK;
 800418c:	2000      	movs	r0, #0
          break;
 800418e:	e057      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
          AUDIO_REQ_SetCurrent(pdev, req);
 8004190:	f7ff ffcd 	bl	800412e <AUDIO_REQ_SetCurrent>
  uint8_t ret = USBD_OK;
 8004194:	2000      	movs	r0, #0
          break;
 8004196:	e053      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
          USBD_CtlError(pdev, req);
 8004198:	f000 faf2 	bl	8004780 <USBD_CtlError>
          ret = USBD_FAIL;
 800419c:	2002      	movs	r0, #2
          break;
 800419e:	e04f      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
      switch (req->bRequest)
 80041a0:	784b      	ldrb	r3, [r1, #1]
 80041a2:	2b0b      	cmp	r3, #11
 80041a4:	d845      	bhi.n	8004232 <USBD_AUDIO_Setup+0xce>
 80041a6:	e8df f003 	tbb	[pc, r3]
 80041aa:	4406      	.short	0x4406
 80041ac:	44444444 	.word	0x44444444
 80041b0:	44444415 	.word	0x44444415
 80041b4:	3224      	.short	0x3224
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d106      	bne.n	80041cc <USBD_AUDIO_Setup+0x68>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80041be:	2202      	movs	r2, #2
 80041c0:	f10d 0106 	add.w	r1, sp, #6
 80041c4:	f000 fdfc 	bl	8004dc0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80041c8:	2000      	movs	r0, #0
 80041ca:	e039      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
            USBD_CtlError(pdev, req);
 80041cc:	f000 fad8 	bl	8004780 <USBD_CtlError>
            ret = USBD_FAIL;
 80041d0:	2002      	movs	r0, #2
 80041d2:	e035      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80041d4:	884b      	ldrh	r3, [r1, #2]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	2b21      	cmp	r3, #33	; 0x21
 80041da:	d001      	beq.n	80041e0 <USBD_AUDIO_Setup+0x7c>
  uint8_t ret = USBD_OK;
 80041dc:	2000      	movs	r0, #0
 80041de:	e02f      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 80041e0:	88ca      	ldrh	r2, [r1, #6]
            USBD_CtlSendData(pdev, pbuf, len);
 80041e2:	2a09      	cmp	r2, #9
 80041e4:	bf28      	it	cs
 80041e6:	2209      	movcs	r2, #9
 80041e8:	4916      	ldr	r1, [pc, #88]	; (8004244 <USBD_AUDIO_Setup+0xe0>)
 80041ea:	f000 fde9 	bl	8004dc0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80041ee:	2000      	movs	r0, #0
 80041f0:	e026      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d105      	bne.n	8004206 <USBD_AUDIO_Setup+0xa2>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 80041fa:	2201      	movs	r2, #1
 80041fc:	4621      	mov	r1, r4
 80041fe:	f000 fddf 	bl	8004dc0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004202:	2000      	movs	r0, #0
 8004204:	e01c      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
            USBD_CtlError(pdev, req);
 8004206:	f000 fabb 	bl	8004780 <USBD_CtlError>
            ret = USBD_FAIL;
 800420a:	2002      	movs	r0, #2
 800420c:	e018      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800420e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004212:	2b03      	cmp	r3, #3
 8004214:	d109      	bne.n	800422a <USBD_AUDIO_Setup+0xc6>
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8004216:	788b      	ldrb	r3, [r1, #2]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d802      	bhi.n	8004222 <USBD_AUDIO_Setup+0xbe>
              haudio->alt_setting = (uint8_t)(req->wValue);
 800421c:	6023      	str	r3, [r4, #0]
  uint8_t ret = USBD_OK;
 800421e:	2000      	movs	r0, #0
 8004220:	e00e      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
              USBD_CtlError(pdev, req);
 8004222:	f000 faad 	bl	8004780 <USBD_CtlError>
              ret = USBD_FAIL;
 8004226:	2002      	movs	r0, #2
 8004228:	e00a      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
            USBD_CtlError(pdev, req);
 800422a:	f000 faa9 	bl	8004780 <USBD_CtlError>
            ret = USBD_FAIL;
 800422e:	2002      	movs	r0, #2
 8004230:	e006      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
          USBD_CtlError(pdev, req);
 8004232:	f000 faa5 	bl	8004780 <USBD_CtlError>
          ret = USBD_FAIL;
 8004236:	2002      	movs	r0, #2
          break;
 8004238:	e002      	b.n	8004240 <USBD_AUDIO_Setup+0xdc>
      USBD_CtlError(pdev, req);
 800423a:	f000 faa1 	bl	8004780 <USBD_CtlError>
      ret = USBD_FAIL;
 800423e:	2002      	movs	r0, #2
}
 8004240:	b002      	add	sp, #8
 8004242:	bd10      	pop	{r4, pc}
 8004244:	2000001a 	.word	0x2000001a

08004248 <USBD_AUDIO_DeInit>:
{
 8004248:	b510      	push	{r4, lr}
 800424a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800424c:	2101      	movs	r1, #1
 800424e:	f001 ff86 	bl	800615e <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
  if (pdev->pClassData != NULL)
 8004258:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800425c:	b15b      	cbz	r3, 8004276 <USBD_AUDIO_DeInit+0x2e>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 800425e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2000      	movs	r0, #0
 8004266:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004268:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800426c:	f001 ffbe 	bl	80061ec <USBD_static_free>
    pdev->pClassData = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
}
 8004276:	2000      	movs	r0, #0
 8004278:	bd10      	pop	{r4, pc}

0800427a <USBD_AUDIO_Init>:
{
 800427a:	b538      	push	{r3, r4, r5, lr}
 800427c:	4605      	mov	r5, r0
  USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800427e:	2358      	movs	r3, #88	; 0x58
 8004280:	2201      	movs	r2, #1
 8004282:	4611      	mov	r1, r2
 8004284:	f001 ff60 	bl	8006148 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8004288:	2301      	movs	r3, #1
 800428a:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
  pdev->pClassData = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800428e:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 8004292:	f001 ffa7 	bl	80061e4 <USBD_static_malloc>
 8004296:	f8c5 02b8 	str.w	r0, [r5, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800429a:	b1f8      	cbz	r0, 80042dc <USBD_AUDIO_Init+0x62>
 800429c:	4604      	mov	r4, r0
    haudio->alt_setting = 0U;
 800429e:	2200      	movs	r2, #0
 80042a0:	6002      	str	r2, [r0, #0]
    haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80042a2:	f641 3384 	movw	r3, #7044	; 0x1b84
 80042a6:	2103      	movs	r1, #3
 80042a8:	54c1      	strb	r1, [r0, r3]
    haudio->wr_ptr = 0U;
 80042aa:	f641 3388 	movw	r3, #7048	; 0x1b88
 80042ae:	52c2      	strh	r2, [r0, r3]
    haudio->rd_ptr = 0U;
 80042b0:	f641 3386 	movw	r3, #7046	; 0x1b86
 80042b4:	52c2      	strh	r2, [r0, r3]
    haudio->rd_enable = 0U;
 80042b6:	f641 3385 	movw	r3, #7045	; 0x1b85
 80042ba:	54c2      	strb	r2, [r0, r3]
    if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 80042bc:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2146      	movs	r1, #70	; 0x46
 80042c4:	f245 6054 	movw	r0, #22100	; 0x5654
 80042c8:	4798      	blx	r3
 80042ca:	b948      	cbnz	r0, 80042e0 <USBD_AUDIO_Init+0x66>
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 80042cc:	2358      	movs	r3, #88	; 0x58
 80042ce:	1d22      	adds	r2, r4, #4
 80042d0:	2101      	movs	r1, #1
 80042d2:	4628      	mov	r0, r5
 80042d4:	f001 ff7e 	bl	80061d4 <USBD_LL_PrepareReceive>
  return USBD_OK;
 80042d8:	2000      	movs	r0, #0
}
 80042da:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80042dc:	2002      	movs	r0, #2
 80042de:	e7fc      	b.n	80042da <USBD_AUDIO_Init+0x60>
      return USBD_FAIL;
 80042e0:	2002      	movs	r0, #2
 80042e2:	e7fa      	b.n	80042da <USBD_AUDIO_Init+0x60>

080042e4 <USBD_AUDIO_RegisterInterface>:
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                      USBD_AUDIO_ItfTypeDef *fops)
{
  if (fops != NULL)
 80042e4:	b109      	cbz	r1, 80042ea <USBD_AUDIO_RegisterInterface+0x6>
  {
    pdev->pUserData = fops;
 80042e6:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
  }

  return USBD_OK;
}
 80042ea:	2000      	movs	r0, #0
 80042ec:	4770      	bx	lr
	...

080042f0 <USBD_MIDI_DataIn>:
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
  return 0;
}

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
  if(USB_Tx_State == 1) {
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <USBD_MIDI_DataIn+0x14>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <USBD_MIDI_DataIn+0xc>
    USB_Tx_State = 0;
  }
  return USBD_OK;
}
 80042f8:	2000      	movs	r0, #0
 80042fa:	4770      	bx	lr
    USB_Tx_State = 0;
 80042fc:	4b01      	ldr	r3, [pc, #4]	; (8004304 <USBD_MIDI_DataIn+0x14>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e7f9      	b.n	80042f8 <USBD_MIDI_DataIn+0x8>
 8004304:	20000274 	.word	0x20000274

08004308 <USBD_MIDI_GetCfgDesc>:
	}
	return result;
}

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
  *length = sizeof (USBD_MIDI_CfgDesc);
 8004308:	2365      	movs	r3, #101	; 0x65
 800430a:	8003      	strh	r3, [r0, #0]
  return USBD_MIDI_CfgDesc;
}
 800430c:	4800      	ldr	r0, [pc, #0]	; (8004310 <USBD_MIDI_GetCfgDesc+0x8>)
 800430e:	4770      	bx	lr
 8004310:	200000bc 	.word	0x200000bc

08004314 <USBD_MIDI_DataOut>:
{      
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	4604      	mov	r4, r0
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 800431a:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800431e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004322:	310a      	adds	r1, #10
 8004324:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004328:	8899      	ldrh	r1, [r3, #4]
 800432a:	ad02      	add	r5, sp, #8
 800432c:	f825 1d02 	strh.w	r1, [r5, #-2]!
  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 8004330:	6833      	ldr	r3, [r6, #0]
 8004332:	480d      	ldr	r0, [pc, #52]	; (8004368 <USBD_MIDI_DataOut+0x54>)
 8004334:	4798      	blx	r3
  pmidi->pIf_MidiTx((uint8_t*)&USB_Rx_Cnt, 2);
 8004336:	6873      	ldr	r3, [r6, #4]
 8004338:	2102      	movs	r1, #2
 800433a:	4628      	mov	r0, r5
 800433c:	4798      	blx	r3
  for(uint8_t i = 0; i < USB_Rx_Cnt; i++) USB_Rx_Buffer[i] = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	e004      	b.n	800434c <USBD_MIDI_DataOut+0x38>
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <USBD_MIDI_DataOut+0x54>)
 8004344:	2100      	movs	r1, #0
 8004346:	54d1      	strb	r1, [r2, r3]
 8004348:	3301      	adds	r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	b29a      	uxth	r2, r3
 800434e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8004352:	428a      	cmp	r2, r1
 8004354:	d3f5      	bcc.n	8004342 <USBD_MIDI_DataOut+0x2e>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)&(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8004356:	2340      	movs	r3, #64	; 0x40
 8004358:	4a03      	ldr	r2, [pc, #12]	; (8004368 <USBD_MIDI_DataOut+0x54>)
 800435a:	2101      	movs	r1, #1
 800435c:	4620      	mov	r0, r4
 800435e:	f001 ff39 	bl	80061d4 <USBD_LL_PrepareReceive>
}
 8004362:	2000      	movs	r0, #0
 8004364:	b002      	add	sp, #8
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	20000688 	.word	0x20000688

0800436c <USBD_MIDI_DeInit>:
static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4605      	mov	r5, r0
  pInstance = NULL;
 8004370:	2400      	movs	r4, #0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <USBD_MIDI_DeInit+0x1c>)
 8004374:	605c      	str	r4, [r3, #4]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 8004376:	2181      	movs	r1, #129	; 0x81
 8004378:	f001 fef1 	bl	800615e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800437c:	2101      	movs	r1, #1
 800437e:	4628      	mov	r0, r5
 8004380:	f001 feed 	bl	800615e <USBD_LL_CloseEP>
}
 8004384:	4620      	mov	r0, r4
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	20000274 	.word	0x20000274

0800438c <USBD_MIDI_Init>:
static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800438c:	b510      	push	{r4, lr}
 800438e:	4604      	mov	r4, r0
  pInstance = pdev;
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <USBD_MIDI_Init+0x30>)
 8004392:	6058      	str	r0, [r3, #4]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 8004394:	2340      	movs	r3, #64	; 0x40
 8004396:	2202      	movs	r2, #2
 8004398:	2181      	movs	r1, #129	; 0x81
 800439a:	f001 fed5 	bl	8006148 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 800439e:	2340      	movs	r3, #64	; 0x40
 80043a0:	2202      	movs	r2, #2
 80043a2:	2101      	movs	r1, #1
 80043a4:	4620      	mov	r0, r4
 80043a6:	f001 fecf 	bl	8006148 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80043aa:	2340      	movs	r3, #64	; 0x40
 80043ac:	4a04      	ldr	r2, [pc, #16]	; (80043c0 <USBD_MIDI_Init+0x34>)
 80043ae:	2101      	movs	r1, #1
 80043b0:	4620      	mov	r0, r4
 80043b2:	f001 ff0f 	bl	80061d4 <USBD_LL_PrepareReceive>
}
 80043b6:	2000      	movs	r0, #0
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	bf00      	nop
 80043bc:	20000274 	.word	0x20000274
 80043c0:	20000688 	.word	0x20000688

080043c4 <USBD_MIDI_SendPacket>:
	if(USB_Tx_State != 1) {
 80043c4:	4b1d      	ldr	r3, [pc, #116]	; (800443c <USBD_MIDI_SendPacket+0x78>)
 80043c6:	7818      	ldrb	r0, [r3, #0]
 80043c8:	2801      	cmp	r0, #1
 80043ca:	d036      	beq.n	800443a <USBD_MIDI_SendPacket+0x76>
		if(APP_Tx_ptr_out == APP_TX_DATA_SIZE) {
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d01f      	beq.n	8004412 <USBD_MIDI_SendPacket+0x4e>
		if(APP_Tx_ptr_out == APP_Tx_ptr_in) {
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <USBD_MIDI_SendPacket+0x78>)
 80043d4:	6899      	ldr	r1, [r3, #8]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4299      	cmp	r1, r3
 80043da:	d01e      	beq.n	800441a <USBD_MIDI_SendPacket+0x56>
uint8_t USBD_MIDI_SendPacket (){
 80043dc:	b510      	push	{r4, lr}
		if(APP_Tx_ptr_out > APP_Tx_ptr_in) {
 80043de:	4299      	cmp	r1, r3
 80043e0:	d91f      	bls.n	8004422 <USBD_MIDI_SendPacket+0x5e>
			APP_Tx_length = APP_TX_DATA_SIZE - APP_Tx_ptr_out;
 80043e2:	f1c1 0340 	rsb	r3, r1, #64	; 0x40
 80043e6:	4a15      	ldr	r2, [pc, #84]	; (800443c <USBD_MIDI_SendPacket+0x78>)
 80043e8:	6113      	str	r3, [r2, #16]
		if(APP_Tx_length > MIDI_DATA_IN_PACKET_SIZE) {
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <USBD_MIDI_SendPacket+0x78>)
 80043ec:	6918      	ldr	r0, [r3, #16]
 80043ee:	2840      	cmp	r0, #64	; 0x40
 80043f0:	d91b      	bls.n	800442a <USBD_MIDI_SendPacket+0x66>
			USB_Tx_ptr = APP_Tx_ptr_out;
 80043f2:	b28c      	uxth	r4, r1
			APP_Tx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 80043f4:	3140      	adds	r1, #64	; 0x40
 80043f6:	6099      	str	r1, [r3, #8]
			APP_Tx_length -= MIDI_DATA_IN_PACKET_SIZE;
 80043f8:	3840      	subs	r0, #64	; 0x40
 80043fa:	6118      	str	r0, [r3, #16]
			USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 80043fc:	2340      	movs	r3, #64	; 0x40
		USB_Tx_State = 1;
 80043fe:	480f      	ldr	r0, [pc, #60]	; (800443c <USBD_MIDI_SendPacket+0x78>)
 8004400:	2101      	movs	r1, #1
 8004402:	7001      	strb	r1, [r0, #0]
		result = USBD_LL_Transmit(pInstance,MIDI_IN_EP,(uint8_t*)&APP_Tx_Buffer[USB_Tx_ptr],USB_Tx_length);
 8004404:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <USBD_MIDI_SendPacket+0x7c>)
 8004406:	4422      	add	r2, r4
 8004408:	2181      	movs	r1, #129	; 0x81
 800440a:	6840      	ldr	r0, [r0, #4]
 800440c:	f001 feda 	bl	80061c4 <USBD_LL_Transmit>
}
 8004410:	bd10      	pop	{r4, pc}
			APP_Tx_ptr_out = 0;
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <USBD_MIDI_SendPacket+0x78>)
 8004414:	2200      	movs	r2, #0
 8004416:	609a      	str	r2, [r3, #8]
 8004418:	e7db      	b.n	80043d2 <USBD_MIDI_SendPacket+0xe>
			USB_Tx_State = 0;
 800441a:	2000      	movs	r0, #0
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <USBD_MIDI_SendPacket+0x78>)
 800441e:	7018      	strb	r0, [r3, #0]
			return USBD_OK;
 8004420:	4770      	bx	lr
			APP_Tx_length = APP_Tx_ptr_in - APP_Tx_ptr_out;
 8004422:	1a5b      	subs	r3, r3, r1
 8004424:	4a05      	ldr	r2, [pc, #20]	; (800443c <USBD_MIDI_SendPacket+0x78>)
 8004426:	6113      	str	r3, [r2, #16]
 8004428:	e7df      	b.n	80043ea <USBD_MIDI_SendPacket+0x26>
			USB_Tx_ptr = APP_Tx_ptr_out;
 800442a:	b28c      	uxth	r4, r1
			USB_Tx_length = APP_Tx_length;
 800442c:	b283      	uxth	r3, r0
			APP_Tx_ptr_out += APP_Tx_length;
 800442e:	4a03      	ldr	r2, [pc, #12]	; (800443c <USBD_MIDI_SendPacket+0x78>)
 8004430:	4401      	add	r1, r0
 8004432:	6091      	str	r1, [r2, #8]
			APP_Tx_length = 0;
 8004434:	2100      	movs	r1, #0
 8004436:	6111      	str	r1, [r2, #16]
 8004438:	e7e1      	b.n	80043fe <USBD_MIDI_SendPacket+0x3a>
}
 800443a:	4770      	bx	lr
 800443c:	20000274 	.word	0x20000274
 8004440:	20000648 	.word	0x20000648

08004444 <USBD_MIDI_RegisterInterface>:

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
  uint8_t ret = USBD_FAIL;
  
  if(fops != NULL){
 8004444:	b119      	cbz	r1, 800444e <USBD_MIDI_RegisterInterface+0xa>
    pdev->pUserData= fops;
 8004446:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;    
 800444a:	2000      	movs	r0, #0
 800444c:	4770      	bx	lr
  uint8_t ret = USBD_FAIL;
 800444e:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8004450:	4770      	bx	lr

08004452 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004452:	b198      	cbz	r0, 800447c <USBD_Init+0x2a>
{
 8004454:	b508      	push	{r3, lr}
 8004456:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004458:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 800445c:	b110      	cbz	r0, 8004464 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800445e:	2000      	movs	r0, #0
 8004460:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004464:	b109      	cbz	r1, 800446a <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8004466:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
 800446a:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800446c:	2301      	movs	r3, #1
 800446e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8004472:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004474:	f001 fe1e 	bl	80060b4 <USBD_LL_Init>

  return USBD_OK;
 8004478:	2000      	movs	r0, #0
}
 800447a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800447c:	2002      	movs	r0, #2
}
 800447e:	4770      	bx	lr

08004480 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004480:	b119      	cbz	r1, 800448a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004482:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004486:	2000      	movs	r0, #0
 8004488:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800448a:	2002      	movs	r0, #2
  }

  return status;
}
 800448c:	4770      	bx	lr

0800448e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800448e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004490:	f001 fe4a 	bl	8006128 <USBD_LL_Start>

  return USBD_OK;
}
 8004494:	2000      	movs	r0, #0
 8004496:	bd08      	pop	{r3, pc}

08004498 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8004498:	b510      	push	{r4, lr}
 800449a:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800449c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	7901      	ldrb	r1, [r0, #4]
 80044a4:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 80044a6:	4620      	mov	r0, r4
 80044a8:	f001 fe46 	bl	8006138 <USBD_LL_Stop>

  return USBD_OK;
}
 80044ac:	2000      	movs	r0, #0
 80044ae:	bd10      	pop	{r4, pc}

080044b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044b0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80044b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044b6:	b133      	cbz	r3, 80044c6 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4798      	blx	r3
 80044bc:	b908      	cbnz	r0, 80044c2 <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 80044be:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 80044c0:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80044c2:	2002      	movs	r0, #2
 80044c4:	e7fc      	b.n	80044c0 <USBD_SetClassConfig+0x10>
 80044c6:	2002      	movs	r0, #2
 80044c8:	e7fa      	b.n	80044c0 <USBD_SetClassConfig+0x10>

080044ca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044ca:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80044cc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4798      	blx	r3

  return USBD_OK;
}
 80044d4:	2000      	movs	r0, #0
 80044d6:	bd08      	pop	{r3, pc}

080044d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80044dc:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 f939 	bl	8004758 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80044ec:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80044f0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80044f4:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 80044f8:	f001 031f 	and.w	r3, r1, #31
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d00e      	beq.n	800451e <USBD_LL_SetupStage+0x46>
 8004500:	b13b      	cbz	r3, 8004512 <USBD_LL_SetupStage+0x3a>
 8004502:	2b02      	cmp	r3, #2
 8004504:	d010      	beq.n	8004528 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004506:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800450a:	4620      	mov	r0, r4
 800450c:	f001 fe2f 	bl	800616e <USBD_LL_StallEP>
      break;
 8004510:	e003      	b.n	800451a <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004512:	4629      	mov	r1, r5
 8004514:	4620      	mov	r0, r4
 8004516:	f000 facc 	bl	8004ab2 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800451a:	2000      	movs	r0, #0
 800451c:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800451e:	4629      	mov	r1, r5
 8004520:	4620      	mov	r0, r4
 8004522:	f000 fafa 	bl	8004b1a <USBD_StdItfReq>
      break;
 8004526:	e7f8      	b.n	800451a <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004528:	4629      	mov	r1, r5
 800452a:	4620      	mov	r0, r4
 800452c:	f000 fb25 	bl	8004b7a <USBD_StdEPReq>
      break;
 8004530:	e7f3      	b.n	800451a <USBD_LL_SetupStage+0x42>

08004532 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004532:	b538      	push	{r3, r4, r5, lr}
 8004534:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004536:	bba1      	cbnz	r1, 80045a2 <USBD_LL_DataOutStage+0x70>
 8004538:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800453a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800453e:	2b03      	cmp	r3, #3
 8004540:	d003      	beq.n	800454a <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004542:	2b05      	cmp	r3, #5
 8004544:	d024      	beq.n	8004590 <USBD_LL_DataOutStage+0x5e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004546:	2000      	movs	r0, #0
 8004548:	e037      	b.n	80045ba <USBD_LL_DataOutStage+0x88>
      if (pep->rem_length > pep->maxpacket)
 800454a:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 800454e:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 8004552:	4293      	cmp	r3, r2
 8004554:	d90d      	bls.n	8004572 <USBD_LL_DataOutStage+0x40>
        pep->rem_length -= pep->maxpacket;
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800455c:	429a      	cmp	r2, r3
 800455e:	d906      	bls.n	800456e <USBD_LL_DataOutStage+0x3c>
 8004560:	b29a      	uxth	r2, r3
 8004562:	4601      	mov	r1, r0
 8004564:	4620      	mov	r0, r4
 8004566:	f000 fc4f 	bl	8004e08 <USBD_CtlContinueRx>
  return USBD_OK;
 800456a:	2000      	movs	r0, #0
 800456c:	e025      	b.n	80045ba <USBD_LL_DataOutStage+0x88>
        USBD_CtlContinueRx(pdev, pdata,
 800456e:	b292      	uxth	r2, r2
 8004570:	e7f7      	b.n	8004562 <USBD_LL_DataOutStage+0x30>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004572:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	b12b      	cbz	r3, 8004586 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800457a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800457e:	2a03      	cmp	r2, #3
 8004580:	d101      	bne.n	8004586 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8004582:	4620      	mov	r0, r4
 8004584:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004586:	4620      	mov	r0, r4
 8004588:	f000 fc46 	bl	8004e18 <USBD_CtlSendStatus>
  return USBD_OK;
 800458c:	2000      	movs	r0, #0
 800458e:	e014      	b.n	80045ba <USBD_LL_DataOutStage+0x88>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004590:	2500      	movs	r5, #0
 8004592:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004596:	4629      	mov	r1, r5
 8004598:	4620      	mov	r0, r4
 800459a:	f001 fde8 	bl	800616e <USBD_LL_StallEP>
  return USBD_OK;
 800459e:	4628      	mov	r0, r5
 80045a0:	e00b      	b.n	80045ba <USBD_LL_DataOutStage+0x88>
 80045a2:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 80045a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	b13b      	cbz	r3, 80045bc <USBD_LL_DataOutStage+0x8a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045ac:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80045b0:	2903      	cmp	r1, #3
 80045b2:	d105      	bne.n	80045c0 <USBD_LL_DataOutStage+0x8e>
    pdev->pClass->DataOut(pdev, epnum);
 80045b4:	4611      	mov	r1, r2
 80045b6:	4798      	blx	r3
  return USBD_OK;
 80045b8:	2000      	movs	r0, #0
}
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80045bc:	2002      	movs	r0, #2
 80045be:	e7fc      	b.n	80045ba <USBD_LL_DataOutStage+0x88>
 80045c0:	2002      	movs	r0, #2
 80045c2:	e7fa      	b.n	80045ba <USBD_LL_DataOutStage+0x88>

080045c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80045c4:	b510      	push	{r4, lr}
 80045c6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80045c8:	2900      	cmp	r1, #0
 80045ca:	d153      	bne.n	8004674 <USBD_LL_DataInStage+0xb0>
 80045cc:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80045ce:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d00c      	beq.n	80045f0 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d000      	beq.n	80045dc <USBD_LL_DataInStage+0x18>
 80045da:	b91b      	cbnz	r3, 80045e4 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	4620      	mov	r0, r4
 80045e0:	f001 fdc5 	bl	800616e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80045e4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d03f      	beq.n	800466c <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80045ec:	2000      	movs	r0, #0
 80045ee:	e04d      	b.n	800468c <USBD_LL_DataInStage+0xc8>
      if (pep->rem_length > pep->maxpacket)
 80045f0:	6a23      	ldr	r3, [r4, #32]
 80045f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d81d      	bhi.n	8004634 <USBD_LL_DataInStage+0x70>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80045f8:	69e1      	ldr	r1, [r4, #28]
 80045fa:	fbb1 f3f2 	udiv	r3, r1, r2
 80045fe:	fb02 1313 	mls	r3, r2, r3, r1
 8004602:	b92b      	cbnz	r3, 8004610 <USBD_LL_DataInStage+0x4c>
 8004604:	428a      	cmp	r2, r1
 8004606:	d803      	bhi.n	8004610 <USBD_LL_DataInStage+0x4c>
            (pep->total_length < pdev->ep0_data_len))
 8004608:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800460c:	4299      	cmp	r1, r3
 800460e:	d31f      	bcc.n	8004650 <USBD_LL_DataInStage+0x8c>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004610:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	b12b      	cbz	r3, 8004624 <USBD_LL_DataInStage+0x60>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004618:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800461c:	2a03      	cmp	r2, #3
 800461e:	d101      	bne.n	8004624 <USBD_LL_DataInStage+0x60>
            pdev->pClass->EP0_TxSent(pdev);
 8004620:	4620      	mov	r0, r4
 8004622:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	4620      	mov	r0, r4
 8004628:	f001 fda1 	bl	800616e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800462c:	4620      	mov	r0, r4
 800462e:	f000 fbfe 	bl	8004e2e <USBD_CtlReceiveStatus>
 8004632:	e7d7      	b.n	80045e4 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8004634:	1a9a      	subs	r2, r3, r2
 8004636:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004638:	b292      	uxth	r2, r2
 800463a:	4601      	mov	r1, r0
 800463c:	4620      	mov	r0, r4
 800463e:	f000 fbcc 	bl	8004dda <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004642:	2300      	movs	r3, #0
 8004644:	461a      	mov	r2, r3
 8004646:	4619      	mov	r1, r3
 8004648:	4620      	mov	r0, r4
 800464a:	f001 fdc3 	bl	80061d4 <USBD_LL_PrepareReceive>
 800464e:	e7c9      	b.n	80045e4 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004650:	2200      	movs	r2, #0
 8004652:	4611      	mov	r1, r2
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fbc0 	bl	8004dda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800465a:	2100      	movs	r1, #0
 800465c:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004660:	460b      	mov	r3, r1
 8004662:	460a      	mov	r2, r1
 8004664:	4620      	mov	r0, r4
 8004666:	f001 fdb5 	bl	80061d4 <USBD_LL_PrepareReceive>
 800466a:	e7bb      	b.n	80045e4 <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 800466c:	2000      	movs	r0, #0
 800466e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8004672:	e00b      	b.n	800468c <USBD_LL_DataInStage+0xc8>
 8004674:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 8004676:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	b13b      	cbz	r3, 800468e <USBD_LL_DataInStage+0xca>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800467e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004682:	2903      	cmp	r1, #3
 8004684:	d105      	bne.n	8004692 <USBD_LL_DataInStage+0xce>
    pdev->pClass->DataIn(pdev, epnum);
 8004686:	4611      	mov	r1, r2
 8004688:	4798      	blx	r3
  return USBD_OK;
 800468a:	2000      	movs	r0, #0
}
 800468c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800468e:	2002      	movs	r0, #2
 8004690:	e7fc      	b.n	800468c <USBD_LL_DataInStage+0xc8>
 8004692:	2002      	movs	r0, #2
 8004694:	e7fa      	b.n	800468c <USBD_LL_DataInStage+0xc8>

08004696 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004696:	b570      	push	{r4, r5, r6, lr}
 8004698:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800469a:	2340      	movs	r3, #64	; 0x40
 800469c:	2200      	movs	r2, #0
 800469e:	4611      	mov	r1, r2
 80046a0:	f001 fd52 	bl	8006148 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80046a4:	2501      	movs	r5, #1
 80046a6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80046aa:	2640      	movs	r6, #64	; 0x40
 80046ac:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80046b0:	4633      	mov	r3, r6
 80046b2:	2200      	movs	r2, #0
 80046b4:	2180      	movs	r1, #128	; 0x80
 80046b6:	4620      	mov	r0, r4
 80046b8:	f001 fd46 	bl	8006148 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80046bc:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80046be:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046c0:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80046ca:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80046cc:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 80046d0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80046d4:	b12b      	cbz	r3, 80046e2 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80046d6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2100      	movs	r1, #0
 80046de:	4620      	mov	r0, r4
 80046e0:	4798      	blx	r3
  }

  return USBD_OK;
}
 80046e2:	2000      	movs	r0, #0
 80046e4:	bd70      	pop	{r4, r5, r6, pc}

080046e6 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80046e6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80046e8:	2000      	movs	r0, #0
 80046ea:	4770      	bx	lr

080046ec <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80046ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046f0:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046f4:	2304      	movs	r3, #4
 80046f6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80046fa:	2000      	movs	r0, #0
 80046fc:	4770      	bx	lr

080046fe <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80046fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004702:	2b04      	cmp	r3, #4
 8004704:	d001      	beq.n	800470a <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8004706:	2000      	movs	r0, #0
 8004708:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800470a:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800470e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8004712:	e7f8      	b.n	8004706 <USBD_LL_Resume+0x8>

08004714 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004714:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004716:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800471a:	2b03      	cmp	r3, #3
 800471c:	d001      	beq.n	8004722 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800471e:	2000      	movs	r0, #0
 8004720:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8004722:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f8      	beq.n	800471e <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800472c:	4798      	blx	r3
 800472e:	e7f6      	b.n	800471e <USBD_LL_SOF+0xa>

08004730 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 8004730:	2300      	movs	r3, #0

  while (*buf != '\0')
 8004732:	e002      	b.n	800473a <USBD_GetLen+0xa>
  {
    len++;
 8004734:	3301      	adds	r3, #1
 8004736:	b2db      	uxtb	r3, r3
    buf++;
 8004738:	3001      	adds	r0, #1
  while (*buf != '\0')
 800473a:	7802      	ldrb	r2, [r0, #0]
 800473c:	2a00      	cmp	r2, #0
 800473e:	d1f9      	bne.n	8004734 <USBD_GetLen+0x4>
  }

  return len;
}
 8004740:	4618      	mov	r0, r3
 8004742:	4770      	bx	lr

08004744 <USBD_SetFeature>:
{
 8004744:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004746:	884b      	ldrh	r3, [r1, #2]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d000      	beq.n	800474e <USBD_SetFeature+0xa>
}
 800474c:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800474e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004752:	f000 fb61 	bl	8004e18 <USBD_CtlSendStatus>
}
 8004756:	e7f9      	b.n	800474c <USBD_SetFeature+0x8>

08004758 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004758:	780b      	ldrb	r3, [r1, #0]
 800475a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800475c:	784b      	ldrb	r3, [r1, #1]
 800475e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004760:	788b      	ldrb	r3, [r1, #2]
 8004762:	78ca      	ldrb	r2, [r1, #3]
 8004764:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004768:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800476a:	790b      	ldrb	r3, [r1, #4]
 800476c:	794a      	ldrb	r2, [r1, #5]
 800476e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004772:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004774:	798b      	ldrb	r3, [r1, #6]
 8004776:	79ca      	ldrb	r2, [r1, #7]
 8004778:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800477c:	80c3      	strh	r3, [r0, #6]
}
 800477e:	4770      	bx	lr

08004780 <USBD_CtlError>:
{
 8004780:	b510      	push	{r4, lr}
 8004782:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	f001 fcf2 	bl	800616e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800478a:	2100      	movs	r1, #0
 800478c:	4620      	mov	r0, r4
 800478e:	f001 fcee 	bl	800616e <USBD_LL_StallEP>
}
 8004792:	bd10      	pop	{r4, pc}

08004794 <USBD_GetDescriptor>:
{
 8004794:	b530      	push	{r4, r5, lr}
 8004796:	b083      	sub	sp, #12
 8004798:	4605      	mov	r5, r0
 800479a:	460c      	mov	r4, r1
  uint16_t len = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80047a2:	884a      	ldrh	r2, [r1, #2]
 80047a4:	0a13      	lsrs	r3, r2, #8
 80047a6:	3b01      	subs	r3, #1
 80047a8:	2b06      	cmp	r3, #6
 80047aa:	f200 80a4 	bhi.w	80048f6 <USBD_GetDescriptor+0x162>
 80047ae:	e8df f003 	tbb	[pc, r3]
 80047b2:	1804      	.short	0x1804
 80047b4:	86a2a22c 	.word	0x86a2a22c
 80047b8:	93          	.byte	0x93
 80047b9:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80047ba:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f10d 0106 	add.w	r1, sp, #6
 80047c4:	7c00      	ldrb	r0, [r0, #16]
 80047c6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80047c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80047cc:	b11a      	cbz	r2, 80047d6 <USBD_GetDescriptor+0x42>
 80047ce:	88e3      	ldrh	r3, [r4, #6]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f040 8094 	bne.w	80048fe <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 80047d6:	88e3      	ldrh	r3, [r4, #6]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 809a 	beq.w	8004912 <USBD_GetDescriptor+0x17e>
}
 80047de:	b003      	add	sp, #12
 80047e0:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047e2:	7c03      	ldrb	r3, [r0, #16]
 80047e4:	b943      	cbnz	r3, 80047f8 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80047e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	f10d 0006 	add.w	r0, sp, #6
 80047f0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80047f2:	2302      	movs	r3, #2
 80047f4:	7043      	strb	r3, [r0, #1]
 80047f6:	e7e7      	b.n	80047c8 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80047f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	f10d 0006 	add.w	r0, sp, #6
 8004802:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004804:	2302      	movs	r3, #2
 8004806:	7043      	strb	r3, [r0, #1]
 8004808:	e7de      	b.n	80047c8 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	2a05      	cmp	r2, #5
 800480e:	d852      	bhi.n	80048b6 <USBD_GetDescriptor+0x122>
 8004810:	e8df f002 	tbb	[pc, r2]
 8004814:	2a1d1003 	.word	0x2a1d1003
 8004818:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800481a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	b123      	cbz	r3, 800482c <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004822:	f10d 0106 	add.w	r1, sp, #6
 8004826:	7c00      	ldrb	r0, [r0, #16]
 8004828:	4798      	blx	r3
 800482a:	e7cd      	b.n	80047c8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800482c:	4621      	mov	r1, r4
 800482e:	f7ff ffa7 	bl	8004780 <USBD_CtlError>
 8004832:	e7d4      	b.n	80047de <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004834:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	b123      	cbz	r3, 8004846 <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800483c:	f10d 0106 	add.w	r1, sp, #6
 8004840:	7c00      	ldrb	r0, [r0, #16]
 8004842:	4798      	blx	r3
 8004844:	e7c0      	b.n	80047c8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004846:	4621      	mov	r1, r4
 8004848:	f7ff ff9a 	bl	8004780 <USBD_CtlError>
 800484c:	e7c7      	b.n	80047de <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800484e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	b123      	cbz	r3, 8004860 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004856:	f10d 0106 	add.w	r1, sp, #6
 800485a:	7c00      	ldrb	r0, [r0, #16]
 800485c:	4798      	blx	r3
 800485e:	e7b3      	b.n	80047c8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004860:	4621      	mov	r1, r4
 8004862:	f7ff ff8d 	bl	8004780 <USBD_CtlError>
 8004866:	e7ba      	b.n	80047de <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004868:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	b123      	cbz	r3, 800487a <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004870:	f10d 0106 	add.w	r1, sp, #6
 8004874:	7c00      	ldrb	r0, [r0, #16]
 8004876:	4798      	blx	r3
 8004878:	e7a6      	b.n	80047c8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800487a:	4621      	mov	r1, r4
 800487c:	f7ff ff80 	bl	8004780 <USBD_CtlError>
 8004880:	e7ad      	b.n	80047de <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004882:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	b123      	cbz	r3, 8004894 <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800488a:	f10d 0106 	add.w	r1, sp, #6
 800488e:	7c00      	ldrb	r0, [r0, #16]
 8004890:	4798      	blx	r3
 8004892:	e799      	b.n	80047c8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004894:	4621      	mov	r1, r4
 8004896:	f7ff ff73 	bl	8004780 <USBD_CtlError>
 800489a:	e7a0      	b.n	80047de <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800489c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	b123      	cbz	r3, 80048ae <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80048a4:	f10d 0106 	add.w	r1, sp, #6
 80048a8:	7c00      	ldrb	r0, [r0, #16]
 80048aa:	4798      	blx	r3
 80048ac:	e78c      	b.n	80047c8 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80048ae:	4621      	mov	r1, r4
 80048b0:	f7ff ff66 	bl	8004780 <USBD_CtlError>
 80048b4:	e793      	b.n	80047de <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 80048b6:	4621      	mov	r1, r4
 80048b8:	f7ff ff62 	bl	8004780 <USBD_CtlError>
 80048bc:	e78f      	b.n	80047de <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048be:	7c03      	ldrb	r3, [r0, #16]
 80048c0:	b933      	cbnz	r3, 80048d0 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80048c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80048c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c8:	f10d 0006 	add.w	r0, sp, #6
 80048cc:	4798      	blx	r3
 80048ce:	e77b      	b.n	80047c8 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80048d0:	4621      	mov	r1, r4
 80048d2:	f7ff ff55 	bl	8004780 <USBD_CtlError>
 80048d6:	e782      	b.n	80047de <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048d8:	7c03      	ldrb	r3, [r0, #16]
 80048da:	b943      	cbnz	r3, 80048ee <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80048dc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f10d 0006 	add.w	r0, sp, #6
 80048e6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80048e8:	2307      	movs	r3, #7
 80048ea:	7043      	strb	r3, [r0, #1]
 80048ec:	e76c      	b.n	80047c8 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80048ee:	4621      	mov	r1, r4
 80048f0:	f7ff ff46 	bl	8004780 <USBD_CtlError>
 80048f4:	e773      	b.n	80047de <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 80048f6:	4621      	mov	r1, r4
 80048f8:	f7ff ff42 	bl	8004780 <USBD_CtlError>
 80048fc:	e76f      	b.n	80047de <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 80048fe:	429a      	cmp	r2, r3
 8004900:	bf28      	it	cs
 8004902:	461a      	movcs	r2, r3
 8004904:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004908:	4601      	mov	r1, r0
 800490a:	4628      	mov	r0, r5
 800490c:	f000 fa58 	bl	8004dc0 <USBD_CtlSendData>
 8004910:	e761      	b.n	80047d6 <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8004912:	4628      	mov	r0, r5
 8004914:	f000 fa80 	bl	8004e18 <USBD_CtlSendStatus>
 8004918:	e761      	b.n	80047de <USBD_GetDescriptor+0x4a>

0800491a <USBD_SetAddress>:
{
 800491a:	b538      	push	{r3, r4, r5, lr}
 800491c:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800491e:	888b      	ldrh	r3, [r1, #4]
 8004920:	b9f3      	cbnz	r3, 8004960 <USBD_SetAddress+0x46>
 8004922:	88cb      	ldrh	r3, [r1, #6]
 8004924:	b9e3      	cbnz	r3, 8004960 <USBD_SetAddress+0x46>
 8004926:	884b      	ldrh	r3, [r1, #2]
 8004928:	2b7f      	cmp	r3, #127	; 0x7f
 800492a:	d819      	bhi.n	8004960 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800492c:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004930:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004934:	2b03      	cmp	r3, #3
 8004936:	d00c      	beq.n	8004952 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8004938:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800493c:	4629      	mov	r1, r5
 800493e:	f001 fc39 	bl	80061b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004942:	4620      	mov	r0, r4
 8004944:	f000 fa68 	bl	8004e18 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004948:	b135      	cbz	r5, 8004958 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800494a:	2302      	movs	r3, #2
 800494c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004950:	e009      	b.n	8004966 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8004952:	f7ff ff15 	bl	8004780 <USBD_CtlError>
 8004956:	e006      	b.n	8004966 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004958:	2301      	movs	r3, #1
 800495a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800495e:	e002      	b.n	8004966 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8004960:	4620      	mov	r0, r4
 8004962:	f7ff ff0d 	bl	8004780 <USBD_CtlError>
}
 8004966:	bd38      	pop	{r3, r4, r5, pc}

08004968 <USBD_SetConfig>:
{
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4604      	mov	r4, r0
 800496c:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800496e:	7889      	ldrb	r1, [r1, #2]
 8004970:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <USBD_SetConfig+0xac>)
 8004972:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004974:	2901      	cmp	r1, #1
 8004976:	d80e      	bhi.n	8004996 <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8004978:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800497c:	2b02      	cmp	r3, #2
 800497e:	d00e      	beq.n	800499e <USBD_SetConfig+0x36>
 8004980:	2b03      	cmp	r3, #3
 8004982:	d021      	beq.n	80049c8 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004984:	4629      	mov	r1, r5
 8004986:	f7ff fefb 	bl	8004780 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <USBD_SetConfig+0xac>)
 800498c:	7819      	ldrb	r1, [r3, #0]
 800498e:	4620      	mov	r0, r4
 8004990:	f7ff fd9b 	bl	80044ca <USBD_ClrClassConfig>
        break;
 8004994:	e002      	b.n	800499c <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 8004996:	4629      	mov	r1, r5
 8004998:	f7ff fef2 	bl	8004780 <USBD_CtlError>
}
 800499c:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 800499e:	b181      	cbz	r1, 80049c2 <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 80049a0:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80049a2:	2303      	movs	r3, #3
 80049a4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80049a8:	f7ff fd82 	bl	80044b0 <USBD_SetClassConfig>
 80049ac:	2802      	cmp	r0, #2
 80049ae:	d003      	beq.n	80049b8 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 80049b0:	4620      	mov	r0, r4
 80049b2:	f000 fa31 	bl	8004e18 <USBD_CtlSendStatus>
 80049b6:	e7f1      	b.n	800499c <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 80049b8:	4629      	mov	r1, r5
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff fee0 	bl	8004780 <USBD_CtlError>
            return;
 80049c0:	e7ec      	b.n	800499c <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 80049c2:	f000 fa29 	bl	8004e18 <USBD_CtlSendStatus>
 80049c6:	e7e9      	b.n	800499c <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 80049c8:	b189      	cbz	r1, 80049ee <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 80049ca:	6843      	ldr	r3, [r0, #4]
 80049cc:	4299      	cmp	r1, r3
 80049ce:	d01d      	beq.n	8004a0c <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80049d0:	b2d9      	uxtb	r1, r3
 80049d2:	f7ff fd7a 	bl	80044ca <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <USBD_SetConfig+0xac>)
 80049d8:	7819      	ldrb	r1, [r3, #0]
 80049da:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80049dc:	4620      	mov	r0, r4
 80049de:	f7ff fd67 	bl	80044b0 <USBD_SetClassConfig>
 80049e2:	2802      	cmp	r0, #2
 80049e4:	d00d      	beq.n	8004a02 <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 fa16 	bl	8004e18 <USBD_CtlSendStatus>
 80049ec:	e7d6      	b.n	800499c <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80049ee:	2302      	movs	r3, #2
 80049f0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80049f4:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80049f6:	f7ff fd68 	bl	80044ca <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 fa0c 	bl	8004e18 <USBD_CtlSendStatus>
 8004a00:	e7cc      	b.n	800499c <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8004a02:	4629      	mov	r1, r5
 8004a04:	4620      	mov	r0, r4
 8004a06:	f7ff febb 	bl	8004780 <USBD_CtlError>
            return;
 8004a0a:	e7c7      	b.n	800499c <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8004a0c:	f000 fa04 	bl	8004e18 <USBD_CtlSendStatus>
 8004a10:	e7c4      	b.n	800499c <USBD_SetConfig+0x34>
 8004a12:	bf00      	nop
 8004a14:	20000294 	.word	0x20000294

08004a18 <USBD_GetConfig>:
{
 8004a18:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004a1a:	88cb      	ldrh	r3, [r1, #6]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d10b      	bne.n	8004a38 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004a20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a24:	b19b      	cbz	r3, 8004a4e <USBD_GetConfig+0x36>
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d909      	bls.n	8004a3e <USBD_GetConfig+0x26>
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d10f      	bne.n	8004a4e <USBD_GetConfig+0x36>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004a2e:	2201      	movs	r2, #1
 8004a30:	1d01      	adds	r1, r0, #4
 8004a32:	f000 f9c5 	bl	8004dc0 <USBD_CtlSendData>
        break;
 8004a36:	e001      	b.n	8004a3c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004a38:	f7ff fea2 	bl	8004780 <USBD_CtlError>
}
 8004a3c:	bd08      	pop	{r3, pc}
        pdev->dev_default_config = 0U;
 8004a3e:	4601      	mov	r1, r0
 8004a40:	2300      	movs	r3, #0
 8004a42:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004a46:	2201      	movs	r2, #1
 8004a48:	f000 f9ba 	bl	8004dc0 <USBD_CtlSendData>
        break;
 8004a4c:	e7f6      	b.n	8004a3c <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8004a4e:	f7ff fe97 	bl	8004780 <USBD_CtlError>
}
 8004a52:	e7f3      	b.n	8004a3c <USBD_GetConfig+0x24>

08004a54 <USBD_GetStatus>:
{
 8004a54:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004a56:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d812      	bhi.n	8004a86 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8004a60:	88cb      	ldrh	r3, [r1, #6]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d10c      	bne.n	8004a80 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004a66:	2301      	movs	r3, #1
 8004a68:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004a6a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004a6e:	b10b      	cbz	r3, 8004a74 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004a70:	2303      	movs	r3, #3
 8004a72:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004a74:	2202      	movs	r2, #2
 8004a76:	f100 010c 	add.w	r1, r0, #12
 8004a7a:	f000 f9a1 	bl	8004dc0 <USBD_CtlSendData>
}
 8004a7e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004a80:	f7ff fe7e 	bl	8004780 <USBD_CtlError>
        break;
 8004a84:	e7fb      	b.n	8004a7e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004a86:	f7ff fe7b 	bl	8004780 <USBD_CtlError>
}
 8004a8a:	e7f8      	b.n	8004a7e <USBD_GetStatus+0x2a>

08004a8c <USBD_ClrFeature>:
{
 8004a8c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004a8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a92:	3b01      	subs	r3, #1
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d809      	bhi.n	8004aac <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004a98:	884b      	ldrh	r3, [r1, #2]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d000      	beq.n	8004aa0 <USBD_ClrFeature+0x14>
}
 8004a9e:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004aa6:	f000 f9b7 	bl	8004e18 <USBD_CtlSendStatus>
 8004aaa:	e7f8      	b.n	8004a9e <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004aac:	f7ff fe68 	bl	8004780 <USBD_CtlError>
}
 8004ab0:	e7f5      	b.n	8004a9e <USBD_ClrFeature+0x12>

08004ab2 <USBD_StdDevReq>:
{
 8004ab2:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ab4:	780b      	ldrb	r3, [r1, #0]
 8004ab6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d005      	beq.n	8004aca <USBD_StdDevReq+0x18>
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d003      	beq.n	8004aca <USBD_StdDevReq+0x18>
 8004ac2:	b143      	cbz	r3, 8004ad6 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8004ac4:	f7ff fe5c 	bl	8004780 <USBD_CtlError>
      break;
 8004ac8:	e003      	b.n	8004ad2 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8004aca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4798      	blx	r3
}
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8004ad6:	784b      	ldrb	r3, [r1, #1]
 8004ad8:	2b09      	cmp	r3, #9
 8004ada:	d81b      	bhi.n	8004b14 <USBD_StdDevReq+0x62>
 8004adc:	e8df f003 	tbb	[pc, r3]
 8004ae0:	141a1711 	.word	0x141a1711
 8004ae4:	1a05081a 	.word	0x1a05081a
 8004ae8:	0b0e      	.short	0x0b0e
          USBD_GetDescriptor(pdev, req);
 8004aea:	f7ff fe53 	bl	8004794 <USBD_GetDescriptor>
          break;
 8004aee:	e7f0      	b.n	8004ad2 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8004af0:	f7ff ff13 	bl	800491a <USBD_SetAddress>
          break;
 8004af4:	e7ed      	b.n	8004ad2 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8004af6:	f7ff ff37 	bl	8004968 <USBD_SetConfig>
          break;
 8004afa:	e7ea      	b.n	8004ad2 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8004afc:	f7ff ff8c 	bl	8004a18 <USBD_GetConfig>
          break;
 8004b00:	e7e7      	b.n	8004ad2 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8004b02:	f7ff ffa7 	bl	8004a54 <USBD_GetStatus>
          break;
 8004b06:	e7e4      	b.n	8004ad2 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8004b08:	f7ff fe1c 	bl	8004744 <USBD_SetFeature>
          break;
 8004b0c:	e7e1      	b.n	8004ad2 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8004b0e:	f7ff ffbd 	bl	8004a8c <USBD_ClrFeature>
          break;
 8004b12:	e7de      	b.n	8004ad2 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8004b14:	f7ff fe34 	bl	8004780 <USBD_CtlError>
          break;
 8004b18:	e7db      	b.n	8004ad2 <USBD_StdDevReq+0x20>

08004b1a <USBD_StdItfReq>:
{
 8004b1a:	b538      	push	{r3, r4, r5, lr}
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b20:	780b      	ldrb	r3, [r1, #0]
 8004b22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d006      	beq.n	8004b38 <USBD_StdItfReq+0x1e>
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d004      	beq.n	8004b38 <USBD_StdItfReq+0x1e>
 8004b2e:	b11b      	cbz	r3, 8004b38 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8004b30:	f7ff fe26 	bl	8004780 <USBD_CtlError>
}
 8004b34:	2000      	movs	r0, #0
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8004b38:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d816      	bhi.n	8004b70 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004b42:	7923      	ldrb	r3, [r4, #4]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d80e      	bhi.n	8004b66 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b48:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4621      	mov	r1, r4
 8004b50:	4628      	mov	r0, r5
 8004b52:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b54:	88e3      	ldrh	r3, [r4, #6]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1ec      	bne.n	8004b34 <USBD_StdItfReq+0x1a>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d1ea      	bne.n	8004b34 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 f95a 	bl	8004e18 <USBD_CtlSendStatus>
 8004b64:	e7e6      	b.n	8004b34 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8004b66:	4621      	mov	r1, r4
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f7ff fe09 	bl	8004780 <USBD_CtlError>
 8004b6e:	e7e1      	b.n	8004b34 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8004b70:	4621      	mov	r1, r4
 8004b72:	4628      	mov	r0, r5
 8004b74:	f7ff fe04 	bl	8004780 <USBD_CtlError>
          break;
 8004b78:	e7dc      	b.n	8004b34 <USBD_StdItfReq+0x1a>

08004b7a <USBD_StdEPReq>:
{
 8004b7a:	b538      	push	{r3, r4, r5, lr}
 8004b7c:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8004b7e:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b80:	780b      	ldrb	r3, [r1, #0]
 8004b82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d008      	beq.n	8004b9c <USBD_StdEPReq+0x22>
 8004b8a:	b2d0      	uxtb	r0, r2
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d005      	beq.n	8004b9c <USBD_StdEPReq+0x22>
 8004b90:	b15b      	cbz	r3, 8004baa <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7ff fdf4 	bl	8004780 <USBD_CtlError>
  return ret;
 8004b98:	2000      	movs	r0, #0
      break;
 8004b9a:	e005      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 8004b9c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4798      	blx	r3
  return ret;
 8004ba6:	2000      	movs	r0, #0
}
 8004ba8:	bd38      	pop	{r3, r4, r5, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d105      	bne.n	8004bba <USBD_StdEPReq+0x40>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004bae:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	4798      	blx	r3
        return ret;
 8004bb8:	e7f6      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
      switch (req->bRequest)
 8004bba:	784b      	ldrb	r3, [r1, #1]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d032      	beq.n	8004c26 <USBD_StdEPReq+0xac>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d05e      	beq.n	8004c82 <USBD_StdEPReq+0x108>
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	f040 80d8 	bne.w	8004d7a <USBD_StdEPReq+0x200>
          switch (pdev->dev_state)
 8004bca:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d006      	beq.n	8004be0 <USBD_StdEPReq+0x66>
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d016      	beq.n	8004c04 <USBD_StdEPReq+0x8a>
              USBD_CtlError(pdev, req);
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f7ff fdd2 	bl	8004780 <USBD_CtlError>
  return ret;
 8004bdc:	2000      	movs	r0, #0
              break;
 8004bde:	e7e3      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004be0:	b108      	cbz	r0, 8004be6 <USBD_StdEPReq+0x6c>
 8004be2:	2880      	cmp	r0, #128	; 0x80
 8004be4:	d104      	bne.n	8004bf0 <USBD_StdEPReq+0x76>
                USBD_CtlError(pdev, req);
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7ff fdca 	bl	8004780 <USBD_CtlError>
  return ret;
 8004bec:	2000      	movs	r0, #0
 8004bee:	e7db      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8004bf0:	4601      	mov	r1, r0
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f001 fabb 	bl	800616e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004bf8:	2180      	movs	r1, #128	; 0x80
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f001 fab7 	bl	800616e <USBD_LL_StallEP>
  return ret;
 8004c00:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 8004c02:	e7d1      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c04:	884b      	ldrh	r3, [r1, #2]
 8004c06:	b923      	cbnz	r3, 8004c12 <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) &&
 8004c08:	b118      	cbz	r0, 8004c12 <USBD_StdEPReq+0x98>
 8004c0a:	2880      	cmp	r0, #128	; 0x80
 8004c0c:	d001      	beq.n	8004c12 <USBD_StdEPReq+0x98>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004c0e:	88cb      	ldrh	r3, [r1, #6]
 8004c10:	b123      	cbz	r3, 8004c1c <USBD_StdEPReq+0xa2>
              USBD_CtlSendStatus(pdev);
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 f900 	bl	8004e18 <USBD_CtlSendStatus>
  return ret;
 8004c18:	2000      	movs	r0, #0
              break;
 8004c1a:	e7c5      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004c1c:	4601      	mov	r1, r0
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f001 faa5 	bl	800616e <USBD_LL_StallEP>
 8004c24:	e7f5      	b.n	8004c12 <USBD_StdEPReq+0x98>
          switch (pdev->dev_state)
 8004c26:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d006      	beq.n	8004c3c <USBD_StdEPReq+0xc2>
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d016      	beq.n	8004c60 <USBD_StdEPReq+0xe6>
              USBD_CtlError(pdev, req);
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7ff fda4 	bl	8004780 <USBD_CtlError>
  return ret;
 8004c38:	2000      	movs	r0, #0
              break;
 8004c3a:	e7b5      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c3c:	b108      	cbz	r0, 8004c42 <USBD_StdEPReq+0xc8>
 8004c3e:	2880      	cmp	r0, #128	; 0x80
 8004c40:	d104      	bne.n	8004c4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004c42:	4620      	mov	r0, r4
 8004c44:	f7ff fd9c 	bl	8004780 <USBD_CtlError>
  return ret;
 8004c48:	2000      	movs	r0, #0
 8004c4a:	e7ad      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8004c4c:	4601      	mov	r1, r0
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f001 fa8d 	bl	800616e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004c54:	2180      	movs	r1, #128	; 0x80
 8004c56:	4620      	mov	r0, r4
 8004c58:	f001 fa89 	bl	800616e <USBD_LL_StallEP>
  return ret;
 8004c5c:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 8004c5e:	e7a3      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c60:	884b      	ldrh	r3, [r1, #2]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f040 808e 	bne.w	8004d84 <USBD_StdEPReq+0x20a>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004c68:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004c6c:	d104      	bne.n	8004c78 <USBD_StdEPReq+0xfe>
                USBD_CtlSendStatus(pdev);
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f000 f8d2 	bl	8004e18 <USBD_CtlSendStatus>
  return ret;
 8004c74:	2000      	movs	r0, #0
 8004c76:	e797      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004c78:	4601      	mov	r1, r0
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f001 fa7f 	bl	800617e <USBD_LL_ClearStallEP>
 8004c80:	e7f5      	b.n	8004c6e <USBD_StdEPReq+0xf4>
          switch (pdev->dev_state)
 8004c82:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d006      	beq.n	8004c98 <USBD_StdEPReq+0x11e>
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d02a      	beq.n	8004ce4 <USBD_StdEPReq+0x16a>
              USBD_CtlError(pdev, req);
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7ff fd76 	bl	8004780 <USBD_CtlError>
  return ret;
 8004c94:	2000      	movs	r0, #0
              break;
 8004c96:	e787      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c98:	b108      	cbz	r0, 8004c9e <USBD_StdEPReq+0x124>
 8004c9a:	2880      	cmp	r0, #128	; 0x80
 8004c9c:	d113      	bne.n	8004cc6 <USBD_StdEPReq+0x14c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ca2:	d115      	bne.n	8004cd0 <USBD_StdEPReq+0x156>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004ca4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ca8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004cac:	0083      	lsls	r3, r0, #2
 8004cae:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8004cb2:	4421      	add	r1, r4
 8004cb4:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004cb6:	2500      	movs	r5, #0
 8004cb8:	600d      	str	r5, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004cba:	2202      	movs	r2, #2
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f000 f87f 	bl	8004dc0 <USBD_CtlSendData>
  return ret;
 8004cc2:	4628      	mov	r0, r5
              break;
 8004cc4:	e770      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
                USBD_CtlError(pdev, req);
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7ff fd5a 	bl	8004780 <USBD_CtlError>
  return ret;
 8004ccc:	2000      	movs	r0, #0
                break;
 8004cce:	e76b      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cd0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004cd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004cd8:	0083      	lsls	r3, r0, #2
 8004cda:	f103 0110 	add.w	r1, r3, #16
 8004cde:	4421      	add	r1, r4
 8004ce0:	3104      	adds	r1, #4
 8004ce2:	e7e8      	b.n	8004cb6 <USBD_StdEPReq+0x13c>
              if ((ep_addr & 0x80U) == 0x80U)
 8004ce4:	b252      	sxtb	r2, r2
 8004ce6:	2a00      	cmp	r2, #0
 8004ce8:	db1f      	blt.n	8004d2a <USBD_StdEPReq+0x1b0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004cea:	f000 030f 	and.w	r3, r0, #15
 8004cee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004cf2:	009d      	lsls	r5, r3, #2
 8004cf4:	4425      	add	r5, r4
 8004cf6:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
 8004cfa:	b323      	cbz	r3, 8004d46 <USBD_StdEPReq+0x1cc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	db27      	blt.n	8004d50 <USBD_StdEPReq+0x1d6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004d00:	f000 027f 	and.w	r2, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004d08:	0093      	lsls	r3, r2, #2
 8004d0a:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 8004d0e:	4425      	add	r5, r4
 8004d10:	3504      	adds	r5, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004d12:	b108      	cbz	r0, 8004d18 <USBD_StdEPReq+0x19e>
 8004d14:	2880      	cmp	r0, #128	; 0x80
 8004d16:	d125      	bne.n	8004d64 <USBD_StdEPReq+0x1ea>
                pep->status = 0x0000U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	4629      	mov	r1, r5
 8004d20:	4620      	mov	r0, r4
 8004d22:	f000 f84d 	bl	8004dc0 <USBD_CtlSendData>
  return ret;
 8004d26:	2000      	movs	r0, #0
              break;
 8004d28:	e73e      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d2a:	f000 030f 	and.w	r3, r0, #15
 8004d2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d32:	009d      	lsls	r5, r3, #2
 8004d34:	4425      	add	r5, r4
 8004d36:	69ab      	ldr	r3, [r5, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1df      	bne.n	8004cfc <USBD_StdEPReq+0x182>
                  USBD_CtlError(pdev, req);
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f7ff fd1f 	bl	8004780 <USBD_CtlError>
  return ret;
 8004d42:	2000      	movs	r0, #0
                  break;
 8004d44:	e730      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
                  USBD_CtlError(pdev, req);
 8004d46:	4620      	mov	r0, r4
 8004d48:	f7ff fd1a 	bl	8004780 <USBD_CtlError>
  return ret;
 8004d4c:	2000      	movs	r0, #0
                  break;
 8004d4e:	e72b      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d50:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8004d54:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004d58:	0093      	lsls	r3, r2, #2
 8004d5a:	f103 0510 	add.w	r5, r3, #16
 8004d5e:	4425      	add	r5, r4
 8004d60:	3504      	adds	r5, #4
 8004d62:	e7d6      	b.n	8004d12 <USBD_StdEPReq+0x198>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004d64:	4601      	mov	r1, r0
 8004d66:	4620      	mov	r0, r4
 8004d68:	f001 fa11 	bl	800618e <USBD_LL_IsStallEP>
 8004d6c:	b110      	cbz	r0, 8004d74 <USBD_StdEPReq+0x1fa>
                pep->status = 0x0001U;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	602b      	str	r3, [r5, #0]
 8004d72:	e7d3      	b.n	8004d1c <USBD_StdEPReq+0x1a2>
                pep->status = 0x0000U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	e7d0      	b.n	8004d1c <USBD_StdEPReq+0x1a2>
          USBD_CtlError(pdev, req);
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f7ff fd00 	bl	8004780 <USBD_CtlError>
  return ret;
 8004d80:	2000      	movs	r0, #0
          break;
 8004d82:	e711      	b.n	8004ba8 <USBD_StdEPReq+0x2e>
  return ret;
 8004d84:	2000      	movs	r0, #0
 8004d86:	e70f      	b.n	8004ba8 <USBD_StdEPReq+0x2e>

08004d88 <USBD_GetString>:
  if (desc != NULL)
 8004d88:	b1c8      	cbz	r0, 8004dbe <USBD_GetString+0x36>
{
 8004d8a:	b570      	push	{r4, r5, r6, lr}
 8004d8c:	460d      	mov	r5, r1
 8004d8e:	4616      	mov	r6, r2
 8004d90:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004d92:	f7ff fccd 	bl	8004730 <USBD_GetLen>
 8004d96:	3001      	adds	r0, #1
 8004d98:	0040      	lsls	r0, r0, #1
 8004d9a:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004d9c:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	706b      	strb	r3, [r5, #1]
 8004da2:	2302      	movs	r3, #2
    while (*desc != '\0')
 8004da4:	e007      	b.n	8004db6 <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 8004da6:	3401      	adds	r4, #1
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8004dae:	3302      	adds	r3, #2
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2100      	movs	r1, #0
 8004db4:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8004db6:	7821      	ldrb	r1, [r4, #0]
 8004db8:	2900      	cmp	r1, #0
 8004dba:	d1f4      	bne.n	8004da6 <USBD_GetString+0x1e>
}
 8004dbc:	bd70      	pop	{r4, r5, r6, pc}
 8004dbe:	4770      	bx	lr

08004dc0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004dca:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8004dcc:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004dce:	460a      	mov	r2, r1
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	f001 f9f7 	bl	80061c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	bd10      	pop	{r4, pc}

08004dda <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004dda:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004ddc:	4613      	mov	r3, r2
 8004dde:	460a      	mov	r2, r1
 8004de0:	2100      	movs	r1, #0
 8004de2:	f001 f9ef 	bl	80061c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004de6:	2000      	movs	r0, #0
 8004de8:	bd08      	pop	{r3, pc}

08004dea <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004dea:	b510      	push	{r4, lr}
 8004dec:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004dee:	2203      	movs	r2, #3
 8004df0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004df4:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004df8:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	2100      	movs	r1, #0
 8004e00:	f001 f9e8 	bl	80061d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e04:	2000      	movs	r0, #0
 8004e06:	bd10      	pop	{r4, pc}

08004e08 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004e08:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	460a      	mov	r2, r1
 8004e0e:	2100      	movs	r1, #0
 8004e10:	f001 f9e0 	bl	80061d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e14:	2000      	movs	r0, #0
 8004e16:	bd08      	pop	{r3, pc}

08004e18 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004e18:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004e1a:	2304      	movs	r3, #4
 8004e1c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004e20:	2300      	movs	r3, #0
 8004e22:	461a      	mov	r2, r3
 8004e24:	4619      	mov	r1, r3
 8004e26:	f001 f9cd 	bl	80061c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	bd08      	pop	{r3, pc}

08004e2e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004e2e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004e30:	2305      	movs	r3, #5
 8004e32:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e36:	2300      	movs	r3, #0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f001 f9ca 	bl	80061d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e40:	2000      	movs	r0, #0
 8004e42:	bd08      	pop	{r3, pc}

08004e44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004e44:	b500      	push	{lr}
 8004e46:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	9302      	str	r3, [sp, #8]
 8004e4e:	9303      	str	r3, [sp, #12]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004e50:	4818      	ldr	r0, [pc, #96]	; (8004eb4 <MX_ADC1_Init+0x70>)
 8004e52:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <MX_ADC1_Init+0x74>)
 8004e54:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e5a:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004e60:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8004e62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e66:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e68:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004e6e:	f7fb fbd9 	bl	8000624 <HAL_ADC_Init>
 8004e72:	b9b0      	cbnz	r0, 8004ea2 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e80:	a901      	add	r1, sp, #4
 8004e82:	480c      	ldr	r0, [pc, #48]	; (8004eb4 <MX_ADC1_Init+0x70>)
 8004e84:	f7fb f9fc 	bl	8000280 <HAL_ADC_ConfigChannel>
 8004e88:	b970      	cbnz	r0, 8004ea8 <MX_ADC1_Init+0x64>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e92:	a901      	add	r1, sp, #4
 8004e94:	4807      	ldr	r0, [pc, #28]	; (8004eb4 <MX_ADC1_Init+0x70>)
 8004e96:	f7fb f9f3 	bl	8000280 <HAL_ADC_ConfigChannel>
 8004e9a:	b940      	cbnz	r0, 8004eae <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
  }

}
 8004e9c:	b005      	add	sp, #20
 8004e9e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004ea2:	f000 fd3b 	bl	800591c <Error_Handler>
 8004ea6:	e7e5      	b.n	8004e74 <MX_ADC1_Init+0x30>
    Error_Handler();
 8004ea8:	f000 fd38 	bl	800591c <Error_Handler>
 8004eac:	e7ed      	b.n	8004e8a <MX_ADC1_Init+0x46>
    Error_Handler();
 8004eae:	f000 fd35 	bl	800591c <Error_Handler>
}
 8004eb2:	e7f3      	b.n	8004e9c <MX_ADC1_Init+0x58>
 8004eb4:	200006c8 	.word	0x200006c8
 8004eb8:	40012400 	.word	0x40012400

08004ebc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	9303      	str	r3, [sp, #12]
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 8004eca:	6802      	ldr	r2, [r0, #0]
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <HAL_ADC_MspInit+0x88>)
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d001      	beq.n	8004ed6 <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004ed2:	b006      	add	sp, #24
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ed8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	619a      	str	r2, [r3, #24]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004eea:	9200      	str	r2, [sp, #0]
 8004eec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eee:	699a      	ldr	r2, [r3, #24]
 8004ef0:	f042 0204 	orr.w	r2, r2, #4
 8004ef4:	619a      	str	r2, [r3, #24]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADIN_Pin|CT_Pin;
 8004f00:	2303      	movs	r3, #3
 8004f02:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f04:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f06:	a902      	add	r1, sp, #8
 8004f08:	480f      	ldr	r0, [pc, #60]	; (8004f48 <HAL_ADC_MspInit+0x8c>)
 8004f0a:	f7fb ff49 	bl	8000da0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8004f0e:	480f      	ldr	r0, [pc, #60]	; (8004f4c <HAL_ADC_MspInit+0x90>)
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_ADC_MspInit+0x94>)
 8004f12:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f14:	2300      	movs	r3, #0
 8004f16:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f18:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f1a:	2280      	movs	r2, #128	; 0x80
 8004f1c:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f22:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f28:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004f2e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f30:	f7fb fd9e 	bl	8000a70 <HAL_DMA_Init>
 8004f34:	b918      	cbnz	r0, 8004f3e <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_ADC_MspInit+0x90>)
 8004f38:	6223      	str	r3, [r4, #32]
 8004f3a:	625c      	str	r4, [r3, #36]	; 0x24
}
 8004f3c:	e7c9      	b.n	8004ed2 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8004f3e:	f000 fced 	bl	800591c <Error_Handler>
 8004f42:	e7f8      	b.n	8004f36 <HAL_ADC_MspInit+0x7a>
 8004f44:	40012400 	.word	0x40012400
 8004f48:	40010800 	.word	0x40010800
 8004f4c:	200006f8 	.word	0x200006f8
 8004f50:	40020008 	.word	0x40020008

08004f54 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004f54:	b500      	push	{lr}
 8004f56:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <MX_DMA_Init+0x30>)
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	615a      	str	r2, [r3, #20]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2101      	movs	r1, #1
 8004f70:	200b      	movs	r0, #11
 8004f72:	f7fb fcf3 	bl	800095c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004f76:	200b      	movs	r0, #11
 8004f78:	f7fb fd36 	bl	80009e8 <HAL_NVIC_EnableIRQ>

}
 8004f7c:	b003      	add	sp, #12
 8004f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000

08004f88 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f8c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f8e:	2400      	movs	r4, #0
 8004f90:	9404      	str	r4, [sp, #16]
 8004f92:	9405      	str	r4, [sp, #20]
 8004f94:	9406      	str	r4, [sp, #24]
 8004f96:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f98:	4b4d      	ldr	r3, [pc, #308]	; (80050d0 <MX_GPIO_Init+0x148>)
 8004f9a:	699a      	ldr	r2, [r3, #24]
 8004f9c:	f042 0210 	orr.w	r2, r2, #16
 8004fa0:	619a      	str	r2, [r3, #24]
 8004fa2:	699a      	ldr	r2, [r3, #24]
 8004fa4:	f002 0210 	and.w	r2, r2, #16
 8004fa8:	9200      	str	r2, [sp, #0]
 8004faa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	f042 0220 	orr.w	r2, r2, #32
 8004fb2:	619a      	str	r2, [r3, #24]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	f002 0220 	and.w	r2, r2, #32
 8004fba:	9201      	str	r2, [sp, #4]
 8004fbc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	f042 0204 	orr.w	r2, r2, #4
 8004fc4:	619a      	str	r2, [r3, #24]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	f002 0204 	and.w	r2, r2, #4
 8004fcc:	9202      	str	r2, [sp, #8]
 8004fce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	f042 0208 	orr.w	r2, r2, #8
 8004fd6:	619a      	str	r2, [r3, #24]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8004fe2:	4e3c      	ldr	r6, [pc, #240]	; (80050d4 <MX_GPIO_Init+0x14c>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2110      	movs	r1, #16
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f7fc f87b 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CUE_Pin|PLAY_Pin|DISC_Pin|USB_DISCONNECT_Pin, GPIO_PIN_SET);
 8004fee:	4d3a      	ldr	r5, [pc, #232]	; (80050d8 <MX_GPIO_Init+0x150>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f640 6104 	movw	r1, #3588	; 0xe04
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f7fc f874 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S3_Pin|S4_Pin|S5_Pin|S1_Pin, GPIO_PIN_RESET);
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005002:	4628      	mov	r0, r5
 8005004:	f7fc f86e 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8005008:	4622      	mov	r2, r4
 800500a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800500e:	4630      	mov	r0, r6
 8005010:	f7fc f868 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005014:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005018:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800501a:	f04f 0803 	mov.w	r8, #3
 800501e:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005022:	a904      	add	r1, sp, #16
 8005024:	482d      	ldr	r0, [pc, #180]	; (80050dc <MX_GPIO_Init+0x154>)
 8005026:	f7fb febb 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_15;
 800502a:	f248 230c 	movw	r3, #33292	; 0x820c
 800502e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005030:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005034:	a904      	add	r1, sp, #16
 8005036:	4630      	mov	r0, r6
 8005038:	f7fb feb2 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|S2_Pin;
 800503c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005040:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005042:	f04f 0901 	mov.w	r9, #1
 8005046:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504c:	2702      	movs	r7, #2
 800504e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005050:	a904      	add	r1, sp, #16
 8005052:	4630      	mov	r0, r6
 8005054:	f7fb fea4 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 8005058:	f240 1303 	movw	r3, #259	; 0x103
 800505c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800505e:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005062:	a904      	add	r1, sp, #16
 8005064:	4628      	mov	r0, r5
 8005066:	f7fb fe9b 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUE_Pin|PLAY_Pin|DISC_Pin|USB_DISCONNECT_Pin;
 800506a:	f640 6304 	movw	r3, #3588	; 0xe04
 800506e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005070:	2311      	movs	r3, #17
 8005072:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005074:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005076:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005078:	a904      	add	r1, sp, #16
 800507a:	4628      	mov	r0, r5
 800507c:	f7fb fe90 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = S3_Pin|S4_Pin|S5_Pin|S1_Pin;
 8005080:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005084:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005086:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800508c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508e:	a904      	add	r1, sp, #16
 8005090:	4628      	mov	r0, r5
 8005092:	f7fb fe85 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <MX_GPIO_Init+0x158>)
 800509e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050a0:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80050a2:	a904      	add	r1, sp, #16
 80050a4:	4630      	mov	r0, r6
 80050a6:	f7fb fe7b 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KD0_Pin|KD1_Pin|KD2_Pin;
 80050aa:	2338      	movs	r3, #56	; 0x38
 80050ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050ae:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b2:	a904      	add	r1, sp, #16
 80050b4:	4628      	mov	r0, r5
 80050b6:	f7fb fe73 	bl	8000da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050ba:	4622      	mov	r2, r4
 80050bc:	4621      	mov	r1, r4
 80050be:	2028      	movs	r0, #40	; 0x28
 80050c0:	f7fb fc4c 	bl	800095c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050c4:	2028      	movs	r0, #40	; 0x28
 80050c6:	f7fb fc8f 	bl	80009e8 <HAL_NVIC_EnableIRQ>

}
 80050ca:	b009      	add	sp, #36	; 0x24
 80050cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40010800 	.word	0x40010800
 80050d8:	40010c00 	.word	0x40010c00
 80050dc:	40011000 	.word	0x40011000
 80050e0:	10310000 	.word	0x10310000

080050e4 <Display_DataTx>:
	}
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
}

// transmit data to STM32F746DISCO board via SPI1
void Display_DataTx(uint8_t *data, uint16_t length) {
 80050e4:	b570      	push	{r4, r5, r6, lr}
 80050e6:	4605      	mov	r5, r0
 80050e8:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80050ea:	4c09      	ldr	r4, [pc, #36]	; (8005110 <Display_DataTx+0x2c>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	2110      	movs	r1, #16
 80050f0:	4620      	mov	r0, r4
 80050f2:	f7fb fff7 	bl	80010e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, length, 0x1000);
 80050f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050fa:	4632      	mov	r2, r6
 80050fc:	4629      	mov	r1, r5
 80050fe:	4805      	ldr	r0, [pc, #20]	; (8005114 <Display_DataTx+0x30>)
 8005100:	f7fd fb0a 	bl	8002718 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8005104:	2201      	movs	r2, #1
 8005106:	2110      	movs	r1, #16
 8005108:	4620      	mov	r0, r4
 800510a:	f7fb ffeb 	bl	80010e4 <HAL_GPIO_WritePin>
}
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	40010800 	.word	0x40010800
 8005114:	2000073c 	.word	0x2000073c

08005118 <Keyboard_Read>:
void Keyboard_Read() {
 8005118:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_SET);
 800511a:	4cc2      	ldr	r4, [pc, #776]	; (8005424 <Keyboard_Read+0x30c>)
 800511c:	2201      	movs	r2, #1
 800511e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005122:	4620      	mov	r0, r4
 8005124:	f7fb ffde 	bl	80010e4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(KD0_GPIO_Port, KD0_Pin) == GPIO_PIN_SET) {
 8005128:	2108      	movs	r1, #8
 800512a:	4620      	mov	r0, r4
 800512c:	f7fb ffc6 	bl	80010bc <HAL_GPIO_ReadPin>
 8005130:	2801      	cmp	r0, #1
 8005132:	f000 81a7 	beq.w	8005484 <Keyboard_Read+0x36c>
		if(button_flags & (1 << HOLD)) {
 8005136:	4bbc      	ldr	r3, [pc, #752]	; (8005428 <Keyboard_Read+0x310>)
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	f013 0f01 	tst.w	r3, #1
 800513e:	d00c      	beq.n	800515a <Keyboard_Read+0x42>
			button_flags ^= (1 << HOLD);
 8005140:	4ab9      	ldr	r2, [pc, #740]	; (8005428 <Keyboard_Read+0x310>)
 8005142:	f083 0301 	eor.w	r3, r3, #1
 8005146:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 8005148:	7893      	ldrb	r3, [r2, #2]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	f000 81b1 	beq.w	80054b4 <Keyboard_Read+0x39c>
			Display_DataTx(Hold_Off, 4);
 8005152:	2104      	movs	r1, #4
 8005154:	48b5      	ldr	r0, [pc, #724]	; (800542c <Keyboard_Read+0x314>)
 8005156:	f7ff ffc5 	bl	80050e4 <Display_DataTx>
	if(HAL_GPIO_ReadPin(KD1_GPIO_Port, KD1_Pin) == GPIO_PIN_SET) {
 800515a:	2110      	movs	r1, #16
 800515c:	48b1      	ldr	r0, [pc, #708]	; (8005424 <Keyboard_Read+0x30c>)
 800515e:	f7fb ffad 	bl	80010bc <HAL_GPIO_ReadPin>
 8005162:	2801      	cmp	r0, #1
 8005164:	f000 81ab 	beq.w	80054be <Keyboard_Read+0x3a6>
		if(button_flags & (1 << TRACKBACK)) {
 8005168:	4baf      	ldr	r3, [pc, #700]	; (8005428 <Keyboard_Read+0x310>)
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	f013 0f10 	tst.w	r3, #16
 8005170:	d00c      	beq.n	800518c <Keyboard_Read+0x74>
			button_flags ^= (1 << TRACKBACK);
 8005172:	4aad      	ldr	r2, [pc, #692]	; (8005428 <Keyboard_Read+0x310>)
 8005174:	f083 0310 	eor.w	r3, r3, #16
 8005178:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 800517a:	7893      	ldrb	r3, [r2, #2]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	f000 81b5 	beq.w	80054ee <Keyboard_Read+0x3d6>
			Display_DataTx(TrackBack_Off, 4);
 8005184:	2104      	movs	r1, #4
 8005186:	48aa      	ldr	r0, [pc, #680]	; (8005430 <Keyboard_Read+0x318>)
 8005188:	f7ff ffac 	bl	80050e4 <Display_DataTx>
	if(HAL_GPIO_ReadPin(KD2_GPIO_Port, KD2_Pin) == GPIO_PIN_SET) {
 800518c:	2120      	movs	r1, #32
 800518e:	48a5      	ldr	r0, [pc, #660]	; (8005424 <Keyboard_Read+0x30c>)
 8005190:	f7fb ff94 	bl	80010bc <HAL_GPIO_ReadPin>
 8005194:	2801      	cmp	r0, #1
 8005196:	f000 81af 	beq.w	80054f8 <Keyboard_Read+0x3e0>
		if(button_flags & (1 << PLAY)) {
 800519a:	4ba3      	ldr	r3, [pc, #652]	; (8005428 <Keyboard_Read+0x310>)
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80051a2:	d00c      	beq.n	80051be <Keyboard_Read+0xa6>
			button_flags ^= (1 << PLAY);
 80051a4:	4aa0      	ldr	r2, [pc, #640]	; (8005428 <Keyboard_Read+0x310>)
 80051a6:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80051aa:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80051ac:	7893      	ldrb	r3, [r2, #2]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	f000 81b9 	beq.w	8005528 <Keyboard_Read+0x410>
			Display_DataTx(Play_Off, 4);
 80051b6:	2104      	movs	r1, #4
 80051b8:	489e      	ldr	r0, [pc, #632]	; (8005434 <Keyboard_Read+0x31c>)
 80051ba:	f7ff ff93 	bl	80050e4 <Display_DataTx>
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 80051be:	4c99      	ldr	r4, [pc, #612]	; (8005424 <Keyboard_Read+0x30c>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7fb ff8c 	bl	80010e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_SET);
 80051cc:	2201      	movs	r2, #1
 80051ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051d2:	4899      	ldr	r0, [pc, #612]	; (8005438 <Keyboard_Read+0x320>)
 80051d4:	f7fb ff86 	bl	80010e4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(KD0_GPIO_Port, KD0_Pin) == GPIO_PIN_SET) {
 80051d8:	2108      	movs	r1, #8
 80051da:	4620      	mov	r0, r4
 80051dc:	f7fb ff6e 	bl	80010bc <HAL_GPIO_ReadPin>
 80051e0:	2801      	cmp	r0, #1
 80051e2:	f000 81a6 	beq.w	8005532 <Keyboard_Read+0x41a>
		if(button_flags & (1 << TIME)) {
 80051e6:	4b90      	ldr	r3, [pc, #576]	; (8005428 <Keyboard_Read+0x310>)
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	f013 0f02 	tst.w	r3, #2
 80051ee:	d00c      	beq.n	800520a <Keyboard_Read+0xf2>
			button_flags ^= (1 << TIME);
 80051f0:	4a8d      	ldr	r2, [pc, #564]	; (8005428 <Keyboard_Read+0x310>)
 80051f2:	f083 0302 	eor.w	r3, r3, #2
 80051f6:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80051f8:	7893      	ldrb	r3, [r2, #2]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	f000 81b0 	beq.w	8005562 <Keyboard_Read+0x44a>
			Display_DataTx(Time_Off, 4);
 8005202:	2104      	movs	r1, #4
 8005204:	488d      	ldr	r0, [pc, #564]	; (800543c <Keyboard_Read+0x324>)
 8005206:	f7ff ff6d 	bl	80050e4 <Display_DataTx>
	if(HAL_GPIO_ReadPin(KD1_GPIO_Port, KD1_Pin) == GPIO_PIN_SET) {
 800520a:	2110      	movs	r1, #16
 800520c:	4885      	ldr	r0, [pc, #532]	; (8005424 <Keyboard_Read+0x30c>)
 800520e:	f7fb ff55 	bl	80010bc <HAL_GPIO_ReadPin>
 8005212:	2801      	cmp	r0, #1
 8005214:	f000 81aa 	beq.w	800556c <Keyboard_Read+0x454>
		if(button_flags & (1 << TRACKFORWARD)) {
 8005218:	4b83      	ldr	r3, [pc, #524]	; (8005428 <Keyboard_Read+0x310>)
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	f013 0f20 	tst.w	r3, #32
 8005220:	d00c      	beq.n	800523c <Keyboard_Read+0x124>
			button_flags ^= (1 << TRACKFORWARD);
 8005222:	4a81      	ldr	r2, [pc, #516]	; (8005428 <Keyboard_Read+0x310>)
 8005224:	f083 0320 	eor.w	r3, r3, #32
 8005228:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 800522a:	7893      	ldrb	r3, [r2, #2]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	f000 81b4 	beq.w	800559c <Keyboard_Read+0x484>
			Display_DataTx(TrackForward_Off, 4);
 8005234:	2104      	movs	r1, #4
 8005236:	4882      	ldr	r0, [pc, #520]	; (8005440 <Keyboard_Read+0x328>)
 8005238:	f7ff ff54 	bl	80050e4 <Display_DataTx>
	if(HAL_GPIO_ReadPin(KD2_GPIO_Port, KD2_Pin) == GPIO_PIN_SET) {
 800523c:	2120      	movs	r1, #32
 800523e:	4879      	ldr	r0, [pc, #484]	; (8005424 <Keyboard_Read+0x30c>)
 8005240:	f7fb ff3c 	bl	80010bc <HAL_GPIO_ReadPin>
 8005244:	2801      	cmp	r0, #1
 8005246:	f000 81ae 	beq.w	80055a6 <Keyboard_Read+0x48e>
		if(button_flags & (1 << CUE)) {
 800524a:	4b77      	ldr	r3, [pc, #476]	; (8005428 <Keyboard_Read+0x310>)
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005252:	d00c      	beq.n	800526e <Keyboard_Read+0x156>
			button_flags ^= (1 << CUE);
 8005254:	4a74      	ldr	r2, [pc, #464]	; (8005428 <Keyboard_Read+0x310>)
 8005256:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 800525a:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 800525c:	7893      	ldrb	r3, [r2, #2]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	f000 81b8 	beq.w	80055d6 <Keyboard_Read+0x4be>
			Display_DataTx(Cue_Off, 4);
 8005266:	2104      	movs	r1, #4
 8005268:	4876      	ldr	r0, [pc, #472]	; (8005444 <Keyboard_Read+0x32c>)
 800526a:	f7ff ff3b 	bl	80050e4 <Display_DataTx>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 800526e:	2200      	movs	r2, #0
 8005270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005274:	4870      	ldr	r0, [pc, #448]	; (8005438 <Keyboard_Read+0x320>)
 8005276:	f7fb ff35 	bl	80010e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 800527a:	4c6a      	ldr	r4, [pc, #424]	; (8005424 <Keyboard_Read+0x30c>)
 800527c:	2201      	movs	r2, #1
 800527e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005282:	4620      	mov	r0, r4
 8005284:	f7fb ff2e 	bl	80010e4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(KD0_GPIO_Port, KD0_Pin) == GPIO_PIN_SET) {
 8005288:	2108      	movs	r1, #8
 800528a:	4620      	mov	r0, r4
 800528c:	f7fb ff16 	bl	80010bc <HAL_GPIO_ReadPin>
 8005290:	2801      	cmp	r0, #1
 8005292:	f000 81a5 	beq.w	80055e0 <Keyboard_Read+0x4c8>
		if(button_flags & (1 << EJECT)) {
 8005296:	4b64      	ldr	r3, [pc, #400]	; (8005428 <Keyboard_Read+0x310>)
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	f013 0f04 	tst.w	r3, #4
 800529e:	d00c      	beq.n	80052ba <Keyboard_Read+0x1a2>
			button_flags ^= (1 << EJECT);
 80052a0:	4a61      	ldr	r2, [pc, #388]	; (8005428 <Keyboard_Read+0x310>)
 80052a2:	f083 0304 	eor.w	r3, r3, #4
 80052a6:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80052a8:	7893      	ldrb	r3, [r2, #2]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	f000 81af 	beq.w	8005610 <Keyboard_Read+0x4f8>
			Display_DataTx(Eject_Off, 4);
 80052b2:	2104      	movs	r1, #4
 80052b4:	4864      	ldr	r0, [pc, #400]	; (8005448 <Keyboard_Read+0x330>)
 80052b6:	f7ff ff15 	bl	80050e4 <Display_DataTx>
	if(HAL_GPIO_ReadPin(KD1_GPIO_Port, KD1_Pin) == GPIO_PIN_SET) {
 80052ba:	2110      	movs	r1, #16
 80052bc:	4859      	ldr	r0, [pc, #356]	; (8005424 <Keyboard_Read+0x30c>)
 80052be:	f7fb fefd 	bl	80010bc <HAL_GPIO_ReadPin>
 80052c2:	2801      	cmp	r0, #1
 80052c4:	f000 81a9 	beq.w	800561a <Keyboard_Read+0x502>
		if(button_flags & (1 << JET)) {
 80052c8:	4b57      	ldr	r3, [pc, #348]	; (8005428 <Keyboard_Read+0x310>)
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80052d0:	d00c      	beq.n	80052ec <Keyboard_Read+0x1d4>
			button_flags ^= (1 << JET);
 80052d2:	4a55      	ldr	r2, [pc, #340]	; (8005428 <Keyboard_Read+0x310>)
 80052d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052d8:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80052da:	7893      	ldrb	r3, [r2, #2]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	f000 81b3 	beq.w	800564a <Keyboard_Read+0x532>
			Display_DataTx(Jet_Off, 4);
 80052e4:	2104      	movs	r1, #4
 80052e6:	4859      	ldr	r0, [pc, #356]	; (800544c <Keyboard_Read+0x334>)
 80052e8:	f7ff fefc 	bl	80050e4 <Display_DataTx>
	if(HAL_GPIO_ReadPin(KD2_GPIO_Port, KD2_Pin) == GPIO_PIN_SET) {
 80052ec:	2120      	movs	r1, #32
 80052ee:	484d      	ldr	r0, [pc, #308]	; (8005424 <Keyboard_Read+0x30c>)
 80052f0:	f7fb fee4 	bl	80010bc <HAL_GPIO_ReadPin>
 80052f4:	2801      	cmp	r0, #1
 80052f6:	f000 81ad 	beq.w	8005654 <Keyboard_Read+0x53c>
		if(button_flags & (1 << SCANBACK)) {
 80052fa:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <Keyboard_Read+0x310>)
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005302:	d00c      	beq.n	800531e <Keyboard_Read+0x206>
			button_flags ^= (1 << SCANBACK);
 8005304:	4a48      	ldr	r2, [pc, #288]	; (8005428 <Keyboard_Read+0x310>)
 8005306:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800530a:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 800530c:	7893      	ldrb	r3, [r2, #2]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	f000 81b7 	beq.w	8005684 <Keyboard_Read+0x56c>
			Display_DataTx(ScanBack_Off, 4);
 8005316:	2104      	movs	r1, #4
 8005318:	484d      	ldr	r0, [pc, #308]	; (8005450 <Keyboard_Read+0x338>)
 800531a:	f7ff fee3 	bl	80050e4 <Display_DataTx>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 800531e:	4c41      	ldr	r4, [pc, #260]	; (8005424 <Keyboard_Read+0x30c>)
 8005320:	2200      	movs	r2, #0
 8005322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005326:	4620      	mov	r0, r4
 8005328:	f7fb fedc 	bl	80010e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_SET);
 800532c:	2201      	movs	r2, #1
 800532e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005332:	4620      	mov	r0, r4
 8005334:	f7fb fed6 	bl	80010e4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(KD0_GPIO_Port, KD0_Pin) == GPIO_PIN_SET) {
 8005338:	2108      	movs	r1, #8
 800533a:	4620      	mov	r0, r4
 800533c:	f7fb febe 	bl	80010bc <HAL_GPIO_ReadPin>
 8005340:	2801      	cmp	r0, #1
 8005342:	f000 81a4 	beq.w	800568e <Keyboard_Read+0x576>
		if(button_flags & (1 << MASTERTEMPO)) {
 8005346:	4b38      	ldr	r3, [pc, #224]	; (8005428 <Keyboard_Read+0x310>)
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	f013 0f08 	tst.w	r3, #8
 800534e:	d00c      	beq.n	800536a <Keyboard_Read+0x252>
			button_flags ^= (1 << MASTERTEMPO);
 8005350:	4a35      	ldr	r2, [pc, #212]	; (8005428 <Keyboard_Read+0x310>)
 8005352:	f083 0308 	eor.w	r3, r3, #8
 8005356:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 8005358:	7893      	ldrb	r3, [r2, #2]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	f000 81ae 	beq.w	80056be <Keyboard_Read+0x5a6>
			Display_DataTx(MasterTempo_Off, 4);
 8005362:	2104      	movs	r1, #4
 8005364:	483b      	ldr	r0, [pc, #236]	; (8005454 <Keyboard_Read+0x33c>)
 8005366:	f7ff febd 	bl	80050e4 <Display_DataTx>
	if(HAL_GPIO_ReadPin(KD1_GPIO_Port, KD1_Pin) == GPIO_PIN_SET) {
 800536a:	2110      	movs	r1, #16
 800536c:	482d      	ldr	r0, [pc, #180]	; (8005424 <Keyboard_Read+0x30c>)
 800536e:	f7fb fea5 	bl	80010bc <HAL_GPIO_ReadPin>
 8005372:	2801      	cmp	r0, #1
 8005374:	f000 81a8 	beq.w	80056c8 <Keyboard_Read+0x5b0>
		if(button_flags & (1 << ZIP)) {
 8005378:	4b2b      	ldr	r3, [pc, #172]	; (8005428 <Keyboard_Read+0x310>)
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005380:	d00c      	beq.n	800539c <Keyboard_Read+0x284>
			button_flags ^= (1 << ZIP);
 8005382:	4a29      	ldr	r2, [pc, #164]	; (8005428 <Keyboard_Read+0x310>)
 8005384:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8005388:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 800538a:	7893      	ldrb	r3, [r2, #2]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	f000 81b2 	beq.w	80056f8 <Keyboard_Read+0x5e0>
			Display_DataTx(Zip_Off, 4);
 8005394:	2104      	movs	r1, #4
 8005396:	4830      	ldr	r0, [pc, #192]	; (8005458 <Keyboard_Read+0x340>)
 8005398:	f7ff fea4 	bl	80050e4 <Display_DataTx>
	if(HAL_GPIO_ReadPin(KD2_GPIO_Port, KD2_Pin) == GPIO_PIN_SET) {
 800539c:	2120      	movs	r1, #32
 800539e:	4821      	ldr	r0, [pc, #132]	; (8005424 <Keyboard_Read+0x30c>)
 80053a0:	f7fb fe8c 	bl	80010bc <HAL_GPIO_ReadPin>
 80053a4:	2801      	cmp	r0, #1
 80053a6:	f000 81ac 	beq.w	8005702 <Keyboard_Read+0x5ea>
		if(button_flags & (1 << SCANFORWARD)) {
 80053aa:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <Keyboard_Read+0x310>)
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053b2:	d00c      	beq.n	80053ce <Keyboard_Read+0x2b6>
			button_flags ^= (1 << SCANFORWARD);
 80053b4:	4a1c      	ldr	r2, [pc, #112]	; (8005428 <Keyboard_Read+0x310>)
 80053b6:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80053ba:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80053bc:	7893      	ldrb	r3, [r2, #2]
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	f000 81e8 	beq.w	8005796 <Keyboard_Read+0x67e>
			Display_DataTx(ScanForward_Off, 4);
 80053c6:	2104      	movs	r1, #4
 80053c8:	4824      	ldr	r0, [pc, #144]	; (800545c <Keyboard_Read+0x344>)
 80053ca:	f7ff fe8b 	bl	80050e4 <Display_DataTx>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 80053ce:	4c15      	ldr	r4, [pc, #84]	; (8005424 <Keyboard_Read+0x30c>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7fb fe84 	bl	80010e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 80053dc:	2201      	movs	r2, #1
 80053de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053e2:	4620      	mov	r0, r4
 80053e4:	f7fb fe7e 	bl	80010e4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(KD0_GPIO_Port, KD0_Pin) == GPIO_PIN_SET) {
 80053e8:	2108      	movs	r1, #8
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7fb fe66 	bl	80010bc <HAL_GPIO_ReadPin>
 80053f0:	2801      	cmp	r0, #1
 80053f2:	f000 81d5 	beq.w	80057a0 <Keyboard_Read+0x688>
		if(button_flags & (1 << JOG)) {
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <Keyboard_Read+0x310>)
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80053fe:	d00c      	beq.n	800541a <Keyboard_Read+0x302>
			button_flags ^= (1 << JOG);
 8005400:	4a09      	ldr	r2, [pc, #36]	; (8005428 <Keyboard_Read+0x310>)
 8005402:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005406:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 8005408:	7893      	ldrb	r3, [r2, #2]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	f000 81df 	beq.w	80057d0 <Keyboard_Read+0x6b8>
			Display_DataTx(Jog_Off, 4);
 8005412:	2104      	movs	r1, #4
 8005414:	4812      	ldr	r0, [pc, #72]	; (8005460 <Keyboard_Read+0x348>)
 8005416:	f7ff fe65 	bl	80050e4 <Display_DataTx>
	if(HAL_GPIO_ReadPin(KD1_GPIO_Port, KD1_Pin) == GPIO_PIN_SET) {
 800541a:	2110      	movs	r1, #16
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <Keyboard_Read+0x30c>)
 800541e:	f7fb fe4d 	bl	80010bc <HAL_GPIO_ReadPin>
 8005422:	e01f      	b.n	8005464 <Keyboard_Read+0x34c>
 8005424:	40010c00 	.word	0x40010c00
 8005428:	20000298 	.word	0x20000298
 800542c:	20000160 	.word	0x20000160
 8005430:	20000168 	.word	0x20000168
 8005434:	20000170 	.word	0x20000170
 8005438:	40010800 	.word	0x40010800
 800543c:	20000178 	.word	0x20000178
 8005440:	20000180 	.word	0x20000180
 8005444:	20000188 	.word	0x20000188
 8005448:	20000190 	.word	0x20000190
 800544c:	20000198 	.word	0x20000198
 8005450:	200001a0 	.word	0x200001a0
 8005454:	200001a8 	.word	0x200001a8
 8005458:	200001b0 	.word	0x200001b0
 800545c:	200001b8 	.word	0x200001b8
 8005460:	200001c0 	.word	0x200001c0
 8005464:	2801      	cmp	r0, #1
 8005466:	f000 81b8 	beq.w	80057da <Keyboard_Read+0x6c2>
		if(button_flags & (1 << WAH)) {
 800546a:	4baf      	ldr	r3, [pc, #700]	; (8005728 <Keyboard_Read+0x610>)
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005472:	f040 81ca 	bne.w	800580a <Keyboard_Read+0x6f2>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
 8005476:	2200      	movs	r2, #0
 8005478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800547c:	48ab      	ldr	r0, [pc, #684]	; (800572c <Keyboard_Read+0x614>)
 800547e:	f7fb fe31 	bl	80010e4 <HAL_GPIO_WritePin>
}
 8005482:	bd10      	pop	{r4, pc}
		if(!(button_flags & (1 << HOLD))) {
 8005484:	4ba8      	ldr	r3, [pc, #672]	; (8005728 <Keyboard_Read+0x610>)
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	f013 0f01 	tst.w	r3, #1
 800548c:	f47f ae65 	bne.w	800515a <Keyboard_Read+0x42>
			button_flags ^= (1 << HOLD);
 8005490:	4aa5      	ldr	r2, [pc, #660]	; (8005728 <Keyboard_Read+0x610>)
 8005492:	f083 0301 	eor.w	r3, r3, #1
 8005496:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 8005498:	7893      	ldrb	r3, [r2, #2]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d004      	beq.n	80054aa <Keyboard_Read+0x392>
			Display_DataTx(Hold_On, 4);
 80054a0:	2104      	movs	r1, #4
 80054a2:	48a3      	ldr	r0, [pc, #652]	; (8005730 <Keyboard_Read+0x618>)
 80054a4:	f7ff fe1e 	bl	80050e4 <Display_DataTx>
 80054a8:	e657      	b.n	800515a <Keyboard_Read+0x42>
				MIDI_DataTx(Hold_On, 4);
 80054aa:	2104      	movs	r1, #4
 80054ac:	48a0      	ldr	r0, [pc, #640]	; (8005730 <Keyboard_Read+0x618>)
 80054ae:	f000 ff31 	bl	8006314 <MIDI_DataTx>
 80054b2:	e7f5      	b.n	80054a0 <Keyboard_Read+0x388>
				MIDI_DataTx(Hold_Off, 4);
 80054b4:	2104      	movs	r1, #4
 80054b6:	489f      	ldr	r0, [pc, #636]	; (8005734 <Keyboard_Read+0x61c>)
 80054b8:	f000 ff2c 	bl	8006314 <MIDI_DataTx>
 80054bc:	e649      	b.n	8005152 <Keyboard_Read+0x3a>
		if(!(button_flags & (1 << TRACKBACK))) {
 80054be:	4b9a      	ldr	r3, [pc, #616]	; (8005728 <Keyboard_Read+0x610>)
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	f013 0f10 	tst.w	r3, #16
 80054c6:	f47f ae61 	bne.w	800518c <Keyboard_Read+0x74>
			button_flags ^= (1 << TRACKBACK);
 80054ca:	4a97      	ldr	r2, [pc, #604]	; (8005728 <Keyboard_Read+0x610>)
 80054cc:	f083 0310 	eor.w	r3, r3, #16
 80054d0:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80054d2:	7893      	ldrb	r3, [r2, #2]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d004      	beq.n	80054e4 <Keyboard_Read+0x3cc>
			Display_DataTx(TrackBack_On, 4);
 80054da:	2104      	movs	r1, #4
 80054dc:	4896      	ldr	r0, [pc, #600]	; (8005738 <Keyboard_Read+0x620>)
 80054de:	f7ff fe01 	bl	80050e4 <Display_DataTx>
 80054e2:	e653      	b.n	800518c <Keyboard_Read+0x74>
				MIDI_DataTx(TrackBack_On, 4);
 80054e4:	2104      	movs	r1, #4
 80054e6:	4894      	ldr	r0, [pc, #592]	; (8005738 <Keyboard_Read+0x620>)
 80054e8:	f000 ff14 	bl	8006314 <MIDI_DataTx>
 80054ec:	e7f5      	b.n	80054da <Keyboard_Read+0x3c2>
				MIDI_DataTx(TrackBack_Off, 4);
 80054ee:	2104      	movs	r1, #4
 80054f0:	4892      	ldr	r0, [pc, #584]	; (800573c <Keyboard_Read+0x624>)
 80054f2:	f000 ff0f 	bl	8006314 <MIDI_DataTx>
 80054f6:	e645      	b.n	8005184 <Keyboard_Read+0x6c>
		if(!(button_flags & (1 << PLAY))) {
 80054f8:	4b8b      	ldr	r3, [pc, #556]	; (8005728 <Keyboard_Read+0x610>)
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005500:	f47f ae5d 	bne.w	80051be <Keyboard_Read+0xa6>
			button_flags ^= (1 << PLAY);
 8005504:	4a88      	ldr	r2, [pc, #544]	; (8005728 <Keyboard_Read+0x610>)
 8005506:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 800550a:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 800550c:	7893      	ldrb	r3, [r2, #2]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d004      	beq.n	800551e <Keyboard_Read+0x406>
			Display_DataTx(Play_On, 4);
 8005514:	2104      	movs	r1, #4
 8005516:	488a      	ldr	r0, [pc, #552]	; (8005740 <Keyboard_Read+0x628>)
 8005518:	f7ff fde4 	bl	80050e4 <Display_DataTx>
 800551c:	e64f      	b.n	80051be <Keyboard_Read+0xa6>
				MIDI_DataTx(Play_On, 4);
 800551e:	2104      	movs	r1, #4
 8005520:	4887      	ldr	r0, [pc, #540]	; (8005740 <Keyboard_Read+0x628>)
 8005522:	f000 fef7 	bl	8006314 <MIDI_DataTx>
 8005526:	e7f5      	b.n	8005514 <Keyboard_Read+0x3fc>
				MIDI_DataTx(Play_Off, 4);
 8005528:	2104      	movs	r1, #4
 800552a:	4886      	ldr	r0, [pc, #536]	; (8005744 <Keyboard_Read+0x62c>)
 800552c:	f000 fef2 	bl	8006314 <MIDI_DataTx>
 8005530:	e641      	b.n	80051b6 <Keyboard_Read+0x9e>
		if(!(button_flags & (1 << TIME))) {
 8005532:	4b7d      	ldr	r3, [pc, #500]	; (8005728 <Keyboard_Read+0x610>)
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	f013 0f02 	tst.w	r3, #2
 800553a:	f47f ae66 	bne.w	800520a <Keyboard_Read+0xf2>
			button_flags ^= (1 << TIME);
 800553e:	4a7a      	ldr	r2, [pc, #488]	; (8005728 <Keyboard_Read+0x610>)
 8005540:	f083 0302 	eor.w	r3, r3, #2
 8005544:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 8005546:	7893      	ldrb	r3, [r2, #2]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d004      	beq.n	8005558 <Keyboard_Read+0x440>
			Display_DataTx(Time_On, 4);
 800554e:	2104      	movs	r1, #4
 8005550:	487d      	ldr	r0, [pc, #500]	; (8005748 <Keyboard_Read+0x630>)
 8005552:	f7ff fdc7 	bl	80050e4 <Display_DataTx>
 8005556:	e658      	b.n	800520a <Keyboard_Read+0xf2>
				MIDI_DataTx(Time_On, 4);
 8005558:	2104      	movs	r1, #4
 800555a:	487b      	ldr	r0, [pc, #492]	; (8005748 <Keyboard_Read+0x630>)
 800555c:	f000 feda 	bl	8006314 <MIDI_DataTx>
 8005560:	e7f5      	b.n	800554e <Keyboard_Read+0x436>
				MIDI_DataTx(Time_Off, 4);
 8005562:	2104      	movs	r1, #4
 8005564:	4879      	ldr	r0, [pc, #484]	; (800574c <Keyboard_Read+0x634>)
 8005566:	f000 fed5 	bl	8006314 <MIDI_DataTx>
 800556a:	e64a      	b.n	8005202 <Keyboard_Read+0xea>
		if(!(button_flags & (1 << TRACKFORWARD))) {
 800556c:	4b6e      	ldr	r3, [pc, #440]	; (8005728 <Keyboard_Read+0x610>)
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	f013 0f20 	tst.w	r3, #32
 8005574:	f47f ae62 	bne.w	800523c <Keyboard_Read+0x124>
			button_flags ^= (1 << TRACKFORWARD);
 8005578:	4a6b      	ldr	r2, [pc, #428]	; (8005728 <Keyboard_Read+0x610>)
 800557a:	f083 0320 	eor.w	r3, r3, #32
 800557e:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 8005580:	7893      	ldrb	r3, [r2, #2]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d004      	beq.n	8005592 <Keyboard_Read+0x47a>
			Display_DataTx(TrackForward_On, 4);
 8005588:	2104      	movs	r1, #4
 800558a:	4871      	ldr	r0, [pc, #452]	; (8005750 <Keyboard_Read+0x638>)
 800558c:	f7ff fdaa 	bl	80050e4 <Display_DataTx>
 8005590:	e654      	b.n	800523c <Keyboard_Read+0x124>
				MIDI_DataTx(TrackForward_On, 4);
 8005592:	2104      	movs	r1, #4
 8005594:	486e      	ldr	r0, [pc, #440]	; (8005750 <Keyboard_Read+0x638>)
 8005596:	f000 febd 	bl	8006314 <MIDI_DataTx>
 800559a:	e7f5      	b.n	8005588 <Keyboard_Read+0x470>
				MIDI_DataTx(TrackForward_Off, 4);
 800559c:	2104      	movs	r1, #4
 800559e:	486d      	ldr	r0, [pc, #436]	; (8005754 <Keyboard_Read+0x63c>)
 80055a0:	f000 feb8 	bl	8006314 <MIDI_DataTx>
 80055a4:	e646      	b.n	8005234 <Keyboard_Read+0x11c>
		if(!(button_flags & (1 << CUE))) {
 80055a6:	4b60      	ldr	r3, [pc, #384]	; (8005728 <Keyboard_Read+0x610>)
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80055ae:	f47f ae5e 	bne.w	800526e <Keyboard_Read+0x156>
			button_flags ^= (1 << CUE);
 80055b2:	4a5d      	ldr	r2, [pc, #372]	; (8005728 <Keyboard_Read+0x610>)
 80055b4:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 80055b8:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80055ba:	7893      	ldrb	r3, [r2, #2]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d004      	beq.n	80055cc <Keyboard_Read+0x4b4>
			Display_DataTx(Cue_On, 4);
 80055c2:	2104      	movs	r1, #4
 80055c4:	4864      	ldr	r0, [pc, #400]	; (8005758 <Keyboard_Read+0x640>)
 80055c6:	f7ff fd8d 	bl	80050e4 <Display_DataTx>
 80055ca:	e650      	b.n	800526e <Keyboard_Read+0x156>
				MIDI_DataTx(Cue_On, 4);
 80055cc:	2104      	movs	r1, #4
 80055ce:	4862      	ldr	r0, [pc, #392]	; (8005758 <Keyboard_Read+0x640>)
 80055d0:	f000 fea0 	bl	8006314 <MIDI_DataTx>
 80055d4:	e7f5      	b.n	80055c2 <Keyboard_Read+0x4aa>
				MIDI_DataTx(Cue_Off, 4);
 80055d6:	2104      	movs	r1, #4
 80055d8:	4860      	ldr	r0, [pc, #384]	; (800575c <Keyboard_Read+0x644>)
 80055da:	f000 fe9b 	bl	8006314 <MIDI_DataTx>
 80055de:	e642      	b.n	8005266 <Keyboard_Read+0x14e>
		if(!(button_flags & (1 << EJECT))) {
 80055e0:	4b51      	ldr	r3, [pc, #324]	; (8005728 <Keyboard_Read+0x610>)
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	f013 0f04 	tst.w	r3, #4
 80055e8:	f47f ae67 	bne.w	80052ba <Keyboard_Read+0x1a2>
			button_flags ^= (1 << EJECT);
 80055ec:	4a4e      	ldr	r2, [pc, #312]	; (8005728 <Keyboard_Read+0x610>)
 80055ee:	f083 0304 	eor.w	r3, r3, #4
 80055f2:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80055f4:	7893      	ldrb	r3, [r2, #2]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d004      	beq.n	8005606 <Keyboard_Read+0x4ee>
			Display_DataTx(Eject_On, 4);
 80055fc:	2104      	movs	r1, #4
 80055fe:	4858      	ldr	r0, [pc, #352]	; (8005760 <Keyboard_Read+0x648>)
 8005600:	f7ff fd70 	bl	80050e4 <Display_DataTx>
 8005604:	e659      	b.n	80052ba <Keyboard_Read+0x1a2>
				MIDI_DataTx(Eject_On, 4);
 8005606:	2104      	movs	r1, #4
 8005608:	4855      	ldr	r0, [pc, #340]	; (8005760 <Keyboard_Read+0x648>)
 800560a:	f000 fe83 	bl	8006314 <MIDI_DataTx>
 800560e:	e7f5      	b.n	80055fc <Keyboard_Read+0x4e4>
				MIDI_DataTx(Eject_Off, 4);
 8005610:	2104      	movs	r1, #4
 8005612:	4854      	ldr	r0, [pc, #336]	; (8005764 <Keyboard_Read+0x64c>)
 8005614:	f000 fe7e 	bl	8006314 <MIDI_DataTx>
 8005618:	e64b      	b.n	80052b2 <Keyboard_Read+0x19a>
		if(!(button_flags & (1 << JET))) {
 800561a:	4b43      	ldr	r3, [pc, #268]	; (8005728 <Keyboard_Read+0x610>)
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005622:	f47f ae63 	bne.w	80052ec <Keyboard_Read+0x1d4>
			button_flags ^= (1 << JET);
 8005626:	4a40      	ldr	r2, [pc, #256]	; (8005728 <Keyboard_Read+0x610>)
 8005628:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800562c:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 800562e:	7893      	ldrb	r3, [r2, #2]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d004      	beq.n	8005640 <Keyboard_Read+0x528>
			Display_DataTx(Jet_On, 4);
 8005636:	2104      	movs	r1, #4
 8005638:	484b      	ldr	r0, [pc, #300]	; (8005768 <Keyboard_Read+0x650>)
 800563a:	f7ff fd53 	bl	80050e4 <Display_DataTx>
 800563e:	e655      	b.n	80052ec <Keyboard_Read+0x1d4>
				MIDI_DataTx(Jet_On, 4);
 8005640:	2104      	movs	r1, #4
 8005642:	4849      	ldr	r0, [pc, #292]	; (8005768 <Keyboard_Read+0x650>)
 8005644:	f000 fe66 	bl	8006314 <MIDI_DataTx>
 8005648:	e7f5      	b.n	8005636 <Keyboard_Read+0x51e>
				MIDI_DataTx(Jet_Off, 4);
 800564a:	2104      	movs	r1, #4
 800564c:	4847      	ldr	r0, [pc, #284]	; (800576c <Keyboard_Read+0x654>)
 800564e:	f000 fe61 	bl	8006314 <MIDI_DataTx>
 8005652:	e647      	b.n	80052e4 <Keyboard_Read+0x1cc>
		if(!(button_flags & (1 << SCANBACK))) {
 8005654:	4b34      	ldr	r3, [pc, #208]	; (8005728 <Keyboard_Read+0x610>)
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	f013 0f40 	tst.w	r3, #64	; 0x40
 800565c:	f47f ae5f 	bne.w	800531e <Keyboard_Read+0x206>
			button_flags ^= (1 << SCANBACK);
 8005660:	4a31      	ldr	r2, [pc, #196]	; (8005728 <Keyboard_Read+0x610>)
 8005662:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8005666:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 8005668:	7893      	ldrb	r3, [r2, #2]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d004      	beq.n	800567a <Keyboard_Read+0x562>
			Display_DataTx(ScanBack_On, 4);
 8005670:	2104      	movs	r1, #4
 8005672:	483f      	ldr	r0, [pc, #252]	; (8005770 <Keyboard_Read+0x658>)
 8005674:	f7ff fd36 	bl	80050e4 <Display_DataTx>
 8005678:	e651      	b.n	800531e <Keyboard_Read+0x206>
				MIDI_DataTx(ScanBack_On, 4);
 800567a:	2104      	movs	r1, #4
 800567c:	483c      	ldr	r0, [pc, #240]	; (8005770 <Keyboard_Read+0x658>)
 800567e:	f000 fe49 	bl	8006314 <MIDI_DataTx>
 8005682:	e7f5      	b.n	8005670 <Keyboard_Read+0x558>
				MIDI_DataTx(ScanBack_Off, 4);
 8005684:	2104      	movs	r1, #4
 8005686:	483b      	ldr	r0, [pc, #236]	; (8005774 <Keyboard_Read+0x65c>)
 8005688:	f000 fe44 	bl	8006314 <MIDI_DataTx>
 800568c:	e643      	b.n	8005316 <Keyboard_Read+0x1fe>
		if(!(button_flags & (1 << MASTERTEMPO))) {
 800568e:	4b26      	ldr	r3, [pc, #152]	; (8005728 <Keyboard_Read+0x610>)
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	f013 0f08 	tst.w	r3, #8
 8005696:	f47f ae68 	bne.w	800536a <Keyboard_Read+0x252>
			button_flags ^= (1 << MASTERTEMPO);
 800569a:	4a23      	ldr	r2, [pc, #140]	; (8005728 <Keyboard_Read+0x610>)
 800569c:	f083 0308 	eor.w	r3, r3, #8
 80056a0:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80056a2:	7893      	ldrb	r3, [r2, #2]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d004      	beq.n	80056b4 <Keyboard_Read+0x59c>
			Display_DataTx(MasterTempo_On, 4);
 80056aa:	2104      	movs	r1, #4
 80056ac:	4832      	ldr	r0, [pc, #200]	; (8005778 <Keyboard_Read+0x660>)
 80056ae:	f7ff fd19 	bl	80050e4 <Display_DataTx>
 80056b2:	e65a      	b.n	800536a <Keyboard_Read+0x252>
				MIDI_DataTx(MasterTempo_On, 4);
 80056b4:	2104      	movs	r1, #4
 80056b6:	4830      	ldr	r0, [pc, #192]	; (8005778 <Keyboard_Read+0x660>)
 80056b8:	f000 fe2c 	bl	8006314 <MIDI_DataTx>
 80056bc:	e7f5      	b.n	80056aa <Keyboard_Read+0x592>
				MIDI_DataTx(MasterTempo_Off, 4);
 80056be:	2104      	movs	r1, #4
 80056c0:	482e      	ldr	r0, [pc, #184]	; (800577c <Keyboard_Read+0x664>)
 80056c2:	f000 fe27 	bl	8006314 <MIDI_DataTx>
 80056c6:	e64c      	b.n	8005362 <Keyboard_Read+0x24a>
		if(!(button_flags & (1 << ZIP))) {
 80056c8:	4b17      	ldr	r3, [pc, #92]	; (8005728 <Keyboard_Read+0x610>)
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80056d0:	f47f ae64 	bne.w	800539c <Keyboard_Read+0x284>
			button_flags ^= (1 << ZIP);
 80056d4:	4a14      	ldr	r2, [pc, #80]	; (8005728 <Keyboard_Read+0x610>)
 80056d6:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80056da:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80056dc:	7893      	ldrb	r3, [r2, #2]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d004      	beq.n	80056ee <Keyboard_Read+0x5d6>
			Display_DataTx(Zip_On, 4);
 80056e4:	2104      	movs	r1, #4
 80056e6:	4826      	ldr	r0, [pc, #152]	; (8005780 <Keyboard_Read+0x668>)
 80056e8:	f7ff fcfc 	bl	80050e4 <Display_DataTx>
 80056ec:	e656      	b.n	800539c <Keyboard_Read+0x284>
				MIDI_DataTx(Zip_On, 4);
 80056ee:	2104      	movs	r1, #4
 80056f0:	4823      	ldr	r0, [pc, #140]	; (8005780 <Keyboard_Read+0x668>)
 80056f2:	f000 fe0f 	bl	8006314 <MIDI_DataTx>
 80056f6:	e7f5      	b.n	80056e4 <Keyboard_Read+0x5cc>
				MIDI_DataTx(Zip_Off, 4);
 80056f8:	2104      	movs	r1, #4
 80056fa:	4822      	ldr	r0, [pc, #136]	; (8005784 <Keyboard_Read+0x66c>)
 80056fc:	f000 fe0a 	bl	8006314 <MIDI_DataTx>
 8005700:	e648      	b.n	8005394 <Keyboard_Read+0x27c>
		if(!(button_flags & (1 << SCANFORWARD))) {
 8005702:	4b09      	ldr	r3, [pc, #36]	; (8005728 <Keyboard_Read+0x610>)
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	f013 0f80 	tst.w	r3, #128	; 0x80
 800570a:	f47f ae60 	bne.w	80053ce <Keyboard_Read+0x2b6>
			button_flags ^= (1 << SCANFORWARD);
 800570e:	4a06      	ldr	r2, [pc, #24]	; (8005728 <Keyboard_Read+0x610>)
 8005710:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8005714:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 8005716:	7893      	ldrb	r3, [r2, #2]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d036      	beq.n	800578c <Keyboard_Read+0x674>
			Display_DataTx(ScanForward_On, 4);
 800571e:	2104      	movs	r1, #4
 8005720:	4819      	ldr	r0, [pc, #100]	; (8005788 <Keyboard_Read+0x670>)
 8005722:	f7ff fcdf 	bl	80050e4 <Display_DataTx>
 8005726:	e652      	b.n	80053ce <Keyboard_Read+0x2b6>
 8005728:	20000298 	.word	0x20000298
 800572c:	40010c00 	.word	0x40010c00
 8005730:	2000015c 	.word	0x2000015c
 8005734:	20000160 	.word	0x20000160
 8005738:	20000164 	.word	0x20000164
 800573c:	20000168 	.word	0x20000168
 8005740:	2000016c 	.word	0x2000016c
 8005744:	20000170 	.word	0x20000170
 8005748:	20000174 	.word	0x20000174
 800574c:	20000178 	.word	0x20000178
 8005750:	2000017c 	.word	0x2000017c
 8005754:	20000180 	.word	0x20000180
 8005758:	20000184 	.word	0x20000184
 800575c:	20000188 	.word	0x20000188
 8005760:	2000018c 	.word	0x2000018c
 8005764:	20000190 	.word	0x20000190
 8005768:	20000194 	.word	0x20000194
 800576c:	20000198 	.word	0x20000198
 8005770:	2000019c 	.word	0x2000019c
 8005774:	200001a0 	.word	0x200001a0
 8005778:	200001a4 	.word	0x200001a4
 800577c:	200001a8 	.word	0x200001a8
 8005780:	200001ac 	.word	0x200001ac
 8005784:	200001b0 	.word	0x200001b0
 8005788:	200001b4 	.word	0x200001b4
				MIDI_DataTx(ScanForward_On, 4);
 800578c:	2104      	movs	r1, #4
 800578e:	4828      	ldr	r0, [pc, #160]	; (8005830 <Keyboard_Read+0x718>)
 8005790:	f000 fdc0 	bl	8006314 <MIDI_DataTx>
 8005794:	e7c3      	b.n	800571e <Keyboard_Read+0x606>
				MIDI_DataTx(ScanForward_Off, 4);
 8005796:	2104      	movs	r1, #4
 8005798:	4826      	ldr	r0, [pc, #152]	; (8005834 <Keyboard_Read+0x71c>)
 800579a:	f000 fdbb 	bl	8006314 <MIDI_DataTx>
 800579e:	e612      	b.n	80053c6 <Keyboard_Read+0x2ae>
		if(!(button_flags & (1 << JOG))) {
 80057a0:	4b25      	ldr	r3, [pc, #148]	; (8005838 <Keyboard_Read+0x720>)
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80057a8:	f47f ae37 	bne.w	800541a <Keyboard_Read+0x302>
			button_flags ^= (1 << JOG);
 80057ac:	4a22      	ldr	r2, [pc, #136]	; (8005838 <Keyboard_Read+0x720>)
 80057ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057b2:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80057b4:	7893      	ldrb	r3, [r2, #2]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d004      	beq.n	80057c6 <Keyboard_Read+0x6ae>
			Display_DataTx(Jog_On, 4);
 80057bc:	2104      	movs	r1, #4
 80057be:	481f      	ldr	r0, [pc, #124]	; (800583c <Keyboard_Read+0x724>)
 80057c0:	f7ff fc90 	bl	80050e4 <Display_DataTx>
 80057c4:	e629      	b.n	800541a <Keyboard_Read+0x302>
				MIDI_DataTx(Jog_On, 4);
 80057c6:	2104      	movs	r1, #4
 80057c8:	481c      	ldr	r0, [pc, #112]	; (800583c <Keyboard_Read+0x724>)
 80057ca:	f000 fda3 	bl	8006314 <MIDI_DataTx>
 80057ce:	e7f5      	b.n	80057bc <Keyboard_Read+0x6a4>
				MIDI_DataTx(Jog_Off, 4);
 80057d0:	2104      	movs	r1, #4
 80057d2:	481b      	ldr	r0, [pc, #108]	; (8005840 <Keyboard_Read+0x728>)
 80057d4:	f000 fd9e 	bl	8006314 <MIDI_DataTx>
 80057d8:	e61b      	b.n	8005412 <Keyboard_Read+0x2fa>
		if(!(button_flags & (1 << WAH))) {
 80057da:	4b17      	ldr	r3, [pc, #92]	; (8005838 <Keyboard_Read+0x720>)
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80057e2:	f47f ae48 	bne.w	8005476 <Keyboard_Read+0x35e>
			button_flags ^= (1 << WAH);
 80057e6:	4a14      	ldr	r2, [pc, #80]	; (8005838 <Keyboard_Read+0x720>)
 80057e8:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80057ec:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 80057ee:	7893      	ldrb	r3, [r2, #2]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d004      	beq.n	8005800 <Keyboard_Read+0x6e8>
			Display_DataTx(Wah_On, 4);
 80057f6:	2104      	movs	r1, #4
 80057f8:	4812      	ldr	r0, [pc, #72]	; (8005844 <Keyboard_Read+0x72c>)
 80057fa:	f7ff fc73 	bl	80050e4 <Display_DataTx>
 80057fe:	e63a      	b.n	8005476 <Keyboard_Read+0x35e>
				MIDI_DataTx(Wah_On, 4);
 8005800:	2104      	movs	r1, #4
 8005802:	4810      	ldr	r0, [pc, #64]	; (8005844 <Keyboard_Read+0x72c>)
 8005804:	f000 fd86 	bl	8006314 <MIDI_DataTx>
 8005808:	e7f5      	b.n	80057f6 <Keyboard_Read+0x6de>
			button_flags ^= (1 << WAH);
 800580a:	4a0b      	ldr	r2, [pc, #44]	; (8005838 <Keyboard_Read+0x720>)
 800580c:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8005810:	8013      	strh	r3, [r2, #0]
			if(usb_status == CONNECTED) {
 8005812:	7893      	ldrb	r3, [r2, #2]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d004      	beq.n	8005824 <Keyboard_Read+0x70c>
			Display_DataTx(Wah_Off, 4);
 800581a:	2104      	movs	r1, #4
 800581c:	480a      	ldr	r0, [pc, #40]	; (8005848 <Keyboard_Read+0x730>)
 800581e:	f7ff fc61 	bl	80050e4 <Display_DataTx>
 8005822:	e628      	b.n	8005476 <Keyboard_Read+0x35e>
				MIDI_DataTx(Wah_Off, 4);
 8005824:	2104      	movs	r1, #4
 8005826:	4808      	ldr	r0, [pc, #32]	; (8005848 <Keyboard_Read+0x730>)
 8005828:	f000 fd74 	bl	8006314 <MIDI_DataTx>
 800582c:	e7f5      	b.n	800581a <Keyboard_Read+0x702>
 800582e:	bf00      	nop
 8005830:	200001b4 	.word	0x200001b4
 8005834:	200001b8 	.word	0x200001b8
 8005838:	20000298 	.word	0x20000298
 800583c:	200001bc 	.word	0x200001bc
 8005840:	200001c0 	.word	0x200001c0
 8005844:	200001c4 	.word	0x200001c4
 8005848:	200001c8 	.word	0x200001c8

0800584c <Display_DataRx>:

// receive data from STM32F746DISCO board via SPI1
void Display_DataRx() {
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	b084      	sub	sp, #16
	uint8_t dummy_data[4] = {0};
 8005850:	2200      	movs	r2, #0
 8005852:	ac04      	add	r4, sp, #16
 8005854:	f844 2d04 	str.w	r2, [r4, #-4]!
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8005858:	4e2b      	ldr	r6, [pc, #172]	; (8005908 <Display_DataRx+0xbc>)
 800585a:	2110      	movs	r1, #16
 800585c:	4630      	mov	r0, r6
 800585e:	f7fb fc41 	bl	80010e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, dummy_data, spi_rx_buffer, 4, 0x1000);
 8005862:	4d2a      	ldr	r5, [pc, #168]	; (800590c <Display_DataRx+0xc0>)
 8005864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	2304      	movs	r3, #4
 800586c:	18ea      	adds	r2, r5, r3
 800586e:	4621      	mov	r1, r4
 8005870:	4827      	ldr	r0, [pc, #156]	; (8005910 <Display_DataRx+0xc4>)
 8005872:	f7fd f82b 	bl	80028cc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8005876:	2201      	movs	r2, #1
 8005878:	2110      	movs	r1, #16
 800587a:	4630      	mov	r0, r6
 800587c:	f7fb fc32 	bl	80010e4 <HAL_GPIO_WritePin>
	if((spi_rx_buffer[1] & 0xF0) == 0x90) {
 8005880:	796b      	ldrb	r3, [r5, #5]
 8005882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005886:	2b90      	cmp	r3, #144	; 0x90
 8005888:	d001      	beq.n	800588e <Display_DataRx+0x42>
		}
		if((spi_rx_buffer[2] & (1 << 3))) {
			Display_DataTx(Pitch, 4);
		}
	}
}
 800588a:	b004      	add	sp, #16
 800588c:	bd70      	pop	{r4, r5, r6, pc}
		if((spi_rx_buffer[2] & (1 << 0))) {
 800588e:	79ab      	ldrb	r3, [r5, #6]
 8005890:	f013 0f01 	tst.w	r3, #1
 8005894:	d024      	beq.n	80058e0 <Display_DataRx+0x94>
			HAL_GPIO_WritePin(PLAY_GPIO_Port, PLAY_Pin, GPIO_PIN_SET);
 8005896:	2201      	movs	r2, #1
 8005898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800589c:	481d      	ldr	r0, [pc, #116]	; (8005914 <Display_DataRx+0xc8>)
 800589e:	f7fb fc21 	bl	80010e4 <HAL_GPIO_WritePin>
		if((spi_rx_buffer[2] & (1 << 1))) {
 80058a2:	4b1a      	ldr	r3, [pc, #104]	; (800590c <Display_DataRx+0xc0>)
 80058a4:	799b      	ldrb	r3, [r3, #6]
 80058a6:	f013 0f02 	tst.w	r3, #2
 80058aa:	d020      	beq.n	80058ee <Display_DataRx+0xa2>
			HAL_GPIO_WritePin(CUE_GPIO_Port, CUE_Pin, GPIO_PIN_SET);
 80058ac:	2201      	movs	r2, #1
 80058ae:	2104      	movs	r1, #4
 80058b0:	4818      	ldr	r0, [pc, #96]	; (8005914 <Display_DataRx+0xc8>)
 80058b2:	f7fb fc17 	bl	80010e4 <HAL_GPIO_WritePin>
		if((spi_rx_buffer[2] & (1 << 2))) {
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <Display_DataRx+0xc0>)
 80058b8:	799b      	ldrb	r3, [r3, #6]
 80058ba:	f013 0f04 	tst.w	r3, #4
 80058be:	d01c      	beq.n	80058fa <Display_DataRx+0xae>
			HAL_GPIO_WritePin(DISC_GPIO_Port, DISC_Pin, GPIO_PIN_SET);
 80058c0:	2201      	movs	r2, #1
 80058c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058c6:	4813      	ldr	r0, [pc, #76]	; (8005914 <Display_DataRx+0xc8>)
 80058c8:	f7fb fc0c 	bl	80010e4 <HAL_GPIO_WritePin>
		if((spi_rx_buffer[2] & (1 << 3))) {
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <Display_DataRx+0xc0>)
 80058ce:	799b      	ldrb	r3, [r3, #6]
 80058d0:	f013 0f08 	tst.w	r3, #8
 80058d4:	d0d9      	beq.n	800588a <Display_DataRx+0x3e>
			Display_DataTx(Pitch, 4);
 80058d6:	2104      	movs	r1, #4
 80058d8:	480f      	ldr	r0, [pc, #60]	; (8005918 <Display_DataRx+0xcc>)
 80058da:	f7ff fc03 	bl	80050e4 <Display_DataTx>
}
 80058de:	e7d4      	b.n	800588a <Display_DataRx+0x3e>
			HAL_GPIO_WritePin(PLAY_GPIO_Port, PLAY_Pin, GPIO_PIN_RESET);
 80058e0:	2200      	movs	r2, #0
 80058e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058e6:	480b      	ldr	r0, [pc, #44]	; (8005914 <Display_DataRx+0xc8>)
 80058e8:	f7fb fbfc 	bl	80010e4 <HAL_GPIO_WritePin>
 80058ec:	e7d9      	b.n	80058a2 <Display_DataRx+0x56>
			HAL_GPIO_WritePin(CUE_GPIO_Port, CUE_Pin, GPIO_PIN_RESET);
 80058ee:	2200      	movs	r2, #0
 80058f0:	2104      	movs	r1, #4
 80058f2:	4808      	ldr	r0, [pc, #32]	; (8005914 <Display_DataRx+0xc8>)
 80058f4:	f7fb fbf6 	bl	80010e4 <HAL_GPIO_WritePin>
 80058f8:	e7dd      	b.n	80058b6 <Display_DataRx+0x6a>
			HAL_GPIO_WritePin(DISC_GPIO_Port, DISC_Pin, GPIO_PIN_RESET);
 80058fa:	2200      	movs	r2, #0
 80058fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005900:	4804      	ldr	r0, [pc, #16]	; (8005914 <Display_DataRx+0xc8>)
 8005902:	f7fb fbef 	bl	80010e4 <HAL_GPIO_WritePin>
 8005906:	e7e1      	b.n	80058cc <Display_DataRx+0x80>
 8005908:	40010800 	.word	0x40010800
 800590c:	20000298 	.word	0x20000298
 8005910:	2000073c 	.word	0x2000073c
 8005914:	40010c00 	.word	0x40010c00
 8005918:	200001cc 	.word	0x200001cc

0800591c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800591c:	e7fe      	b.n	800591c <Error_Handler>

0800591e <SystemClock_Config>:
{
 800591e:	b500      	push	{lr}
 8005920:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005922:	2300      	movs	r3, #0
 8005924:	930c      	str	r3, [sp, #48]	; 0x30
 8005926:	930d      	str	r3, [sp, #52]	; 0x34
 8005928:	930f      	str	r3, [sp, #60]	; 0x3c
 800592a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800592c:	9305      	str	r3, [sp, #20]
 800592e:	9306      	str	r3, [sp, #24]
 8005930:	9307      	str	r3, [sp, #28]
 8005932:	9308      	str	r3, [sp, #32]
 8005934:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	9302      	str	r3, [sp, #8]
 800593a:	9303      	str	r3, [sp, #12]
 800593c:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800593e:	2201      	movs	r2, #1
 8005940:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005946:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005948:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800594a:	2202      	movs	r2, #2
 800594c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800594e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8005950:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8005954:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005956:	a80a      	add	r0, sp, #40	; 0x28
 8005958:	f7fc f872 	bl	8001a40 <HAL_RCC_OscConfig>
 800595c:	b9e8      	cbnz	r0, 800599a <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800595e:	230f      	movs	r3, #15
 8005960:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005962:	2302      	movs	r3, #2
 8005964:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005966:	2300      	movs	r3, #0
 8005968:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800596a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800596e:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005970:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005972:	2101      	movs	r1, #1
 8005974:	a805      	add	r0, sp, #20
 8005976:	f7fc fb41 	bl	8001ffc <HAL_RCC_ClockConfig>
 800597a:	b980      	cbnz	r0, 800599e <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800597c:	2312      	movs	r3, #18
 800597e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8005980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005984:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800598a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800598c:	a801      	add	r0, sp, #4
 800598e:	f7fc fc5d 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 8005992:	b930      	cbnz	r0, 80059a2 <SystemClock_Config+0x84>
}
 8005994:	b015      	add	sp, #84	; 0x54
 8005996:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800599a:	f7ff ffbf 	bl	800591c <Error_Handler>
    Error_Handler();
 800599e:	f7ff ffbd 	bl	800591c <Error_Handler>
    Error_Handler();
 80059a2:	f7ff ffbb 	bl	800591c <Error_Handler>
	...

080059a8 <main>:
{
 80059a8:	b508      	push	{r3, lr}
  HAL_Init();
 80059aa:	f7fa fbf3 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80059ae:	f7ff ffb6 	bl	800591e <SystemClock_Config>
  MX_GPIO_Init();
 80059b2:	f7ff fae9 	bl	8004f88 <MX_GPIO_Init>
  MX_DMA_Init();
 80059b6:	f7ff facd 	bl	8004f54 <MX_DMA_Init>
  MX_ADC1_Init();
 80059ba:	f7ff fa43 	bl	8004e44 <MX_ADC1_Init>
  MX_SPI1_Init();
 80059be:	f000 f865 	bl	8005a8c <MX_SPI1_Init>
  MX_TIM3_Init();
 80059c2:	f000 f9fb 	bl	8005dbc <MX_TIM3_Init>
  MX_TIM4_Init();
 80059c6:	f000 fa31 	bl	8005e2c <MX_TIM4_Init>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ca:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <main+0xb8>)
 80059cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80059d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80059d8:	f3bf 8f6f 	isb	sy
  HAL_ADCEx_Calibration_Start(&hadc1);
 80059dc:	4c21      	ldr	r4, [pc, #132]	; (8005a64 <main+0xbc>)
 80059de:	4620      	mov	r0, r4
 80059e0:	f7fa ff18 	bl	8000814 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 200);
 80059e4:	22c8      	movs	r2, #200	; 0xc8
 80059e6:	4920      	ldr	r1, [pc, #128]	; (8005a68 <main+0xc0>)
 80059e8:	4620      	mov	r0, r4
 80059ea:	f7fa fd51 	bl	8000490 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 80059ee:	481f      	ldr	r0, [pc, #124]	; (8005a6c <main+0xc4>)
 80059f0:	f7fd f8bc 	bl	8002b6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80059f4:	2104      	movs	r1, #4
 80059f6:	481e      	ldr	r0, [pc, #120]	; (8005a70 <main+0xc8>)
 80059f8:	f7fd fd48 	bl	800348c <HAL_TIM_Encoder_Start_IT>
  if(HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin) == GPIO_PIN_RESET) {
 80059fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a00:	481c      	ldr	r0, [pc, #112]	; (8005a74 <main+0xcc>)
 8005a02:	f7fb fb5b 	bl	80010bc <HAL_GPIO_ReadPin>
 8005a06:	b9a8      	cbnz	r0, 8005a34 <main+0x8c>
	  usb_status = DISCONNECTED;
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <main+0xd0>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	709a      	strb	r2, [r3, #2]
	  Display_DataTx(Disconnected, 4);
 8005a0e:	2104      	movs	r1, #4
 8005a10:	481a      	ldr	r0, [pc, #104]	; (8005a7c <main+0xd4>)
 8005a12:	f7ff fb67 	bl	80050e4 <Display_DataTx>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a16:	4b12      	ldr	r3, [pc, #72]	; (8005a60 <main+0xb8>)
 8005a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a1c:	605a      	str	r2, [r3, #4]
	  Keyboard_Read();
 8005a1e:	f7ff fb7b 	bl	8005118 <Keyboard_Read>
	  HAL_Delay(25);
 8005a22:	2019      	movs	r0, #25
 8005a24:	f7fa fbda 	bl	80001dc <HAL_Delay>
	  Display_DataRx();
 8005a28:	f7ff ff10 	bl	800584c <Display_DataRx>
	  HAL_Delay(25);
 8005a2c:	2019      	movs	r0, #25
 8005a2e:	f7fa fbd5 	bl	80001dc <HAL_Delay>
 8005a32:	e7f4      	b.n	8005a1e <main+0x76>
	  usb_status = PLUGGED;
 8005a34:	4c10      	ldr	r4, [pc, #64]	; (8005a78 <main+0xd0>)
 8005a36:	2301      	movs	r3, #1
 8005a38:	70a3      	strb	r3, [r4, #2]
	  HAL_GPIO_WritePin(USB_DISCONNECT_GPIO_Port, USB_DISCONNECT_Pin,
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a40:	480f      	ldr	r0, [pc, #60]	; (8005a80 <main+0xd8>)
 8005a42:	f7fb fb4f 	bl	80010e4 <HAL_GPIO_WritePin>
	  MX_USB_DEVICE_Init();
 8005a46:	f000 fa7b 	bl	8005f40 <MX_USB_DEVICE_Init>
	  HAL_Delay(1000);
 8005a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a4e:	f7fa fbc5 	bl	80001dc <HAL_Delay>
	  usb_status = CONNECTED;
 8005a52:	2302      	movs	r3, #2
 8005a54:	70a3      	strb	r3, [r4, #2]
	  Display_DataTx(Connected, 4);
 8005a56:	2104      	movs	r1, #4
 8005a58:	480a      	ldr	r0, [pc, #40]	; (8005a84 <main+0xdc>)
 8005a5a:	f7ff fb43 	bl	80050e4 <Display_DataTx>
 8005a5e:	e7da      	b.n	8005a16 <main+0x6e>
 8005a60:	e000e100 	.word	0xe000e100
 8005a64:	200006c8 	.word	0x200006c8
 8005a68:	200002a0 	.word	0x200002a0
 8005a6c:	200007d4 	.word	0x200007d4
 8005a70:	20000794 	.word	0x20000794
 8005a74:	40010800 	.word	0x40010800
 8005a78:	20000298 	.word	0x20000298
 8005a7c:	200001d0 	.word	0x200001d0
 8005a80:	40010c00 	.word	0x40010c00
 8005a84:	200001d4 	.word	0x200001d4

08005a88 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005a88:	4770      	bx	lr
	...

08005a8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005a8c:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8005a8e:	480f      	ldr	r0, [pc, #60]	; (8005acc <MX_SPI1_Init+0x40>)
 8005a90:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <MX_SPI1_Init+0x44>)
 8005a92:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a94:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005a98:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a9e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aac:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005aae:	2220      	movs	r2, #32
 8005ab0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ab2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ab4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ab6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005ab8:	230a      	movs	r3, #10
 8005aba:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005abc:	f7fc fd6a 	bl	8002594 <HAL_SPI_Init>
 8005ac0:	b900      	cbnz	r0, 8005ac4 <MX_SPI1_Init+0x38>
  {
    Error_Handler();
  }

}
 8005ac2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005ac4:	f7ff ff2a 	bl	800591c <Error_Handler>
}
 8005ac8:	e7fb      	b.n	8005ac2 <MX_SPI1_Init+0x36>
 8005aca:	bf00      	nop
 8005acc:	2000073c 	.word	0x2000073c
 8005ad0:	40013000 	.word	0x40013000

08005ad4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9302      	str	r3, [sp, #8]
 8005adc:	9303      	str	r3, [sp, #12]
 8005ade:	9304      	str	r3, [sp, #16]
 8005ae0:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 8005ae2:	6802      	ldr	r2, [r0, #0]
 8005ae4:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <HAL_SPI_MspInit+0x6c>)
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d001      	beq.n	8005aee <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005aea:	b006      	add	sp, #24
 8005aec:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005aee:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8005af2:	699a      	ldr	r2, [r3, #24]
 8005af4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005af8:	619a      	str	r2, [r3, #24]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b00:	9200      	str	r2, [sp, #0]
 8005b02:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	f042 0204 	orr.w	r2, r2, #4
 8005b0a:	619a      	str	r2, [r3, #24]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005b16:	23a0      	movs	r3, #160	; 0xa0
 8005b18:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b22:	4c08      	ldr	r4, [pc, #32]	; (8005b44 <HAL_SPI_MspInit+0x70>)
 8005b24:	a902      	add	r1, sp, #8
 8005b26:	4620      	mov	r0, r4
 8005b28:	f7fb f93a 	bl	8000da0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005b2c:	2340      	movs	r3, #64	; 0x40
 8005b2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b30:	2300      	movs	r3, #0
 8005b32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b34:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b36:	a902      	add	r1, sp, #8
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f7fb f931 	bl	8000da0 <HAL_GPIO_Init>
}
 8005b3e:	e7d4      	b.n	8005aea <HAL_SPI_MspInit+0x16>
 8005b40:	40013000 	.word	0x40013000
 8005b44:	40010800 	.word	0x40010800

08005b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b48:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005b4a:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <HAL_MspInit+0x3c>)
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	619a      	str	r2, [r3, #24]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	f002 0201 	and.w	r2, r2, #1
 8005b5a:	9200      	str	r2, [sp, #0]
 8005b5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b64:	61da      	str	r2, [r3, #28]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005b70:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <HAL_MspInit+0x40>)
 8005b72:	6853      	ldr	r3, [r2, #4]
 8005b74:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b7e:	b002      	add	sp, #8
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40021000 	.word	0x40021000
 8005b88:	40010000 	.word	0x40010000

08005b8c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b8c:	4770      	bx	lr

08005b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b8e:	e7fe      	b.n	8005b8e <HardFault_Handler>

08005b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b90:	e7fe      	b.n	8005b90 <MemManage_Handler>

08005b92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b92:	e7fe      	b.n	8005b92 <BusFault_Handler>

08005b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b94:	e7fe      	b.n	8005b94 <UsageFault_Handler>

08005b96 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b96:	4770      	bx	lr

08005b98 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b98:	4770      	bx	lr

08005b9a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b9a:	4770      	bx	lr

08005b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b9e:	f7fa fb0b 	bl	80001b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ba2:	bd08      	pop	{r3, pc}

08005ba4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005ba4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005ba6:	4802      	ldr	r0, [pc, #8]	; (8005bb0 <DMA1_Channel1_IRQHandler+0xc>)
 8005ba8:	f7fb f858 	bl	8000c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005bac:	bd08      	pop	{r3, pc}
 8005bae:	bf00      	nop
 8005bb0:	200006f8 	.word	0x200006f8

08005bb4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005bb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005bb6:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8005bb8:	f7fb fdec 	bl	8001794 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8005bbc:	bd08      	pop	{r3, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000ad8 	.word	0x20000ad8

08005bc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005bc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005bc6:	4802      	ldr	r0, [pc, #8]	; (8005bd0 <TIM3_IRQHandler+0xc>)
 8005bc8:	f7fd f800 	bl	8002bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005bcc:	bd08      	pop	{r3, pc}
 8005bce:	bf00      	nop
 8005bd0:	200007d4 	.word	0x200007d4

08005bd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005bd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005bd6:	4802      	ldr	r0, [pc, #8]	; (8005be0 <TIM4_IRQHandler+0xc>)
 8005bd8:	f7fc fff8 	bl	8002bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005bdc:	bd08      	pop	{r3, pc}
 8005bde:	bf00      	nop
 8005be0:	20000794 	.word	0x20000794

08005be4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005be4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005be6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005bea:	f7fb fa97 	bl	800111c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005bee:	bd08      	pop	{r3, pc}

08005bf0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
// read jog encoder direction
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8005bf0:	b508      	push	{r3, lr}
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4) == 0) {
 8005bf2:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f013 0f10 	tst.w	r3, #16
 8005bfc:	d10e      	bne.n	8005c1c <HAL_TIM_IC_CaptureCallback+0x2c>
		if(usb_status == CONNECTED) {
 8005bfe:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <HAL_TIM_IC_CaptureCallback+0x50>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d004      	beq.n	8005c12 <HAL_TIM_IC_CaptureCallback+0x22>
			MIDI_DataTx(JogBack, 4);
		}
		Display_DataTx(JogBack, 4);
 8005c08:	2104      	movs	r1, #4
 8005c0a:	480e      	ldr	r0, [pc, #56]	; (8005c44 <HAL_TIM_IC_CaptureCallback+0x54>)
 8005c0c:	f7ff fa6a 	bl	80050e4 <Display_DataTx>
		if(usb_status == CONNECTED) {
			MIDI_DataTx(JogForward, 4);
		}
		Display_DataTx(JogForward, 4);
	}
}
 8005c10:	bd08      	pop	{r3, pc}
			MIDI_DataTx(JogBack, 4);
 8005c12:	2104      	movs	r1, #4
 8005c14:	480b      	ldr	r0, [pc, #44]	; (8005c44 <HAL_TIM_IC_CaptureCallback+0x54>)
 8005c16:	f000 fb7d 	bl	8006314 <MIDI_DataTx>
 8005c1a:	e7f5      	b.n	8005c08 <HAL_TIM_IC_CaptureCallback+0x18>
		if(usb_status == CONNECTED) {
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <HAL_TIM_IC_CaptureCallback+0x50>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d004      	beq.n	8005c30 <HAL_TIM_IC_CaptureCallback+0x40>
		Display_DataTx(JogForward, 4);
 8005c26:	2104      	movs	r1, #4
 8005c28:	4807      	ldr	r0, [pc, #28]	; (8005c48 <HAL_TIM_IC_CaptureCallback+0x58>)
 8005c2a:	f7ff fa5b 	bl	80050e4 <Display_DataTx>
}
 8005c2e:	e7ef      	b.n	8005c10 <HAL_TIM_IC_CaptureCallback+0x20>
			MIDI_DataTx(JogForward, 4);
 8005c30:	2104      	movs	r1, #4
 8005c32:	4805      	ldr	r0, [pc, #20]	; (8005c48 <HAL_TIM_IC_CaptureCallback+0x58>)
 8005c34:	f000 fb6e 	bl	8006314 <MIDI_DataTx>
 8005c38:	e7f5      	b.n	8005c26 <HAL_TIM_IC_CaptureCallback+0x36>
 8005c3a:	bf00      	nop
 8005c3c:	20000794 	.word	0x20000794
 8005c40:	2000029a 	.word	0x2000029a
 8005c44:	200001d8 	.word	0x200001d8
 8005c48:	200001dc 	.word	0x200001dc

08005c4c <HAL_ADC_ConvCpltCallback>:

// read and average pitch value
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005c4c:	b538      	push	{r3, r4, r5, lr}
	uint8_t i = 0;
	adc_1 = 0;
 8005c4e:	4a24      	ldr	r2, [pc, #144]	; (8005ce0 <HAL_ADC_ConvCpltCallback+0x94>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	6013      	str	r3, [r2, #0]
	adc_2 = 0;
 8005c54:	6053      	str	r3, [r2, #4]
	while(i < 200) {
 8005c56:	e00f      	b.n	8005c78 <HAL_ADC_ConvCpltCallback+0x2c>
		adc_1 += adc_data[i++];
 8005c58:	1c59      	adds	r1, r3, #1
 8005c5a:	b2c9      	uxtb	r1, r1
 8005c5c:	4c21      	ldr	r4, [pc, #132]	; (8005ce4 <HAL_ADC_ConvCpltCallback+0x98>)
 8005c5e:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8005c62:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <HAL_ADC_ConvCpltCallback+0x94>)
 8005c64:	6815      	ldr	r5, [r2, #0]
 8005c66:	4428      	add	r0, r5
 8005c68:	6010      	str	r0, [r2, #0]
		adc_2 += adc_data[i++];
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8005c72:	6850      	ldr	r0, [r2, #4]
 8005c74:	4401      	add	r1, r0
 8005c76:	6051      	str	r1, [r2, #4]
	while(i < 200) {
 8005c78:	2bc7      	cmp	r3, #199	; 0xc7
 8005c7a:	d9ed      	bls.n	8005c58 <HAL_ADC_ConvCpltCallback+0xc>
	}
	adc_1 /= 100;
 8005c7c:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <HAL_ADC_ConvCpltCallback+0x94>)
 8005c7e:	6813      	ldr	r3, [r2, #0]
 8005c80:	4919      	ldr	r1, [pc, #100]	; (8005ce8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8005c82:	fba1 0303 	umull	r0, r3, r1, r3
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	6013      	str	r3, [r2, #0]
	adc_2 /= 100;
 8005c8a:	6853      	ldr	r3, [r2, #4]
 8005c8c:	fba1 1303 	umull	r1, r3, r1, r3
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	6053      	str	r3, [r2, #4]
	pitch = 0x2000 * adc_1 / adc_2;
 8005c94:	6813      	ldr	r3, [r2, #0]
 8005c96:	035b      	lsls	r3, r3, #13
 8005c98:	6851      	ldr	r1, [r2, #4]
 8005c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	8113      	strh	r3, [r2, #8]
	if(abs(pitch - pitch_prev) > 16) {
 8005ca2:	8952      	ldrh	r2, [r2, #10]
 8005ca4:	1a9a      	subs	r2, r3, r2
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	bfb8      	it	lt
 8005caa:	4252      	neglt	r2, r2
 8005cac:	2a10      	cmp	r2, #16
 8005cae:	dd11      	ble.n	8005cd4 <HAL_ADC_ConvCpltCallback+0x88>
		Pitch[2] = pitch % 128;
 8005cb0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	; (8005cec <HAL_ADC_ConvCpltCallback+0xa0>)
 8005cb6:	7091      	strb	r1, [r2, #2]
		Pitch[3] = pitch / 128;
 8005cb8:	09db      	lsrs	r3, r3, #7
 8005cba:	70d3      	strb	r3, [r2, #3]
		if(usb_status == CONNECTED) {
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d007      	beq.n	8005cd6 <HAL_ADC_ConvCpltCallback+0x8a>
			MIDI_DataTx(Pitch, 4);
		}
		Display_DataTx(Pitch, 4);
 8005cc6:	2104      	movs	r1, #4
 8005cc8:	4808      	ldr	r0, [pc, #32]	; (8005cec <HAL_ADC_ConvCpltCallback+0xa0>)
 8005cca:	f7ff fa0b 	bl	80050e4 <Display_DataTx>
		pitch_prev = pitch;
 8005cce:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <HAL_ADC_ConvCpltCallback+0x94>)
 8005cd0:	891a      	ldrh	r2, [r3, #8]
 8005cd2:	815a      	strh	r2, [r3, #10]
	}
}
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
			MIDI_DataTx(Pitch, 4);
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	4610      	mov	r0, r2
 8005cda:	f000 fb1b 	bl	8006314 <MIDI_DataTx>
 8005cde:	e7f2      	b.n	8005cc6 <HAL_ADC_ConvCpltCallback+0x7a>
 8005ce0:	20000430 	.word	0x20000430
 8005ce4:	200002a0 	.word	0x200002a0
 8005ce8:	51eb851f 	.word	0x51eb851f
 8005cec:	200001cc 	.word	0x200001cc
 8005cf0:	2000029a 	.word	0x2000029a

08005cf4 <HAL_GPIO_EXTI_Callback>:

// USB cable plugged/unplugged interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if(GPIO_Pin == USB_VBUS_Pin) {
 8005cf4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005cf8:	d000      	beq.n	8005cfc <HAL_GPIO_EXTI_Callback+0x8>
 8005cfa:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005cfc:	b510      	push	{r4, lr}
		if(HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin) == GPIO_PIN_SET) {
 8005cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d02:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005d06:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
 8005d0a:	f7fb f9d7 	bl	80010bc <HAL_GPIO_ReadPin>
 8005d0e:	2801      	cmp	r0, #1
 8005d10:	d012      	beq.n	8005d38 <HAL_GPIO_EXTI_Callback+0x44>
			MX_USB_DEVICE_Init();
			usb_status = CONNECTED;
			Display_DataTx(Connected, 4);
		}
		else {
			usb_status = UNPLUGGED;
 8005d12:	4c12      	ldr	r4, [pc, #72]	; (8005d5c <HAL_GPIO_EXTI_Callback+0x68>)
 8005d14:	2303      	movs	r3, #3
 8005d16:	7023      	strb	r3, [r4, #0]
			HAL_GPIO_WritePin(USB_DISCONNECT_GPIO_Port, USB_DISCONNECT_Pin,
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d1e:	4810      	ldr	r0, [pc, #64]	; (8005d60 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005d20:	f7fb f9e0 	bl	80010e4 <HAL_GPIO_WritePin>
					  GPIO_PIN_SET);
			USBD_Stop(&hUsbDeviceFS);
 8005d24:	480f      	ldr	r0, [pc, #60]	; (8005d64 <HAL_GPIO_EXTI_Callback+0x70>)
 8005d26:	f7fe fbb7 	bl	8004498 <USBD_Stop>
			usb_status = DISCONNECTED;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	7023      	strb	r3, [r4, #0]
			Display_DataTx(Disconnected, 4);
 8005d2e:	2104      	movs	r1, #4
 8005d30:	480d      	ldr	r0, [pc, #52]	; (8005d68 <HAL_GPIO_EXTI_Callback+0x74>)
 8005d32:	f7ff f9d7 	bl	80050e4 <Display_DataTx>
		}
	}
}
 8005d36:	bd10      	pop	{r4, pc}
			usb_status = PLUGGED;
 8005d38:	4c08      	ldr	r4, [pc, #32]	; (8005d5c <HAL_GPIO_EXTI_Callback+0x68>)
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	7023      	strb	r3, [r4, #0]
			HAL_GPIO_WritePin(USB_DISCONNECT_GPIO_Port, USB_DISCONNECT_Pin,
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d44:	4806      	ldr	r0, [pc, #24]	; (8005d60 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005d46:	f7fb f9cd 	bl	80010e4 <HAL_GPIO_WritePin>
			MX_USB_DEVICE_Init();
 8005d4a:	f000 f8f9 	bl	8005f40 <MX_USB_DEVICE_Init>
			usb_status = CONNECTED;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	7023      	strb	r3, [r4, #0]
			Display_DataTx(Connected, 4);
 8005d52:	2104      	movs	r1, #4
 8005d54:	4805      	ldr	r0, [pc, #20]	; (8005d6c <HAL_GPIO_EXTI_Callback+0x78>)
 8005d56:	f7ff f9c5 	bl	80050e4 <Display_DataTx>
 8005d5a:	e7ec      	b.n	8005d36 <HAL_GPIO_EXTI_Callback+0x42>
 8005d5c:	2000029a 	.word	0x2000029a
 8005d60:	40010c00 	.word	0x40010c00
 8005d64:	20000814 	.word	0x20000814
 8005d68:	200001d0 	.word	0x200001d0
 8005d6c:	200001d4 	.word	0x200001d4

08005d70 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <SystemInit+0x40>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	f042 0201 	orr.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005d7a:	6859      	ldr	r1, [r3, #4]
 8005d7c:	4a0d      	ldr	r2, [pc, #52]	; (8005db4 <SystemInit+0x44>)
 8005d7e:	400a      	ands	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005d88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d8c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d94:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005d9c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005d9e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005da2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <SystemInit+0x48>)
 8005da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005daa:	609a      	str	r2, [r3, #8]
#endif 
}
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40021000 	.word	0x40021000
 8005db4:	f8ff0000 	.word	0xf8ff0000
 8005db8:	e000ed00 	.word	0xe000ed00

08005dbc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005dbc:	b500      	push	{lr}
 8005dbe:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	9302      	str	r3, [sp, #8]
 8005dc4:	9303      	str	r3, [sp, #12]
 8005dc6:	9304      	str	r3, [sp, #16]
 8005dc8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	9301      	str	r3, [sp, #4]

  htim3.Instance = TIM3;
 8005dce:	4815      	ldr	r0, [pc, #84]	; (8005e24 <MX_TIM3_Init+0x68>)
 8005dd0:	4a15      	ldr	r2, [pc, #84]	; (8005e28 <MX_TIM3_Init+0x6c>)
 8005dd2:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 47;
 8005dd4:	222f      	movs	r2, #47	; 0x2f
 8005dd6:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dd8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 199;
 8005dda:	22c7      	movs	r2, #199	; 0xc7
 8005ddc:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dde:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005de0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005de2:	f7fc ffeb 	bl	8002dbc <HAL_TIM_Base_Init>
 8005de6:	b9a0      	cbnz	r0, 8005e12 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005de8:	a906      	add	r1, sp, #24
 8005dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dee:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005df2:	480c      	ldr	r0, [pc, #48]	; (8005e24 <MX_TIM3_Init+0x68>)
 8005df4:	f7fd f94c 	bl	8003090 <HAL_TIM_ConfigClockSource>
 8005df8:	b970      	cbnz	r0, 8005e18 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e02:	4669      	mov	r1, sp
 8005e04:	4807      	ldr	r0, [pc, #28]	; (8005e24 <MX_TIM3_Init+0x68>)
 8005e06:	f7fd fb91 	bl	800352c <HAL_TIMEx_MasterConfigSynchronization>
 8005e0a:	b940      	cbnz	r0, 8005e1e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
  }

}
 8005e0c:	b007      	add	sp, #28
 8005e0e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005e12:	f7ff fd83 	bl	800591c <Error_Handler>
 8005e16:	e7e7      	b.n	8005de8 <MX_TIM3_Init+0x2c>
    Error_Handler();
 8005e18:	f7ff fd80 	bl	800591c <Error_Handler>
 8005e1c:	e7ed      	b.n	8005dfa <MX_TIM3_Init+0x3e>
    Error_Handler();
 8005e1e:	f7ff fd7d 	bl	800591c <Error_Handler>
}
 8005e22:	e7f3      	b.n	8005e0c <MX_TIM3_Init+0x50>
 8005e24:	200007d4 	.word	0x200007d4
 8005e28:	40000400 	.word	0x40000400

08005e2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005e2c:	b500      	push	{lr}
 8005e2e:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e30:	2300      	movs	r3, #0
 8005e32:	9306      	str	r3, [sp, #24]
 8005e34:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	9302      	str	r3, [sp, #8]

  htim4.Instance = TIM4;
 8005e3a:	4814      	ldr	r0, [pc, #80]	; (8005e8c <MX_TIM4_Init+0x60>)
 8005e3c:	4a14      	ldr	r2, [pc, #80]	; (8005e90 <MX_TIM4_Init+0x64>)
 8005e3e:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8005e40:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e42:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 119;
 8005e44:	2277      	movs	r2, #119	; 0x77
 8005e46:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e48:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e4a:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005e50:	2102      	movs	r1, #2
 8005e52:	9104      	str	r1, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e54:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0xf;
 8005e56:	220f      	movs	r2, #15
 8005e58:	9207      	str	r2, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005e5a:	9108      	str	r1, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005e5c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0xf;
 8005e5e:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005e60:	a903      	add	r1, sp, #12
 8005e62:	f7fd f807 	bl	8002e74 <HAL_TIM_Encoder_Init>
 8005e66:	b950      	cbnz	r0, 8005e7e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e6c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005e6e:	a901      	add	r1, sp, #4
 8005e70:	4806      	ldr	r0, [pc, #24]	; (8005e8c <MX_TIM4_Init+0x60>)
 8005e72:	f7fd fb5b 	bl	800352c <HAL_TIMEx_MasterConfigSynchronization>
 8005e76:	b928      	cbnz	r0, 8005e84 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
  }

}
 8005e78:	b00d      	add	sp, #52	; 0x34
 8005e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005e7e:	f7ff fd4d 	bl	800591c <Error_Handler>
 8005e82:	e7f1      	b.n	8005e68 <MX_TIM4_Init+0x3c>
    Error_Handler();
 8005e84:	f7ff fd4a 	bl	800591c <Error_Handler>
}
 8005e88:	e7f6      	b.n	8005e78 <MX_TIM4_Init+0x4c>
 8005e8a:	bf00      	nop
 8005e8c:	20000794 	.word	0x20000794
 8005e90:	40000800 	.word	0x40000800

08005e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8005e94:	6802      	ldr	r2, [r0, #0]
 8005e96:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d000      	beq.n	8005e9e <HAL_TIM_Base_MspInit+0xa>
 8005e9c:	4770      	bx	lr
{
 8005e9e:	b500      	push	{lr}
 8005ea0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005ea2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	f042 0202 	orr.w	r2, r2, #2
 8005eac:	61da      	str	r2, [r3, #28]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	9b01      	ldr	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2101      	movs	r1, #1
 8005ebc:	201d      	movs	r0, #29
 8005ebe:	f7fa fd4d 	bl	800095c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005ec2:	201d      	movs	r0, #29
 8005ec4:	f7fa fd90 	bl	80009e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005ec8:	b003      	add	sp, #12
 8005eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ece:	bf00      	nop
 8005ed0:	40000400 	.word	0x40000400

08005ed4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005ed4:	b500      	push	{lr}
 8005ed6:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9302      	str	r3, [sp, #8]
 8005edc:	9303      	str	r3, [sp, #12]
 8005ede:	9304      	str	r3, [sp, #16]
 8005ee0:	9305      	str	r3, [sp, #20]
  if(tim_encoderHandle->Instance==TIM4)
 8005ee2:	6802      	ldr	r2, [r0, #0]
 8005ee4:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <HAL_TIM_Encoder_MspInit+0x64>)
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d002      	beq.n	8005ef0 <HAL_TIM_Encoder_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005eea:	b007      	add	sp, #28
 8005eec:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ef0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005ef4:	69da      	ldr	r2, [r3, #28]
 8005ef6:	f042 0204 	orr.w	r2, r2, #4
 8005efa:	61da      	str	r2, [r3, #28]
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	f002 0204 	and.w	r2, r2, #4
 8005f02:	9200      	str	r2, [sp, #0]
 8005f04:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	f042 0208 	orr.w	r2, r2, #8
 8005f0c:	619a      	str	r2, [r3, #24]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = JOG1_Pin|JOG2_Pin;
 8005f18:	a906      	add	r1, sp, #24
 8005f1a:	23c0      	movs	r3, #192	; 0xc0
 8005f1c:	f841 3d10 	str.w	r3, [r1, #-16]!
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f20:	4806      	ldr	r0, [pc, #24]	; (8005f3c <HAL_TIM_Encoder_MspInit+0x68>)
 8005f22:	f7fa ff3d 	bl	8000da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8005f26:	2200      	movs	r2, #0
 8005f28:	2101      	movs	r1, #1
 8005f2a:	201e      	movs	r0, #30
 8005f2c:	f7fa fd16 	bl	800095c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005f30:	201e      	movs	r0, #30
 8005f32:	f7fa fd59 	bl	80009e8 <HAL_NVIC_EnableIRQ>
}
 8005f36:	e7d8      	b.n	8005eea <HAL_TIM_Encoder_MspInit+0x16>
 8005f38:	40000800 	.word	0x40000800
 8005f3c:	40010c00 	.word	0x40010c00

08005f40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f42:	2200      	movs	r2, #0
 8005f44:	4915      	ldr	r1, [pc, #84]	; (8005f9c <MX_USB_DEVICE_Init+0x5c>)
 8005f46:	4816      	ldr	r0, [pc, #88]	; (8005fa0 <MX_USB_DEVICE_Init+0x60>)
 8005f48:	f7fe fa83 	bl	8004452 <USBD_Init>
 8005f4c:	b9d0      	cbnz	r0, 8005f84 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8005f4e:	4915      	ldr	r1, [pc, #84]	; (8005fa4 <MX_USB_DEVICE_Init+0x64>)
 8005f50:	4813      	ldr	r0, [pc, #76]	; (8005fa0 <MX_USB_DEVICE_Init+0x60>)
 8005f52:	f7fe fa95 	bl	8004480 <USBD_RegisterClass>
 8005f56:	b9c0      	cbnz	r0, 8005f8a <MX_USB_DEVICE_Init+0x4a>
  {
    Error_Handler();
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8005f58:	4913      	ldr	r1, [pc, #76]	; (8005fa8 <MX_USB_DEVICE_Init+0x68>)
 8005f5a:	4811      	ldr	r0, [pc, #68]	; (8005fa0 <MX_USB_DEVICE_Init+0x60>)
 8005f5c:	f7fe f9c2 	bl	80042e4 <USBD_AUDIO_RegisterInterface>
 8005f60:	b9b0      	cbnz	r0, 8005f90 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f62:	480f      	ldr	r0, [pc, #60]	; (8005fa0 <MX_USB_DEVICE_Init+0x60>)
 8005f64:	f7fe fa93 	bl	800448e <USBD_Start>
 8005f68:	b9a8      	cbnz	r0, 8005f96 <MX_USB_DEVICE_Init+0x56>
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8005f6a:	4c0d      	ldr	r4, [pc, #52]	; (8005fa0 <MX_USB_DEVICE_Init+0x60>)
 8005f6c:	490f      	ldr	r1, [pc, #60]	; (8005fac <MX_USB_DEVICE_Init+0x6c>)
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7fe fa86 	bl	8004480 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005f74:	490e      	ldr	r1, [pc, #56]	; (8005fb0 <MX_USB_DEVICE_Init+0x70>)
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7fe fa64 	bl	8004444 <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f7fe fa86 	bl	800448e <USBD_Start>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f82:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005f84:	f7ff fcca 	bl	800591c <Error_Handler>
 8005f88:	e7e1      	b.n	8005f4e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8005f8a:	f7ff fcc7 	bl	800591c <Error_Handler>
 8005f8e:	e7e3      	b.n	8005f58 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8005f90:	f7ff fcc4 	bl	800591c <Error_Handler>
 8005f94:	e7e5      	b.n	8005f62 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005f96:	f7ff fcc1 	bl	800591c <Error_Handler>
 8005f9a:	e7e6      	b.n	8005f6a <MX_USB_DEVICE_Init+0x2a>
 8005f9c:	20000234 	.word	0x20000234
 8005fa0:	20000814 	.word	0x20000814
 8005fa4:	20000084 	.word	0x20000084
 8005fa8:	200001e4 	.word	0x200001e4
 8005fac:	20000124 	.word	0x20000124
 8005fb0:	20000250 	.word	0x20000250

08005fb4 <AUDIO_Init_FS>:
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	4770      	bx	lr

08005fb8 <AUDIO_DeInit_FS>:
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
  /* USER CODE END 1 */
}
 8005fb8:	2000      	movs	r0, #0
 8005fba:	4770      	bx	lr

08005fbc <AUDIO_AudioCmd_FS>:
    case AUDIO_CMD_PLAY:
    break;	
  }
  return (USBD_OK);
  /* USER CODE END 2 */
}
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	4770      	bx	lr

08005fc0 <AUDIO_VolumeCtl_FS>:
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
  /* USER CODE END 3 */
}
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	4770      	bx	lr

08005fc4 <AUDIO_MuteCtl_FS>:
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	4770      	bx	lr

08005fc8 <AUDIO_PeriodicTC_FS>:
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005fc8:	2000      	movs	r0, #0
 8005fca:	4770      	bx	lr

08005fcc <AUDIO_GetState_FS>:
static int8_t AUDIO_GetState_FS(void)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005fcc:	2000      	movs	r0, #0
 8005fce:	4770      	bx	lr

08005fd0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005fd0:	b118      	cbz	r0, 8005fda <USBD_Get_USB_Status+0xa>
 8005fd2:	2802      	cmp	r0, #2
 8005fd4:	d003      	beq.n	8005fde <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005fd6:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005fd8:	4770      	bx	lr
      usb_status = USBD_OK;
 8005fda:	2000      	movs	r0, #0
 8005fdc:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8005fde:	2001      	movs	r0, #1
    break;
 8005fe0:	4770      	bx	lr
	...

08005fe4 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8005fe4:	6802      	ldr	r2, [r0, #0]
 8005fe6:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <HAL_PCD_MspInit+0x3c>)
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d000      	beq.n	8005fee <HAL_PCD_MspInit+0xa>
 8005fec:	4770      	bx	lr
{
 8005fee:	b500      	push	{lr}
 8005ff0:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8005ff2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005ffc:	61da      	str	r2, [r3, #28]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006008:	2200      	movs	r2, #0
 800600a:	4611      	mov	r1, r2
 800600c:	2014      	movs	r0, #20
 800600e:	f7fa fca5 	bl	800095c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006012:	2014      	movs	r0, #20
 8006014:	f7fa fce8 	bl	80009e8 <HAL_NVIC_EnableIRQ>
}
 8006018:	b003      	add	sp, #12
 800601a:	f85d fb04 	ldr.w	pc, [sp], #4
 800601e:	bf00      	nop
 8006020:	40005c00 	.word	0x40005c00

08006024 <HAL_PCD_SetupStageCallback>:
{
 8006024:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006026:	f500 710c 	add.w	r1, r0, #560	; 0x230
 800602a:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800602e:	f7fe fa53 	bl	80044d8 <USBD_LL_SetupStage>
}
 8006032:	bd08      	pop	{r3, pc}

08006034 <HAL_PCD_DataOutStageCallback>:
{
 8006034:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006036:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800603a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800603e:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006042:	f7fe fa76 	bl	8004532 <USBD_LL_DataOutStage>
}
 8006046:	bd08      	pop	{r3, pc}

08006048 <HAL_PCD_DataInStageCallback>:
{
 8006048:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800604a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800604e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006050:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006054:	f7fe fab6 	bl	80045c4 <USBD_LL_DataInStage>
}
 8006058:	bd08      	pop	{r3, pc}

0800605a <HAL_PCD_SOFCallback>:
{
 800605a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800605c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006060:	f7fe fb58 	bl	8004714 <USBD_LL_SOF>
}
 8006064:	bd08      	pop	{r3, pc}

08006066 <HAL_PCD_ResetCallback>:
{ 
 8006066:	b510      	push	{r4, lr}
 8006068:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800606a:	6883      	ldr	r3, [r0, #8]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d001      	beq.n	8006074 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8006070:	f7ff fc54 	bl	800591c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006074:	2101      	movs	r1, #1
 8006076:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 800607a:	f7fe fb34 	bl	80046e6 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800607e:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8006082:	f7fe fb08 	bl	8004696 <USBD_LL_Reset>
}
 8006086:	bd10      	pop	{r4, pc}

08006088 <HAL_PCD_SuspendCallback>:
{
 8006088:	b510      	push	{r4, lr}
 800608a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800608c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006090:	f7fe fb2c 	bl	80046ec <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8006094:	69a3      	ldr	r3, [r4, #24]
 8006096:	b123      	cbz	r3, 80060a2 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006098:	4a02      	ldr	r2, [pc, #8]	; (80060a4 <HAL_PCD_SuspendCallback+0x1c>)
 800609a:	6913      	ldr	r3, [r2, #16]
 800609c:	f043 0306 	orr.w	r3, r3, #6
 80060a0:	6113      	str	r3, [r2, #16]
}
 80060a2:	bd10      	pop	{r4, pc}
 80060a4:	e000ed00 	.word	0xe000ed00

080060a8 <HAL_PCD_ResumeCallback>:
{
 80060a8:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80060aa:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80060ae:	f7fe fb26 	bl	80046fe <USBD_LL_Resume>
}
 80060b2:	bd08      	pop	{r3, pc}

080060b4 <USBD_LL_Init>:
{
 80060b4:	b510      	push	{r4, lr}
 80060b6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80060b8:	4819      	ldr	r0, [pc, #100]	; (8006120 <USBD_LL_Init+0x6c>)
 80060ba:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80060be:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 80060c2:	4b18      	ldr	r3, [pc, #96]	; (8006124 <USBD_LL_Init+0x70>)
 80060c4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80060c6:	2308      	movs	r3, #8
 80060c8:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80060ca:	2302      	movs	r3, #2
 80060cc:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80060d2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80060d4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80060d6:	f7fb f82f 	bl	8001138 <HAL_PCD_Init>
 80060da:	b9f0      	cbnz	r0, 800611a <USBD_LL_Init+0x66>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80060dc:	2318      	movs	r3, #24
 80060de:	2200      	movs	r2, #0
 80060e0:	4611      	mov	r1, r2
 80060e2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80060e6:	f7fb fc7c 	bl	80019e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80060ea:	2358      	movs	r3, #88	; 0x58
 80060ec:	2200      	movs	r2, #0
 80060ee:	2180      	movs	r1, #128	; 0x80
 80060f0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80060f4:	f7fb fc75 	bl	80019e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, MIDI_IN_EP, PCD_SNG_BUF, 0xC0);
 80060f8:	23c0      	movs	r3, #192	; 0xc0
 80060fa:	2200      	movs	r2, #0
 80060fc:	2181      	movs	r1, #129	; 0x81
 80060fe:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006102:	f7fb fc6e 	bl	80019e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, MIDI_OUT_EP, PCD_SNG_BUF, 0x110);
 8006106:	f44f 7388 	mov.w	r3, #272	; 0x110
 800610a:	2200      	movs	r2, #0
 800610c:	2101      	movs	r1, #1
 800610e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006112:	f7fb fc66 	bl	80019e2 <HAL_PCDEx_PMAConfig>
}
 8006116:	2000      	movs	r0, #0
 8006118:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800611a:	f7ff fbff 	bl	800591c <Error_Handler>
 800611e:	e7dd      	b.n	80060dc <USBD_LL_Init+0x28>
 8006120:	20000ad8 	.word	0x20000ad8
 8006124:	40005c00 	.word	0x40005c00

08006128 <USBD_LL_Start>:
{
 8006128:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800612a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800612e:	f7fb f88b 	bl	8001248 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006132:	f7ff ff4d 	bl	8005fd0 <USBD_Get_USB_Status>
}
 8006136:	bd08      	pop	{r3, pc}

08006138 <USBD_LL_Stop>:
{
 8006138:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 800613a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800613e:	f7fb f89a 	bl	8001276 <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006142:	f7ff ff45 	bl	8005fd0 <USBD_Get_USB_Status>
}
 8006146:	bd08      	pop	{r3, pc}

08006148 <USBD_LL_OpenEP>:
{
 8006148:	b510      	push	{r4, lr}
 800614a:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800614c:	4613      	mov	r3, r2
 800614e:	4622      	mov	r2, r4
 8006150:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006154:	f7fb f8c3 	bl	80012de <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006158:	f7ff ff3a 	bl	8005fd0 <USBD_Get_USB_Status>
}
 800615c:	bd10      	pop	{r4, pc}

0800615e <USBD_LL_CloseEP>:
{
 800615e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006160:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006164:	f7fb f8f3 	bl	800134e <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006168:	f7ff ff32 	bl	8005fd0 <USBD_Get_USB_Status>
}
 800616c:	bd08      	pop	{r3, pc}

0800616e <USBD_LL_StallEP>:
{
 800616e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006170:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006174:	f7fb fbc7 	bl	8001906 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006178:	f7ff ff2a 	bl	8005fd0 <USBD_Get_USB_Status>
}
 800617c:	bd08      	pop	{r3, pc}

0800617e <USBD_LL_ClearStallEP>:
{
 800617e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006180:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006184:	f7fb fbf6 	bl	8001974 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006188:	f7ff ff22 	bl	8005fd0 <USBD_Get_USB_Status>
}
 800618c:	bd08      	pop	{r3, pc}

0800618e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800618e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8006192:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006196:	d106      	bne.n	80061a6 <USBD_LL_IsStallEP+0x18>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006198:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800619c:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80061a0:	f891 012a 	ldrb.w	r0, [r1, #298]	; 0x12a
}
 80061a4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80061a6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80061aa:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80061ae:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 80061b2:	4770      	bx	lr

080061b4 <USBD_LL_SetUSBAddress>:
{
 80061b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80061b6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80061ba:	f7fb f87c 	bl	80012b6 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061be:	f7ff ff07 	bl	8005fd0 <USBD_Get_USB_Status>
}
 80061c2:	bd08      	pop	{r3, pc}

080061c4 <USBD_LL_Transmit>:
{
 80061c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80061c6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80061ca:	f7fb f90d 	bl	80013e8 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061ce:	f7ff feff 	bl	8005fd0 <USBD_Get_USB_Status>
}
 80061d2:	bd08      	pop	{r3, pc}

080061d4 <USBD_LL_PrepareReceive>:
{
 80061d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80061d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80061da:	f7fb f8e6 	bl	80013aa <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061de:	f7ff fef7 	bl	8005fd0 <USBD_Get_USB_Status>
}
 80061e2:	bd08      	pop	{r3, pc}

080061e4 <USBD_static_malloc>:
}
 80061e4:	4800      	ldr	r0, [pc, #0]	; (80061e8 <USBD_static_malloc+0x4>)
 80061e6:	4770      	bx	lr
 80061e8:	20000444 	.word	0x20000444

080061ec <USBD_static_free>:
}
 80061ec:	4770      	bx	lr

080061ee <HAL_PCDEx_SetConnectionState>:
}
 80061ee:	4770      	bx	lr

080061f0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80061f0:	2312      	movs	r3, #18
 80061f2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80061f4:	4800      	ldr	r0, [pc, #0]	; (80061f8 <USBD_FS_DeviceDescriptor+0x8>)
 80061f6:	4770      	bx	lr
 80061f8:	20000200 	.word	0x20000200

080061fc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80061fc:	2304      	movs	r3, #4
 80061fe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006200:	4800      	ldr	r0, [pc, #0]	; (8006204 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006202:	4770      	bx	lr
 8006204:	20000214 	.word	0x20000214

08006208 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8006208:	2300      	movs	r3, #0
 800620a:	4293      	cmp	r3, r2
 800620c:	d216      	bcs.n	800623c <IntToUnicode+0x34>
{
 800620e:	b430      	push	{r4, r5}
 8006210:	e00b      	b.n	800622a <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006212:	3437      	adds	r4, #55	; 0x37
 8006214:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8006218:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800621a:	005c      	lsls	r4, r3, #1
 800621c:	3401      	adds	r4, #1
 800621e:	2500      	movs	r5, #0
 8006220:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8006222:	3301      	adds	r3, #1
 8006224:	b2db      	uxtb	r3, r3
 8006226:	4293      	cmp	r3, r2
 8006228:	d206      	bcs.n	8006238 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 800622a:	0f04      	lsrs	r4, r0, #28
 800622c:	2c09      	cmp	r4, #9
 800622e:	d8f0      	bhi.n	8006212 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006230:	3430      	adds	r4, #48	; 0x30
 8006232:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8006236:	e7ef      	b.n	8006218 <IntToUnicode+0x10>
  }
}
 8006238:	bc30      	pop	{r4, r5}
 800623a:	4770      	bx	lr
 800623c:	4770      	bx	lr
	...

08006240 <Get_SerialNum>:
{
 8006240:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006242:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <Get_SerialNum+0x30>)
 8006244:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006246:	3304      	adds	r3, #4
 8006248:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800624a:	3304      	adds	r3, #4
 800624c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800624e:	18c0      	adds	r0, r0, r3
 8006250:	d100      	bne.n	8006254 <Get_SerialNum+0x14>
}
 8006252:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006254:	4d07      	ldr	r5, [pc, #28]	; (8006274 <Get_SerialNum+0x34>)
 8006256:	2208      	movs	r2, #8
 8006258:	f105 011a 	add.w	r1, r5, #26
 800625c:	f7ff ffd4 	bl	8006208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006260:	2204      	movs	r2, #4
 8006262:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8006266:	4620      	mov	r0, r4
 8006268:	f7ff ffce 	bl	8006208 <IntToUnicode>
}
 800626c:	e7f1      	b.n	8006252 <Get_SerialNum+0x12>
 800626e:	bf00      	nop
 8006270:	1ffff7e8 	.word	0x1ffff7e8
 8006274:	20000200 	.word	0x20000200

08006278 <USBD_FS_SerialStrDescriptor>:
{
 8006278:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800627a:	231a      	movs	r3, #26
 800627c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800627e:	f7ff ffdf 	bl	8006240 <Get_SerialNum>
}
 8006282:	4801      	ldr	r0, [pc, #4]	; (8006288 <USBD_FS_SerialStrDescriptor+0x10>)
 8006284:	bd08      	pop	{r3, pc}
 8006286:	bf00      	nop
 8006288:	20000218 	.word	0x20000218

0800628c <USBD_FS_ProductStrDescriptor>:
{
 800628c:	b508      	push	{r3, lr}
 800628e:	460a      	mov	r2, r1
  if(speed == 0)
 8006290:	b128      	cbz	r0, 800629e <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006292:	4905      	ldr	r1, [pc, #20]	; (80062a8 <USBD_FS_ProductStrDescriptor+0x1c>)
 8006294:	4805      	ldr	r0, [pc, #20]	; (80062ac <USBD_FS_ProductStrDescriptor+0x20>)
 8006296:	f7fe fd77 	bl	8004d88 <USBD_GetString>
}
 800629a:	4803      	ldr	r0, [pc, #12]	; (80062a8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800629c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800629e:	4902      	ldr	r1, [pc, #8]	; (80062a8 <USBD_FS_ProductStrDescriptor+0x1c>)
 80062a0:	4802      	ldr	r0, [pc, #8]	; (80062ac <USBD_FS_ProductStrDescriptor+0x20>)
 80062a2:	f7fe fd71 	bl	8004d88 <USBD_GetString>
 80062a6:	e7f8      	b.n	800629a <USBD_FS_ProductStrDescriptor+0xe>
 80062a8:	20000d44 	.word	0x20000d44
 80062ac:	080067d0 	.word	0x080067d0

080062b0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80062b0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80062b2:	4c04      	ldr	r4, [pc, #16]	; (80062c4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80062b4:	460a      	mov	r2, r1
 80062b6:	4621      	mov	r1, r4
 80062b8:	4803      	ldr	r0, [pc, #12]	; (80062c8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80062ba:	f7fe fd65 	bl	8004d88 <USBD_GetString>
}
 80062be:	4620      	mov	r0, r4
 80062c0:	bd10      	pop	{r4, pc}
 80062c2:	bf00      	nop
 80062c4:	20000d44 	.word	0x20000d44
 80062c8:	080067e4 	.word	0x080067e4

080062cc <USBD_FS_ConfigStrDescriptor>:
{
 80062cc:	b508      	push	{r3, lr}
 80062ce:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80062d0:	b128      	cbz	r0, 80062de <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062d2:	4905      	ldr	r1, [pc, #20]	; (80062e8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80062d4:	4805      	ldr	r0, [pc, #20]	; (80062ec <USBD_FS_ConfigStrDescriptor+0x20>)
 80062d6:	f7fe fd57 	bl	8004d88 <USBD_GetString>
}
 80062da:	4803      	ldr	r0, [pc, #12]	; (80062e8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80062dc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062de:	4902      	ldr	r1, [pc, #8]	; (80062e8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80062e0:	4802      	ldr	r0, [pc, #8]	; (80062ec <USBD_FS_ConfigStrDescriptor+0x20>)
 80062e2:	f7fe fd51 	bl	8004d88 <USBD_GetString>
 80062e6:	e7f8      	b.n	80062da <USBD_FS_ConfigStrDescriptor+0xe>
 80062e8:	20000d44 	.word	0x20000d44
 80062ec:	080067f8 	.word	0x080067f8

080062f0 <USBD_FS_InterfaceStrDescriptor>:
{
 80062f0:	b508      	push	{r3, lr}
 80062f2:	460a      	mov	r2, r1
  if(speed == 0)
 80062f4:	b128      	cbz	r0, 8006302 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80062f6:	4905      	ldr	r1, [pc, #20]	; (800630c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80062f8:	4805      	ldr	r0, [pc, #20]	; (8006310 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80062fa:	f7fe fd45 	bl	8004d88 <USBD_GetString>
}
 80062fe:	4803      	ldr	r0, [pc, #12]	; (800630c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006300:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006302:	4902      	ldr	r1, [pc, #8]	; (800630c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006304:	4802      	ldr	r0, [pc, #8]	; (8006310 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8006306:	f7fe fd3f 	bl	8004d88 <USBD_GetString>
 800630a:	e7f8      	b.n	80062fe <USBD_FS_InterfaceStrDescriptor+0xe>
 800630c:	20000d44 	.word	0x20000d44
 8006310:	08006808 	.word	0x08006808

08006314 <MIDI_DataTx>:
}

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
	uint8_t result = USBD_OK;
	if(USB_Tx_State != 0) {
 8006314:	4b0d      	ldr	r3, [pc, #52]	; (800634c <MIDI_DataTx+0x38>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b9ab      	cbnz	r3, 8006346 <MIDI_DataTx+0x32>
{
 800631a:	b570      	push	{r4, r5, r6, lr}
		return USBD_BUSY;
	}
	uint32_t i = 0;
 800631c:	2200      	movs	r2, #0
	while(i < length) {
 800631e:	4291      	cmp	r1, r2
 8006320:	d90d      	bls.n	800633e <MIDI_DataTx+0x2a>
		APP_Tx_Buffer[APP_Tx_ptr_in] = *(msg + i);
 8006322:	4c0b      	ldr	r4, [pc, #44]	; (8006350 <MIDI_DataTx+0x3c>)
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	5c86      	ldrb	r6, [r0, r2]
 8006328:	4d0a      	ldr	r5, [pc, #40]	; (8006354 <MIDI_DataTx+0x40>)
 800632a:	54ee      	strb	r6, [r5, r3]
		APP_Tx_ptr_in++;
 800632c:	3301      	adds	r3, #1
 800632e:	6023      	str	r3, [r4, #0]
		i++;
 8006330:	3201      	adds	r2, #1
		if(APP_Tx_ptr_in == APP_TX_DATA_SIZE) {
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d1f3      	bne.n	800631e <MIDI_DataTx+0xa>
			APP_Tx_ptr_in = 0;
 8006336:	4623      	mov	r3, r4
 8006338:	2400      	movs	r4, #0
 800633a:	601c      	str	r4, [r3, #0]
 800633c:	e7ef      	b.n	800631e <MIDI_DataTx+0xa>
		}
	}
	result = USBD_MIDI_SendPacket();
 800633e:	f7fe f841 	bl	80043c4 <USBD_MIDI_SendPacket>
	return result;
 8006342:	b280      	uxth	r0, r0
}
 8006344:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_BUSY;
 8006346:	2001      	movs	r0, #1
}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000274 	.word	0x20000274
 8006350:	20000280 	.word	0x20000280
 8006354:	20000648 	.word	0x20000648

08006358 <MIDI_DataRx>:
{
 8006358:	b538      	push	{r3, r4, r5, lr}
  uint8_t msgtype = msg[1] & 0xF0;
 800635a:	7843      	ldrb	r3, [r0, #1]
 800635c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  uint8_t b1 =  msg[2];
 8006360:	7884      	ldrb	r4, [r0, #2]
  uint8_t b2 =  msg[3];
 8006362:	78c5      	ldrb	r5, [r0, #3]
  switch (msgtype)
 8006364:	2b80      	cmp	r3, #128	; 0x80
 8006366:	d003      	beq.n	8006370 <MIDI_DataRx+0x18>
 8006368:	2b90      	cmp	r3, #144	; 0x90
 800636a:	d039      	beq.n	80063e0 <MIDI_DataRx+0x88>
}
 800636c:	2000      	movs	r0, #0
 800636e:	bd38      	pop	{r3, r4, r5, pc}
	  if(b1 == 0x34) {
 8006370:	2c34      	cmp	r4, #52	; 0x34
 8006372:	d00a      	beq.n	800638a <MIDI_DataRx+0x32>
	  if(b1 == 0x36) {
 8006374:	2c36      	cmp	r4, #54	; 0x36
 8006376:	d017      	beq.n	80063a8 <MIDI_DataRx+0x50>
	  if(b1 == 0x38) {
 8006378:	2c38      	cmp	r4, #56	; 0x38
 800637a:	d024      	beq.n	80063c6 <MIDI_DataRx+0x6e>
	  if(b1 == 0x40) {
 800637c:	2c40      	cmp	r4, #64	; 0x40
 800637e:	d1f5      	bne.n	800636c <MIDI_DataRx+0x14>
		  MIDI_DataTx(Pitch, 4);
 8006380:	2104      	movs	r1, #4
 8006382:	4833      	ldr	r0, [pc, #204]	; (8006450 <MIDI_DataRx+0xf8>)
 8006384:	f7ff ffc6 	bl	8006314 <MIDI_DataTx>
 8006388:	e7f0      	b.n	800636c <MIDI_DataRx+0x14>
		  if(b2 == 0x00) {
 800638a:	b935      	cbnz	r5, 800639a <MIDI_DataRx+0x42>
			  HAL_GPIO_WritePin(DISC_GPIO_Port, DISC_Pin, GPIO_PIN_SET);
 800638c:	2201      	movs	r2, #1
 800638e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006392:	4830      	ldr	r0, [pc, #192]	; (8006454 <MIDI_DataRx+0xfc>)
 8006394:	f7fa fea6 	bl	80010e4 <HAL_GPIO_WritePin>
 8006398:	e7ec      	b.n	8006374 <MIDI_DataRx+0x1c>
			  HAL_GPIO_WritePin(DISC_GPIO_Port, DISC_Pin, GPIO_PIN_RESET);
 800639a:	2200      	movs	r2, #0
 800639c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063a0:	482c      	ldr	r0, [pc, #176]	; (8006454 <MIDI_DataRx+0xfc>)
 80063a2:	f7fa fe9f 	bl	80010e4 <HAL_GPIO_WritePin>
 80063a6:	e7e5      	b.n	8006374 <MIDI_DataRx+0x1c>
		  if(b2 == 0x00) {
 80063a8:	b935      	cbnz	r5, 80063b8 <MIDI_DataRx+0x60>
			  HAL_GPIO_WritePin(PLAY_GPIO_Port, PLAY_Pin, GPIO_PIN_SET);
 80063aa:	2201      	movs	r2, #1
 80063ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063b0:	4828      	ldr	r0, [pc, #160]	; (8006454 <MIDI_DataRx+0xfc>)
 80063b2:	f7fa fe97 	bl	80010e4 <HAL_GPIO_WritePin>
 80063b6:	e7df      	b.n	8006378 <MIDI_DataRx+0x20>
			  HAL_GPIO_WritePin(PLAY_GPIO_Port, PLAY_Pin, GPIO_PIN_RESET);
 80063b8:	2200      	movs	r2, #0
 80063ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063be:	4825      	ldr	r0, [pc, #148]	; (8006454 <MIDI_DataRx+0xfc>)
 80063c0:	f7fa fe90 	bl	80010e4 <HAL_GPIO_WritePin>
 80063c4:	e7d8      	b.n	8006378 <MIDI_DataRx+0x20>
		  if(b2 == 0x00) {
 80063c6:	b92d      	cbnz	r5, 80063d4 <MIDI_DataRx+0x7c>
			  HAL_GPIO_WritePin(CUE_GPIO_Port, CUE_Pin, GPIO_PIN_SET);
 80063c8:	2201      	movs	r2, #1
 80063ca:	2104      	movs	r1, #4
 80063cc:	4821      	ldr	r0, [pc, #132]	; (8006454 <MIDI_DataRx+0xfc>)
 80063ce:	f7fa fe89 	bl	80010e4 <HAL_GPIO_WritePin>
 80063d2:	e7d3      	b.n	800637c <MIDI_DataRx+0x24>
			  HAL_GPIO_WritePin(CUE_GPIO_Port, CUE_Pin, GPIO_PIN_RESET);
 80063d4:	2200      	movs	r2, #0
 80063d6:	2104      	movs	r1, #4
 80063d8:	481e      	ldr	r0, [pc, #120]	; (8006454 <MIDI_DataRx+0xfc>)
 80063da:	f7fa fe83 	bl	80010e4 <HAL_GPIO_WritePin>
 80063de:	e7cd      	b.n	800637c <MIDI_DataRx+0x24>
	  if(b1 == 0x34) {
 80063e0:	2c34      	cmp	r4, #52	; 0x34
 80063e2:	d00a      	beq.n	80063fa <MIDI_DataRx+0xa2>
	  if(b1 == 0x36) {
 80063e4:	2c36      	cmp	r4, #54	; 0x36
 80063e6:	d017      	beq.n	8006418 <MIDI_DataRx+0xc0>
	  if(b1 == 0x38) {
 80063e8:	2c38      	cmp	r4, #56	; 0x38
 80063ea:	d024      	beq.n	8006436 <MIDI_DataRx+0xde>
	  if(b1 == 0x40) {
 80063ec:	2c40      	cmp	r4, #64	; 0x40
 80063ee:	d1bd      	bne.n	800636c <MIDI_DataRx+0x14>
		  MIDI_DataTx(Pitch, 4);
 80063f0:	2104      	movs	r1, #4
 80063f2:	4817      	ldr	r0, [pc, #92]	; (8006450 <MIDI_DataRx+0xf8>)
 80063f4:	f7ff ff8e 	bl	8006314 <MIDI_DataTx>
 80063f8:	e7b8      	b.n	800636c <MIDI_DataRx+0x14>
		  if(b2 == 0x00) {
 80063fa:	b935      	cbnz	r5, 800640a <MIDI_DataRx+0xb2>
			  HAL_GPIO_WritePin(DISC_GPIO_Port, DISC_Pin, GPIO_PIN_SET);
 80063fc:	2201      	movs	r2, #1
 80063fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006402:	4814      	ldr	r0, [pc, #80]	; (8006454 <MIDI_DataRx+0xfc>)
 8006404:	f7fa fe6e 	bl	80010e4 <HAL_GPIO_WritePin>
 8006408:	e7ec      	b.n	80063e4 <MIDI_DataRx+0x8c>
			  HAL_GPIO_WritePin(DISC_GPIO_Port, DISC_Pin, GPIO_PIN_RESET);
 800640a:	2200      	movs	r2, #0
 800640c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006410:	4810      	ldr	r0, [pc, #64]	; (8006454 <MIDI_DataRx+0xfc>)
 8006412:	f7fa fe67 	bl	80010e4 <HAL_GPIO_WritePin>
 8006416:	e7e5      	b.n	80063e4 <MIDI_DataRx+0x8c>
		  if(b2 == 0x00) {
 8006418:	b935      	cbnz	r5, 8006428 <MIDI_DataRx+0xd0>
			  HAL_GPIO_WritePin(PLAY_GPIO_Port, PLAY_Pin, GPIO_PIN_SET);
 800641a:	2201      	movs	r2, #1
 800641c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006420:	480c      	ldr	r0, [pc, #48]	; (8006454 <MIDI_DataRx+0xfc>)
 8006422:	f7fa fe5f 	bl	80010e4 <HAL_GPIO_WritePin>
 8006426:	e7df      	b.n	80063e8 <MIDI_DataRx+0x90>
			  HAL_GPIO_WritePin(PLAY_GPIO_Port, PLAY_Pin, GPIO_PIN_RESET);
 8006428:	2200      	movs	r2, #0
 800642a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800642e:	4809      	ldr	r0, [pc, #36]	; (8006454 <MIDI_DataRx+0xfc>)
 8006430:	f7fa fe58 	bl	80010e4 <HAL_GPIO_WritePin>
 8006434:	e7d8      	b.n	80063e8 <MIDI_DataRx+0x90>
		  if(b2 == 0x00) {
 8006436:	b92d      	cbnz	r5, 8006444 <MIDI_DataRx+0xec>
			  HAL_GPIO_WritePin(CUE_GPIO_Port, CUE_Pin, GPIO_PIN_SET);
 8006438:	2201      	movs	r2, #1
 800643a:	2104      	movs	r1, #4
 800643c:	4805      	ldr	r0, [pc, #20]	; (8006454 <MIDI_DataRx+0xfc>)
 800643e:	f7fa fe51 	bl	80010e4 <HAL_GPIO_WritePin>
 8006442:	e7d3      	b.n	80063ec <MIDI_DataRx+0x94>
			  HAL_GPIO_WritePin(CUE_GPIO_Port, CUE_Pin, GPIO_PIN_RESET);
 8006444:	2200      	movs	r2, #0
 8006446:	2104      	movs	r1, #4
 8006448:	4802      	ldr	r0, [pc, #8]	; (8006454 <MIDI_DataRx+0xfc>)
 800644a:	f7fa fe4b 	bl	80010e4 <HAL_GPIO_WritePin>
 800644e:	e7cd      	b.n	80063ec <MIDI_DataRx+0x94>
 8006450:	200001cc 	.word	0x200001cc
 8006454:	40010c00 	.word	0x40010c00

08006458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006458:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800645a:	e003      	b.n	8006464 <LoopCopyDataInit>

0800645c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800645e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006460:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006462:	3104      	adds	r1, #4

08006464 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006464:	480a      	ldr	r0, [pc, #40]	; (8006490 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006466:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006468:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800646a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800646c:	d3f6      	bcc.n	800645c <CopyDataInit>
  ldr r2, =_sbss
 800646e:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006470:	e002      	b.n	8006478 <LoopFillZerobss>

08006472 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006472:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006474:	f842 3b04 	str.w	r3, [r2], #4

08006478 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006478:	4b08      	ldr	r3, [pc, #32]	; (800649c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800647a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800647c:	d3f9      	bcc.n	8006472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800647e:	f7ff fc77 	bl	8005d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006482:	f000 f80f 	bl	80064a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006486:	f7ff fa8f 	bl	80059a8 <main>
  bx lr
 800648a:	4770      	bx	lr
  ldr r3, =_sidata
 800648c:	08006820 	.word	0x08006820
  ldr r0, =_sdata
 8006490:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006494:	20000258 	.word	0x20000258
  ldr r2, =_sbss
 8006498:	20000258 	.word	0x20000258
  ldr r3, = _ebss
 800649c:	20000f44 	.word	0x20000f44

080064a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80064a0:	e7fe      	b.n	80064a0 <ADC1_2_IRQHandler>
	...

080064a4 <__libc_init_array>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	2500      	movs	r5, #0
 80064a8:	4e0c      	ldr	r6, [pc, #48]	; (80064dc <__libc_init_array+0x38>)
 80064aa:	4c0d      	ldr	r4, [pc, #52]	; (80064e0 <__libc_init_array+0x3c>)
 80064ac:	1ba4      	subs	r4, r4, r6
 80064ae:	10a4      	asrs	r4, r4, #2
 80064b0:	42a5      	cmp	r5, r4
 80064b2:	d109      	bne.n	80064c8 <__libc_init_array+0x24>
 80064b4:	f000 f822 	bl	80064fc <_init>
 80064b8:	2500      	movs	r5, #0
 80064ba:	4e0a      	ldr	r6, [pc, #40]	; (80064e4 <__libc_init_array+0x40>)
 80064bc:	4c0a      	ldr	r4, [pc, #40]	; (80064e8 <__libc_init_array+0x44>)
 80064be:	1ba4      	subs	r4, r4, r6
 80064c0:	10a4      	asrs	r4, r4, #2
 80064c2:	42a5      	cmp	r5, r4
 80064c4:	d105      	bne.n	80064d2 <__libc_init_array+0x2e>
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064cc:	4798      	blx	r3
 80064ce:	3501      	adds	r5, #1
 80064d0:	e7ee      	b.n	80064b0 <__libc_init_array+0xc>
 80064d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064d6:	4798      	blx	r3
 80064d8:	3501      	adds	r5, #1
 80064da:	e7f2      	b.n	80064c2 <__libc_init_array+0x1e>
 80064dc:	08006818 	.word	0x08006818
 80064e0:	08006818 	.word	0x08006818
 80064e4:	08006818 	.word	0x08006818
 80064e8:	0800681c 	.word	0x0800681c

080064ec <memset>:
 80064ec:	4603      	mov	r3, r0
 80064ee:	4402      	add	r2, r0
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d100      	bne.n	80064f6 <memset+0xa>
 80064f4:	4770      	bx	lr
 80064f6:	f803 1b01 	strb.w	r1, [r3], #1
 80064fa:	e7f9      	b.n	80064f0 <memset+0x4>

080064fc <_init>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	bf00      	nop
 8006500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006502:	bc08      	pop	{r3}
 8006504:	469e      	mov	lr, r3
 8006506:	4770      	bx	lr

08006508 <_fini>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	bf00      	nop
 800650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650e:	bc08      	pop	{r3}
 8006510:	469e      	mov	lr, r3
 8006512:	4770      	bx	lr
